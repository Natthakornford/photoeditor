// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ImglyKit
import AVFoundation
import Accelerate
import CommonCrypto
import Compression
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMedia
import CoreMotion
import CoreText
import Foundation
import GLKit
import ImageIO
@_exported import ImglyKit
import MetalKit
import MobileCoreServices
import OpenGLES
import Photos
import PhotosUI
import QuartzCore
import Security
import Swift
import UIKit
import os
@_inheritsConvenienceInitializers @objc(PESDKActionListSectionController) open class ActionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKActionMenuItem) open class ActionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage
  final public let actionClosure: (inout ImglyKit.PhotoEditModel) -> Swift.Void
  final public let selectedClosure: ((ImglyKit.PhotoEditModel) -> Swift.Bool)?
  @objc final public let supportsPhoto: Swift.Bool
  @objc final public let supportsVideo: Swift.Bool
  convenience public init(title: Swift.String, icon: UIKit.UIImage, actionClosure: @escaping (inout ImglyKit.PhotoEditModel) -> Swift.Void, selectedClosure: ((ImglyKit.PhotoEditModel) -> Swift.Bool)?)
  convenience public init(title: Swift.String, icon: UIKit.UIImage, supportsPhoto: Swift.Bool, supportsVideo: Swift.Bool, actionClosure: @escaping (inout ImglyKit.PhotoEditModel) -> Swift.Void, selectedClosure: ((ImglyKit.PhotoEditModel) -> Swift.Bool)?)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension ActionMenuItem {
  @objc public static func createMagicItem() -> ImglyKit.ActionMenuItem
}
extension ActionMenuItem {
  @objc convenience dynamic public init(title: Swift.String, icon: UIKit.UIImage, objcActionClosure: @escaping (ImglyKit._ObjCPhotoEditModel) -> Swift.Void, objcSelectedClosure: ((ImglyKit._ObjCPhotoEditModel) -> Swift.Bool)?)
}
@objcMembers @objc(PESDKAdjustEditController) open class AdjustEditController : ImglyKit.ViewController {
  final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>
  @objc weak open var delegate: ImglyKit.AdjustEditControllerDelegate?
  open var adjustTool: ImglyKit.AdjustTool? {
    get
    set
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc required convenience dynamic public init()
  public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  open func setAdjustTool(_ adjustTool: ImglyKit.AdjustTool?, animated: Swift.Bool)
  @objc open func updateSlider(for adjustTool: ImglyKit.AdjustTool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension AdjustEditController : ImglyKit.SliderEditControllerDelegate {
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension AdjustEditController : ImglyKit.PhotoEditModelSettable {
}
extension AdjustEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
@objc(PESDKAdjustEditControllerDelegate) public protocol AdjustEditControllerDelegate : AnyObject {
  @objc func adjustEditController(_ adjustEditController: ImglyKit.AdjustEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func adjustEditControllerTargetScrollView(_ adjustEditController: ImglyKit.AdjustEditController) -> UIKit.UIScrollView?
  @objc func adjustEditControllerDidChangePhotoEditModel(_ adjustEditController: ImglyKit.AdjustEditController)
  @objc func adjustEditControllerDidSlide(_ adjustEditController: ImglyKit.AdjustEditController, toValue value: CoreGraphics.CGFloat)
  @objc func adjustEditControllerDidEndSliding(_ adjustEditController: ImglyKit.AdjustEditController)
}
@_inheritsConvenienceInitializers @objc(PESDKAdjustListSectionController) open class AdjustListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAdjustMenuItem) open class AdjustMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  final public let adjustTool: ImglyKit.AdjustTool?
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init?(adjustTool: ImglyKit.AdjustTool)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKAdjustToolController) open class AdjustToolController : ImglyKit.MenuToolController, ImglyKit.AdjustEditControllerDelegate, ImglyKit.BrandedTool {
  @objc final public let adjustEditController: ImglyKit.AdjustEditController
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(adjustEditController: ImglyKit.AdjustEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc public func adjustEditControllerDidChangePhotoEditModel(_ adjustEditController: ImglyKit.AdjustEditController)
  @objc public func adjustEditControllerTargetScrollView(_ adjustEditController: ImglyKit.AdjustEditController) -> UIKit.UIScrollView?
  @objc public func adjustEditController(_ adjustEditController: ImglyKit.AdjustEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc public func adjustEditControllerDidSlide(_ adjustEditController: ImglyKit.AdjustEditController, toValue value: CoreGraphics.CGFloat)
  @objc public func adjustEditControllerDidEndSliding(_ adjustEditController: ImglyKit.AdjustEditController)
  @objc open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension AdjustToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc public enum AdjustTool : Swift.Int {
  case brightness
  case contrast
  case saturation
  case shadows
  case highlights
  case exposure
  case clarity
  case gamma
  case blacks
  case whites
  case temperature
  case sharpness
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum AdjustOverlayAction : Swift.Int {
  case undo
  case redo
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKAdjustToolControllerOptions) open class AdjustToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let showResetButton: Swift.Bool
  final public let allowedAdjustTools: [ImglyKit.AdjustTool]
  final public let adjustToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AdjustTool?) -> Swift.Void)?
  final public let adjustToolSelectedClosure: ((ImglyKit.AdjustTool?) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.AdjustTool) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  final public let allowedAdjustOverlayActions: [ImglyKit.AdjustOverlayAction]
  @objc final public let adjustActionSelectedClosure: ((ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.AdjustToolControllerOptionsBuilder)
  @objc deinit
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAdjustToolControllerOptionsBuilder) open class AdjustToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc public var showResetButton: Swift.Bool
  open var allowedAdjustTools: [ImglyKit.AdjustTool]
  open var adjustToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AdjustTool?) -> Swift.Void)?
  open var adjustToolSelectedClosure: ((ImglyKit.AdjustTool?) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.AdjustTool) -> Swift.Void)?
  @objc public var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  open var allowedAdjustOverlayActions: [ImglyKit.AdjustOverlayAction]
  @objc open var adjustActionSelectedClosure: ((ImglyKit.AdjustOverlayAction) -> Swift.Void)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc deinit
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
}
extension AdjustToolControllerOptionsBuilder {
  @objc(allowedAdjustTools) dynamic open var _objCAllowedAdjustTools: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedAdjustOverlayActions) dynamic open var _objCAllowedAdjustOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(adjustToolButtonConfigurationBlock) dynamic open var _objCAdjustToolButtonConfigurationBlock: ((ImglyKit.MenuCollectionViewCell, Foundation.NSNumber?) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc(adjustToolSelectedBlock) dynamic open var _objCAdjustToolSelectedBlock: ((Foundation.NSNumber?) -> Swift.Void)? {
    @objc get
    @objc set
  }
}
public struct AdjustmentModel : Swift.Equatable {
  public var brightness: Swift.Double
  public var contrast: Swift.Double
  public var shadows: Swift.Double
  public var highlights: Swift.Double
  public var exposure: Swift.Double
  public var clarity: Swift.Double
  public var saturation: Swift.Double
  public var gamma: Swift.Double
  public var blacks: Swift.Double
  public var whites: Swift.Double
  public var temperature: Swift.Double
  public var sharpness: Swift.Double
  public init(brightness: Swift.Double, contrast: Swift.Double, shadows: Swift.Double, highlights: Swift.Double, exposure: Swift.Double, clarity: Swift.Double, saturation: Swift.Double, gamma: Swift.Double, blacks: Swift.Double, whites: Swift.Double, temperature: Swift.Double, sharpness: Swift.Double)
  public init()
  public static func == (a: ImglyKit.AdjustmentModel, b: ImglyKit.AdjustmentModel) -> Swift.Bool
}
extension AdjustmentModel : ImglyKit.ObjectiveCBridgeable {
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAnalytics) open class Analytics : ObjectiveC.NSObject, ImglyKit.AnalyticsClient {
  @objc open var isEnabled: Swift.Bool
  @objc open func addAnalyticsClient(_ client: ImglyKit.AnalyticsClient)
  @objc open func removeAnalyticsClient(_ client: ImglyKit.AnalyticsClient)
  @objc open func logScreenView(_ screenView: ImglyKit.PESDKAnalyticsScreenViewName)
  @objc open func logEvent(_ event: ImglyKit.PESDKAnalyticsEventName, attributes: [ImglyKit.PESDKAnalyticsEventAttributeName : Any]? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKAnalyticsClient) public protocol AnalyticsClient : AnyObject {
  @objc func logScreenView(_ screenView: ImglyKit.PESDKAnalyticsScreenViewName)
  @objc func logEvent(_ event: ImglyKit.PESDKAnalyticsEventName, attributes: [ImglyKit.PESDKAnalyticsEventAttributeName : Any]?)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAnimationDelegate) open class AnimationDelegate : ObjectiveC.NSObject, QuartzCore.CAAnimationDelegate {
  @objc final public let block: (Swift.Bool) -> Swift.Void
  @objc open func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
extension NSNotification.Name {
  public static let StickerCategoriesDidChange: Foundation.Notification.Name
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAssetCatalog) final public class AssetCatalog : ObjectiveC.NSObject {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public var stickers: [ImglyKit.StickerCategory] {
    @objc get
    @objc set
  }
  @objc final public var videoClips: [ImglyKit.VideoClipCategory] {
    @objc get
    @objc set
  }
  @objc final public var frames: [ImglyKit.Frame] {
    @objc get
    @objc set
  }
  @objc final public var effects: [ImglyKit.Effect] {
    @objc get
    @objc set
  }
  @objc final public var overlays: [ImglyKit.Overlay] {
    @objc get
    @objc set
  }
  @objc final public var fonts: [ImglyKit.Font] {
    @objc get
    @objc set
  }
  @objc final public var textDesigns: [ImglyKit.TextDesign] {
    @objc get
    @objc set
  }
  @objc final public var audioClips: [ImglyKit.AudioClipCategory] {
    @objc get
    @objc set
  }
  @objc public static let shared: ImglyKit.AssetCatalog
  @objc final public var isShared: Swift.Bool {
    @objc get
  }
  @objc public static var sharedItems: ImglyKit.AssetCatalog {
    @objc get
  }
  @objc public static var defaultItems: ImglyKit.AssetCatalog {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc convenience public init(stickers: [ImglyKit.StickerCategory], frames: [ImglyKit.Frame], effects: [ImglyKit.Effect], overlays: [ImglyKit.Overlay], fonts: [ImglyKit.Font], textDesigns: [ImglyKit.TextDesign])
  @objc public init(stickers: [ImglyKit.StickerCategory], frames: [ImglyKit.Frame], effects: [ImglyKit.Effect], overlays: [ImglyKit.Overlay], fonts: [ImglyKit.Font], textDesigns: [ImglyKit.TextDesign], videoClips: [ImglyKit.VideoClipCategory], audioClips: [ImglyKit.AudioClipCategory])
  @objc final public func removeTemporaryItems()
  @objc final public func removeTemporaryItems(removeEmptyCategories: Swift.Bool)
  @objc final public func sticker(withIdentifier identifier: Swift.String) -> ImglyKit.Sticker?
  @objc final public func frame(withIdentifier identifier: Swift.String) -> ImglyKit.Frame?
  @objc final public func effect(withIdentifier identifier: Swift.String) -> ImglyKit.Effect?
  @objc final public func overlay(withIdentifier identifier: Swift.String) -> ImglyKit.Overlay?
  @objc final public func font(withIdentifier identifier: Swift.String) -> ImglyKit.Font?
  @objc final public func textDesign(withIdentifier identifier: Swift.String) -> ImglyKit.TextDesign?
  @objc final public func videoClip(withIdentifier identifier: Swift.String) -> ImglyKit.VideoClip?
  @objc final public func audioClip(withIdentifier identifier: Swift.String) -> ImglyKit.AudioClip?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAssetCollectionViewCell) open class AssetCollectionViewCell : UIKit.UICollectionViewCell {
  @objc final public let imageView: UIKit.UIImageView
  @objc open var activityIndicator: UIKit.UIActivityIndicatorView {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open func setupImageView()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objcMembers @objc(PESDKVideoAsset) open class VideoAsset : ObjectiveC.NSObject {
  @objc open var asset: AVFoundation.AVAsset?
  @objc open var userInfo: [Swift.String : Any]?
  @objc public init(asset: AVFoundation.AVAsset, userInfo: [Swift.String : Any]? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAssetManager) open class AssetManager : ObjectiveC.NSObject {
  @objc open func setImageAsset(_ imageAsset: ImglyKit.ImageAsset?, forIdentifier identifier: Swift.String)
  @objc open func imageAsset(forIdentifier identifier: Swift.String) -> ImglyKit.ImageAsset?
  @objc open func setVideoAsset(_ videoAsset: ImglyKit.VideoAsset?, forIdentifier identifier: Swift.String)
  @objc open func videoAsset(forIdentifier identifier: Swift.String) -> ImglyKit.VideoAsset?
  @objc open var progressClosure: ((Swift.Bool) -> Swift.Void)?
  @objc open func getImages(at urls: [Foundation.URL], completion: @escaping (([Foundation.URL : UIKit.UIImage], [Swift.Error]) -> Swift.Void))
  @objc open func getImage(at url: Foundation.URL, completion: @escaping ((UIKit.UIImage?, Swift.Error?) -> Swift.Void))
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKAudioClip) open class AudioClip : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String?
  @objc final public let artist: Swift.String?
  @objc final public let thumbnailURL: Foundation.URL?
  @objc final public let audioURL: Foundation.URL
  final public let duration: CoreMedia.CMTime?
  @objc convenience public init(identifier: Swift.String, audioURL: Foundation.URL)
  public init(identifier: Swift.String, audioURL: Foundation.URL, title: Swift.String?, artist: Swift.String?, thumbnailURL: Foundation.URL?, duration: CoreMedia.CMTime?)
  @objc public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.AudioClip?
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKAudioClipCategory) open class AudioClipCategory : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let imageURL: Foundation.URL?
  @objc final public let audioClips: [ImglyKit.AudioClip]
  @objc public static var all: [ImglyKit.AudioClipCategory] {
    @objc get
    @objc set
  }
  @objc public static var defaultItems: [ImglyKit.AudioClipCategory]
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL?, audioClips: [ImglyKit.AudioClip])
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL?, audioClips: [ImglyKit.AudioClip])
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc open class AudioClipCategoryListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioClipCategoryMenuItem) open class AudioClipCategoryMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let audioClipCategory: ImglyKit.AudioClipCategory
  @objc final public let title: Swift.String
  @objc final public let iconURL: Foundation.URL?
  @objc convenience public init(audioClipCategory: ImglyKit.AudioClipCategory)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public struct AudioClipModel : Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public var trimModel: ImglyKit.TrimModel
  public init(identifier: Swift.String)
  public static func == (a: ImglyKit.AudioClipModel, b: ImglyKit.AudioClipModel) -> Swift.Bool
}
extension AudioClipModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKAudioClipSelectionController) open class AudioClipSelectionController : UIKit.UIViewController {
  @objc open var tableView: UIKit.UITableView {
    @objc get
  }
  @objc open var gradientView: ImglyKit.GradientView {
    @objc get
  }
  @objc open var visualEffectView: UIKit.UIVisualEffectView {
    @objc get
  }
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc open var audioClips: [ImglyKit.AudioClip] {
    @objc get
    @objc set
  }
  @objc weak open var delegate: ImglyKit.AudioClipSelectionControllerDelegate?
  @objc open var cellConfigurationClosure: ((ImglyKit.AudioClipTableViewCell, ImglyKit.AudioClip) -> Swift.Void)?
  open var useMetadata: Swift.Bool?
  @objc public static var tableViewCellType: ImglyKit.AudioClipTableViewCell.Type {
    @objc get
  }
  @objc required dynamic public init()
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension AudioClipSelectionController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
extension AudioClipSelectionController : UIKit.UITableViewDataSource {
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@available(*, deprecated, message: "AudioClipSelectionController will not conform to AVAudioPlayerDelegate in the future.")
extension AudioClipSelectionController : AVFoundation.AVAudioPlayerDelegate {
  @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFoundation.AVAudioPlayer, successfully flag: Swift.Bool)
}
@objc(PESDKAudioClipSelectionControllerDelegate) public protocol AudioClipSelectionControllerDelegate : AnyObject {
  @objc func audioClipSelectionController(_ audioClipSelectionController: ImglyKit.AudioClipSelectionController, didSelect audioClip: ImglyKit.AudioClip?)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioClipTableViewCell) open class AudioClipTableViewCell : UIKit.UITableViewCell {
  @objc public var isPlaying: Swift.Bool {
    @objc get
  }
  @objc final public let artworkImageView: UIKit.UIImageView
  @objc final public let playImageView: UIKit.UIImageView
  @objc final public let titleLabel: UIKit.UILabel
  @objc final public let artistLabel: UIKit.UILabel
  @objc final public let durationLabel: UIKit.UILabel
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@objcMembers @objc open class AudioClipToolController : ImglyKit.MenuToolController {
  @objc final public let audioClipSelectionController: ImglyKit.AudioClipSelectionController
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(audioClipSelectionController: ImglyKit.AudioClipSelectionController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func updateUserInterfaceState()
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension AudioClipToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
extension AudioClipToolController : ImglyKit.AudioClipSelectionControllerDelegate {
  @objc dynamic public func audioClipSelectionController(_ audioClipSelectionController: ImglyKit.AudioClipSelectionController, didSelect audioClip: ImglyKit.AudioClip?)
}
@objcMembers @objc(PESDKAudioClipToolControllerOptions) open class AudioClipToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let audioClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AudioClipCategory) -> Swift.Void)?
  @objc final public let audioClipButtonConfigurationClosure: ((ImglyKit.AudioClipTableViewCell, ImglyKit.AudioClip) -> Swift.Void)?
  @objc final public let defaultAudioClipCategoryIndex: Swift.Int
  @objc final public let useMetadata: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.AudioClipToolControllerOptionsBuilder)
  @objc deinit
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
}
@objcMembers @objc(PESDKAudioClipToolControllerOptionsBuilder) open class AudioClipToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var audioClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.AudioClipCategory) -> Swift.Void)?
  @objc open var audioClipButtonConfigurationClosure: ((ImglyKit.AudioClipTableViewCell, ImglyKit.AudioClip) -> Swift.Void)?
  @objc open var defaultAudioClipCategoryIndex: Swift.Int
  @objc open var useMetadata: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.AudioClipToolControllerOptions)
  @objc deinit
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioClipViewModel) open class AudioClipViewModel : ObjectiveC.NSObject {
  @objc final public let audioClip: ImglyKit.AudioClip
  @objc convenience public init(audioClip: ImglyKit.AudioClip)
  @objc override dynamic public init()
  @objc deinit
}
public struct AudioModel : Swift.Equatable {
  public var clips: [ImglyKit.AudioClipModel]
  public var volumeBalance: Swift.Double
  public init()
  public init(clips: [ImglyKit.AudioClipModel], volumeBalance: Swift.Double)
  public static func == (a: ImglyKit.AudioModel, b: ImglyKit.AudioModel) -> Swift.Bool
}
extension AudioModel : ImglyKit.ObjectiveCBridgeable {
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioToolController) open class AudioToolController : ImglyKit.PhotoEditToolController, ImglyKit.BrandedTool {
  @objc open var proxyZoomController: ImglyKit.ProxyZoomController {
    @objc get
  }
  @objc open var sliderContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var trimViewContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var labelContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var slider: ImglyKit.TooltipSlider {
    @objc get
  }
  @objc open var startTimeLabel: ImglyKit.PrimaryLabel {
    @objc get
  }
  @objc open var trackNameLabel: ImglyKit.PrimaryLabel {
    @objc get
  }
  @objc open var trimView: ImglyKit.AudioTrimView {
    @objc get
  }
  @objc open var trimViewHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func updateViewConstraints()
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc override open var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  @objc open var deleteButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var playPauseButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
}
extension AudioToolController : ImglyKit.AudioTrimViewDelegate {
  @objc dynamic public func audioTrimViewDidStartScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
  @objc dynamic public func audioTrimView(_ audioTrimView: ImglyKit.AudioTrimView, didScrollAudioTrackTo startTime: CoreMedia.CMTime)
  @objc dynamic public func audioTrimViewDidStopScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
}
extension AudioToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
extension AudioToolController : ImglyKit.ProxyZoomControllerDelegate {
  @objc dynamic open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc dynamic open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@objc public enum AudioOverlayAction : Swift.Int {
  case delete
  case playPause
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKAudioToolControllerOptions) open class AudioToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AudioOverlayAction) -> Swift.Void)?
  final public let allowedAudioOverlayActions: [ImglyKit.AudioOverlayAction]
  @objc final public let audioOverlayActionSelectedClosure: ((ImglyKit.AudioOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.AudioToolControllerOptionsBuilder)
  @objc deinit
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
}
@objcMembers @objc(PESDKAudioToolControllerOptionsBuilder) open class AudioToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.AudioOverlayAction) -> Swift.Void)?
  open var allowedAudioOverlayActions: [ImglyKit.AudioOverlayAction]
  @objc open var audioOverlayActionSelectedClosure: ((ImglyKit.AudioOverlayAction) -> Swift.Void)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.AudioToolControllerOptions)
  @objc deinit
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
}
@objc(PESDKAudioTrimViewDelegate) public protocol AudioTrimViewDelegate : AnyObject {
  @objc func audioTrimViewDidStartScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
  @objc func audioTrimView(_ audioTrimView: ImglyKit.AudioTrimView, didScrollAudioTrackTo startTime: CoreMedia.CMTime)
  @objc func audioTrimViewDidStopScrollingAudioTrack(_ audioTrimView: ImglyKit.AudioTrimView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKAudioTrimView) open class AudioTrimView : UIKit.UIView {
  @objc weak public var delegate: ImglyKit.AudioTrimViewDelegate?
  @objc public var asset: AVFoundation.AVAsset? {
    @objc get
    @objc set
  }
  @objc public var audioStartTime: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc public var timelineTime: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc public var timelineDuration: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
extension AudioTrimView : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
}
@objc(PESDKBlendMode) public enum BlendMode : Swift.Int {
  case normal
  case overlay
  case softLight
  case hardLight
  case multiply
  case darken
  case colorBurn
  case screen
  case lighten
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension BlendMode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var defaultIntensity: CoreGraphics.CGFloat {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKBlendModeCollectionViewCell) open class BlendModeCollectionViewCell : UIKit.UICollectionViewCell {
  @objc final public let blendModeLabel: UIKit.UILabel
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKBlendModeMenuItem) open class BlendModeMenuItem : ObjectiveC.NSObject {
  @objc final public let blendMode: ImglyKit.BlendMode
  @objc final public let title: Swift.String
  @objc convenience public init(blendMode: ImglyKit.BlendMode)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKBoxGradientView) open class BoxGradientView : ImglyKit.FocusGradientView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public struct Branding {
  public init(image: UIKit.UIImage)
}
public protocol BrandedView {
  var branding: ImglyKit.Branding? { get }
}
public protocol BrandedTool {
}
@_hasMissingDesignatedInitializers @objc(PESDKBrush) open class Brush : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension Brush : ImglyKit.GeneratorDelegate {
  @objc dynamic public func generatorDidChange(_ generator: ImglyKit.StampGenerator)
}
@objcMembers open class BrushColorToolController : ImglyKit.ColorToolController<ImglyKit.BrushSpriteModel, ImglyKit.SpriteGestureController<ImglyKit.BrushSpriteModel, UIKit.UIView>, UIKit.UIView> {
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc open var colorChangedHandler: ((UIKit.UIColor) -> Swift.Void)?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @objc override open func configureToolbarItem()
  @objc override open func updateUserInterfaceState()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  override public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
  override public init?(colorPickerViewController: ImglyKit.ColorPickerViewController<ImglyKit.BrushSpriteModel, ImglyKit.SpriteGestureController<ImglyKit.BrushSpriteModel, UIKit.UIView>, UIKit.UIView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension BrushColorToolController : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@objc(PESDKBrushColorToolControllerOptions) open class BrushColorToolControllerOptions : ImglyKit.ColorToolControllerOptions {
  @objc convenience dynamic public init()
  @objc public init(brushBuilder: ImglyKit.BrushColorToolControllerOptionsBuilder)
  @objc deinit
  @objc override public init(builder: ImglyKit.ColorToolControllerOptionsBuilder)
}
@objc(PESDKBrushColorToolControllerOptionsBuilder) open class BrushColorToolControllerOptionsBuilder : ImglyKit.ColorToolControllerOptionsBuilder {
  @objc override dynamic public init()
  @objc public init(brushOptions: ImglyKit.BrushColorToolControllerOptions)
  @objc deinit
  @objc override public init(options: ImglyKit.ColorToolControllerOptions)
}
extension BrushEditController : ImglyKit.VideoPreviewControlling {
  @objc dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKBrushEditController) open class BrushEditController : ImglyKit.ViewController {
  final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>
  @objc open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.BrushTool) -> Swift.Void)?
  @objc weak open var delegate: ImglyKit.BrushEditControllerDelegate?
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var brushPreviewView: ImglyKit.BrushPreviewView {
    @objc get
  }
  open var activeBrushTool: ImglyKit.BrushTool? {
    get
    set
  }
  @objc open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var size: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var hardness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc required convenience dynamic public init()
  public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.TooltipSlider>)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension BrushEditController : ImglyKit.SliderEditControllerDelegate {
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension BrushEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
extension BrushEditController : ImglyKit.PhotoEditModelSettable {
}
@objc(PESDKBrushEditControllerDelegate) public protocol BrushEditControllerDelegate : AnyObject {
  @objc func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func brushEditControllerPhotoEditModelDidChange(_ brushEditController: ImglyKit.BrushEditController)
  @objc func brushEditControllerTargetScrollView(_ brushEditController: ImglyKit.BrushEditController) -> UIKit.UIScrollView?
  @objc func brushEditControllerSpriteViewController(_ brushEditController: ImglyKit.BrushEditController) -> ImglyKit.SpriteViewController?
  @objc func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToSize size: CoreGraphics.CGFloat)
  @objc func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToHardness hardness: CoreGraphics.CGFloat)
  @objc func brushEditControllerDidStartSliding(_ brushEditController: ImglyKit.BrushEditController)
  @objc func brushEditControllerDidEndSliding(_ brushEditController: ImglyKit.BrushEditController)
}
@_inheritsConvenienceInitializers @objc(PESDKBrushListSectionController) open class BrushListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKBrushMenuItem) open class BrushMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let brushTool: ImglyKit.BrushTool
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(brushTool: ImglyKit.BrushTool, icon: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKBrushPreviewView) open class BrushPreviewView : UIKit.UIVisualEffectView {
  @objc final public let imageView: UIKit.UIImageView
  @objc open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var width: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var hardness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic public init(effect: UIKit.UIVisualEffect?)
  @objc deinit
}
public struct BrushSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var paths: [ImglyKit.PathModel]
  public func pathModel(with uuid: Foundation.UUID) -> (Swift.Int, ImglyKit.PathModel)?
  public init()
  public init(paths: [ImglyKit.PathModel])
  public static func == (a: ImglyKit.BrushSpriteModel, b: ImglyKit.BrushSpriteModel) -> Swift.Bool
}
public func == (lhs: [ImglyKit.PathModel], rhs: [ImglyKit.PathModel]) -> Swift.Bool
public func != (lhs: [ImglyKit.PathModel], rhs: [ImglyKit.PathModel]) -> Swift.Bool
@objcMembers @objc(PESDKBrushToolController) open class BrushToolController : ImglyKit.MenuToolController, ImglyKit.BrushEditControllerDelegate, ImglyKit.BrandedTool {
  @objc final public let brushEditController: ImglyKit.BrushEditController
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(brushEditController: ImglyKit.BrushEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func willBecomeActiveTool()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc public func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc public func brushEditControllerPhotoEditModelDidChange(_ brushEditController: ImglyKit.BrushEditController)
  @objc public func brushEditControllerTargetScrollView(_ brushEditController: ImglyKit.BrushEditController) -> UIKit.UIScrollView?
  @objc public func brushEditControllerSpriteViewController(_ brushEditController: ImglyKit.BrushEditController) -> ImglyKit.SpriteViewController?
  @objc public func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToSize size: CoreGraphics.CGFloat)
  @objc public func brushEditController(_ brushEditController: ImglyKit.BrushEditController, didUpdateToHardness hardness: CoreGraphics.CGFloat)
  @objc public func brushEditControllerDidStartSliding(_ brushEditController: ImglyKit.BrushEditController)
  @objc public func brushEditControllerDidEndSliding(_ brushEditController: ImglyKit.BrushEditController)
  @objc open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension BrushToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc public enum BrushTool : Swift.Int {
  case color
  case size
  case hardness
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum BrushOverlayAction : Swift.Int {
  case undo
  case redo
  case delete
  case bringToFront
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKBrushToolControllerOptions) open class BrushToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedBrushTools: [ImglyKit.BrushTool]
  @objc final public let brushToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.BrushTool) -> Swift.Void)?
  @objc final public let brushToolSelectedClosure: ((ImglyKit.BrushTool) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.BrushTool) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.BrushOverlayAction) -> Swift.Void)?
  final public let allowedBrushOverlayActions: [ImglyKit.BrushOverlayAction]
  @objc final public let brushActionSelectedClosure: ((ImglyKit.BrushOverlayAction) -> Swift.Void)?
  final public let minimumBrushSize: ImglyKit.FloatValue
  final public let maximumBrushSize: ImglyKit.FloatValue
  final public let defaultBrushSize: ImglyKit.FloatValue
  @objc final public let minimumBrushHardness: CoreGraphics.CGFloat
  @objc final public let maximumBrushHardness: CoreGraphics.CGFloat
  @objc final public let defaultBrushHardness: CoreGraphics.CGFloat
  @objc final public let defaultBrushColor: UIKit.UIColor
  @objc final public let usesUniformHardness: Swift.Bool
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.BrushToolControllerOptionsBuilder)
  @objc deinit
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
}
@objcMembers @objc(PESDKBrushToolControllerOptionsBuilder) open class BrushToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedBrushTools: [ImglyKit.BrushTool]
  @objc open var brushToolButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.BrushTool) -> Swift.Void)?
  @objc open var brushToolSelectedClosure: ((ImglyKit.BrushTool) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.BrushTool) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.BrushOverlayAction) -> Swift.Void)?
  open var allowedBrushOverlayActions: [ImglyKit.BrushOverlayAction]
  @objc open var brushActionSelectedClosure: ((ImglyKit.BrushOverlayAction) -> Swift.Void)?
  open var minimumBrushSize: ImglyKit.FloatValue
  open var maximumBrushSize: ImglyKit.FloatValue
  open var defaultBrushSize: ImglyKit.FloatValue
  @objc open var minimumBrushHardness: CoreGraphics.CGFloat
  @objc open var maximumBrushHardness: CoreGraphics.CGFloat
  @objc open var defaultBrushHardness: CoreGraphics.CGFloat
  @objc open var defaultBrushColor: UIKit.UIColor
  @objc open var usesUniformHardness: Swift.Bool
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.BrushToolControllerOptions)
  @objc deinit
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
}
extension BrushToolControllerOptionsBuilder {
  @objc(allowedBrushTools) dynamic open var _objCAllowedBrushTools: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedBrushOverlayActions) dynamic open var _objCAllowedBrushOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(minimumBrushSize) dynamic open var _objCMinimumBrushSize: ImglyKit._ObjCFloatValue {
    @objc get
    @objc set
  }
  @objc(maximumBrushSize) dynamic open var _objCMaximumBrushSize: ImglyKit._ObjCFloatValue {
    @objc get
    @objc set
  }
  @objc(defaultBrushSize) dynamic open var _objCDefaultBrushSize: ImglyKit._ObjCFloatValue {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKButton) open class Button : UIKit.UIButton {
  @objc open func setActionClosure(_ actionClosure: ((Swift.AnyObject) -> Swift.Void)?, for controlEvents: UIKit.UIControl.Event)
  @objc open var actionClosure: ((Swift.AnyObject) -> Swift.Void)? {
    @objc get
    @objc set
  }
  open var registeredControlEvents: UIKit.UIControl.Event? {
    get
  }
  @objc open var touchAreaInsets: UIKit.UIEdgeInsets
  @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func tintColorDidChange()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
infix operator ~== : ComparisonPrecedence
@objc public enum CameraControllerError : Swift.Int, Swift.Error {
  case multipleCallsToSetup
  case unableToInitializeCaptureDevice
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCameraController) open class CameraController : ObjectiveC.NSObject {
  @objc open var locationAccessRequestClosure: ((CoreLocation.CLLocationManager) -> Swift.Void)?
  @objc final public let videoPreviewView: UIKit.UIView
  @objc final public let videoPreviewViewContainer: UIKit.UIView
  @objc dynamic open var recordingMode: ImglyKit.RecordingMode {
    @objc get
    @objc set
  }
  @objc open var runningStateChangedHandler: ((Swift.Bool) -> Swift.Void)?
  @objc open var cameraPositionChangedHandler: ((AVFoundation.AVCaptureDevice.Position, AVFoundation.AVCaptureDevice.Position) -> Swift.Void)?
  @objc open var recordingModeChangedHandler: ((ImglyKit.RecordingMode) -> Swift.Void)?
  @objc open var availableCameraPositionsChangedHandler: (() -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc open var flashChangedHandler: ((Swift.Bool, AVFoundation.AVCaptureDevice.FlashMode, Swift.Bool) -> Swift.Void)?
  @objc open var torchChangedHandler: ((Swift.Bool, AVFoundation.AVCaptureDevice.TorchMode, Swift.Bool) -> Swift.Void)?
  @objc open var capturingStillImageHandler: ((Swift.Bool) -> Swift.Void)?
  @objc open var sessionInterruptionHandler: ((Swift.Bool) -> Swift.Void)?
  @objc open var sessionRuntimeErrorHandler: ((Foundation.NSError) -> Swift.Void)?
  @objc open var authorizationFailedHandler: (() -> Swift.Void)?
  @objc open var videoRecordingStartedHandler: (() -> Swift.Void)?
  @objc open var videoRecordingFinishedHandler: ((Foundation.URL) -> Swift.Void)?
  @objc open var videoRecordingFailedHandler: (() -> Swift.Void)?
  @objc open var videoRecordingProgressHandler: ((Swift.Int) -> Swift.Void)?
  @objc open var previewFrameChangedHandler: ((CoreGraphics.CGRect) -> Swift.Void)?
  @objc open var focusPointChangedHandler: ((CoreGraphics.CGPoint) -> Swift.Void)?
  @objc open var focusModeChangedHandler: ((AVFoundation.AVCaptureDevice.FocusMode, AVFoundation.AVCaptureDevice.ExposureMode) -> Swift.Void)?
  @objc open var focusDisabledHandler: (() -> Swift.Void)?
  @objc open var videoOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var audioOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var videoRecordingFileType: AVFoundation.AVFileType
  @objc open var videoRecordingFileExtension: Swift.String
  @objc open var assetWriterConfigurationClosure: ((AVFoundation.AVAssetWriter) -> Swift.Void)?
  open var cameraPosition: AVFoundation.AVCaptureDevice.Position? {
    get
  }
  open var cameraPositions: [AVFoundation.AVCaptureDevice.Position] {
    get
    set
  }
  open var flashModes: [AVFoundation.AVCaptureDevice.FlashMode] {
    get
    set
  }
  open var torchModes: [AVFoundation.AVCaptureDevice.TorchMode] {
    get
    set
  }
  @objc open var tapToFocusEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var effect: ImglyKit.Effect? {
    @objc get
    @objc set
  }
  @objc open var effectIntensity: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var includeEffectInOutput: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var includeUserLocation: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  @objc(setupWithInitialRecordingMode:error:) open func setup(with recordingMode: ImglyKit.RecordingMode) throws
  @objc(setupWithInitialRecordingMode:completion:error:) open func setup(with recordingMode: ImglyKit.RecordingMode, completion: (() -> Swift.Void)?) throws
  @objc open func startCamera()
  @objc open func stopCamera()
  @objc open func toggleCameraPosition()
  @objc(switchToCameraAtPosition:) open func switchToCamera(at position: AVFoundation.AVCaptureDevice.Position)
  @objc open func takePhoto(_ completion: @escaping (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void)
  @objc open func takePhotoAndReturnData(_ completion: @escaping (Foundation.Data?, Foundation.NSError?) -> Swift.Void)
  @objc open func startVideoRecording()
  @objc open func stopVideoRecording()
  @objc open func selectNextLightMode()
  @objc open func zoom(withDesiredZoomFactor zoomFactor: CoreGraphics.CGFloat)
}
extension CameraController : Foundation.NSKeyValueObservingCustomization {
  public static func keyPathsAffectingValue(for key: Swift.AnyKeyPath) -> Swift.Set<Swift.AnyKeyPath>
  public static func automaticallyNotifiesObservers(for key: Swift.AnyKeyPath) -> Swift.Bool
}
extension CameraController : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
extension CameraController {
  @objc(cameraPositions) dynamic open var _objCCameraPositions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(flashModes) dynamic open var _objCFlashModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(torchModes) dynamic open var _objCTorchModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@objcMembers @objc(PESDKCameraViewController) open class CameraViewController : UIKit.UIViewController {
  @objc dynamic public init()
  @objc public init(configuration: ImglyKit.Configuration = Configuration())
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
  }
  @objc open var backgroundContainerView: UIKit.UIView {
    @objc get
  }
  @objc open var topControlsView: UIKit.UIView {
    @objc get
  }
  @objc open var cameraPreviewContainer: UIKit.UIView {
    @objc get
  }
  @objc open var bottomControlsView: UIKit.UIView {
    @objc get
  }
  @objc open var bottomSafeAreaHidingView: UIKit.UIView {
    @objc get
  }
  @objc open var cancelButton: ImglyKit.Button {
    @objc get
  }
  @objc open var flashButton: ImglyKit.Button {
    @objc get
  }
  @objc open var switchCameraButton: ImglyKit.Button {
    @objc get
  }
  @objc open var cameraRollButton: ImglyKit.Button {
    @objc get
  }
  @objc open var actionButtonContainer: UIKit.UIView {
    @objc get
  }
  @objc open var recordingTimeLabel: UIKit.UILabel {
    @objc get
  }
  @objc open var actionButton: UIKit.UIControl? {
    get
  }
  @objc open var filterSelectionButton: ImglyKit.Button {
    @objc get
  }
  @objc open var filterIntensitySlider: ImglyKit.Slider {
    @objc get
  }
  @objc open var swipeRightGestureRecognizer: UIKit.UISwipeGestureRecognizer {
    @objc get
  }
  @objc open var swipeLeftGestureRecognizer: UIKit.UISwipeGestureRecognizer {
    @objc get
  }
  @objc open var pinchGestureRecognizer: UIKit.UIPinchGestureRecognizer {
    @objc get
  }
  @objc final public let filterSelectionController: ImglyKit.FilterSelectionController
  @objc open var cameraController: ImglyKit.CameraController? {
    get
  }
  @objc open var cancelBlock: (() -> Swift.Void)?
  @objc open var completionBlock: ((UIKit.UIImage?, Foundation.URL?) -> Swift.Void)?
  @objc open var locationAccessRequestClosure: ((CoreLocation.CLLocationManager) -> Swift.Void)?
  @objc open var dataCompletionBlock: ((Foundation.Data?) -> Swift.Void)?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open var shouldAutomaticallyForwardAppearanceMethods: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc open func setLastImageFromRollAsPreview()
  @objc open func takePhoto(_ sender: ImglyKit.Button?)
  @objc open func recordVideo(_ sender: ImglyKit.VideoRecordButton?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension CameraViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension CameraViewController : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension CameraViewController {
  @objc(photoEditModel) dynamic open var _objCPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCameraViewControllerOptions) open class CameraViewControllerOptions : ObjectiveC.NSObject {
  @objc final public let backgroundColor: UIKit.UIColor?
  @objc final public let cancelButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let flashButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let switchCameraButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let cameraRollButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let photoActionButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let filterSelectorButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let timeLabelConfigurationClosure: ((UIKit.UILabel) -> Swift.Void)?
  @objc final public let filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let recordingModeButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.RecordingMode) -> Swift.Void)?
  @objc final public let cropToSquare: Swift.Bool
  @objc final public let maximumVideoLength: Swift.Int
  @objc final public let tapToFocusEnabled: Swift.Bool
  @objc final public let showCancelButton: Swift.Bool
  @objc final public let showCameraRoll: Swift.Bool
  @objc final public let showFilters: Swift.Bool
  @objc final public let showFilterIntensitySlider: Swift.Bool
  @objc final public let initialFilterIntensity: CoreGraphics.CGFloat
  final public let allowedCameraPositions: [AVFoundation.AVCaptureDevice.Position]
  final public let allowedFlashModes: [AVFoundation.AVCaptureDevice.FlashMode]
  final public let allowedTorchModes: [AVFoundation.AVCaptureDevice.TorchMode]
  final public let allowedRecordingModes: [ImglyKit.RecordingMode]
  final public let allowedRecordingOrientations: [ImglyKit.RecordingOrientation]
  @objc final public let videoOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc final public let audioOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc final public let videoRecordingFileType: AVFoundation.AVFileType
  @objc final public let videoRecordingFileExtension: Swift.String
  @objc final public let assetWriterConfigurationClosure: ((AVFoundation.AVAssetWriter) -> Swift.Void)?
  @objc final public let includeUserLocation: Swift.Bool
  @objc final public let writeVideoWithFilterApplied: Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCameraViewControllerOptionsBuilder) open class CameraViewControllerOptionsBuilder : ObjectiveC.NSObject {
  @objc open var backgroundColor: UIKit.UIColor?
  @objc open var cancelButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var flashButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var switchCameraButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var cameraRollButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var photoActionButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var filterSelectorButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var timeLabelConfigurationClosure: ((UIKit.UILabel) -> Swift.Void)?
  @objc open var filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var recordingModeButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.RecordingMode) -> Swift.Void)?
  @objc open var cropToSquare: Swift.Bool
  @objc open var maximumVideoLength: Swift.Int
  @objc open var tapToFocusEnabled: Swift.Bool
  @objc open var showCancelButton: Swift.Bool
  @objc open var showCameraRoll: Swift.Bool
  @objc open var showFilters: Swift.Bool
  @objc open var showFilterIntensitySlider: Swift.Bool
  @objc open var initialFilterIntensity: CoreGraphics.CGFloat
  open var allowedCameraPositions: [AVFoundation.AVCaptureDevice.Position]
  open var allowedFlashModes: [AVFoundation.AVCaptureDevice.FlashMode]
  open var allowedTorchModes: [AVFoundation.AVCaptureDevice.TorchMode]
  open var allowedRecordingModes: [ImglyKit.RecordingMode]
  open var allowedRecordingOrientations: [ImglyKit.RecordingOrientation]
  @objc open var videoOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var audioOutputSettings: [Swift.String : Swift.AnyObject]?
  @objc open var videoRecordingFileType: AVFoundation.AVFileType
  @objc open var videoRecordingFileExtension: Swift.String
  @objc open var assetWriterConfigurationClosure: ((AVFoundation.AVAssetWriter) -> Swift.Void)?
  @objc open var includeUserLocation: Swift.Bool
  @objc open var writeVideoWithFilterApplied: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension CameraViewControllerOptionsBuilder {
  @objc(allowedCameraPositions) dynamic open var _objCAllowedCameraPositions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedFlashModes) dynamic open var _objCAllowedFlashModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedTorchModes) dynamic open var _objCAllowedTorchModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedRecordingModes) dynamic open var _objCAllowedRecordingModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedRecordingOrientations) dynamic open var _objCallowedRecordingOrientations: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@objc(PESDKCanvasViewDataSource) public protocol CanvasViewDataSource {
  @objc func canvasViewNormalizedCropRect(_ canvasView: ImglyKit.CanvasView) -> CoreGraphics.CGRect
  @objc func canvasViewAppliedOrientation(_ canvasView: ImglyKit.CanvasView) -> ImglyKit.Orientation
  @objc func canvasViewStraightenAngle(_ canvasView: ImglyKit.CanvasView) -> CoreGraphics.CGFloat
  @objc func canvasViewImageInsets(_ canvasView: ImglyKit.CanvasView) -> UIKit.UIEdgeInsets
  @objc func canvasViewOutputImageSize(_ canvasView: ImglyKit.CanvasView) -> CoreGraphics.CGSize
}
public protocol CanvasViewDelegate : AnyObject {
  func canvasView(_ canvasView: ImglyKit.CanvasView, didAddPathModel pathModel: ImglyKit.PathModel)
}
@objcMembers @objc(PESDKCanvasView) open class CanvasView : GLKit.GLKView {
  @objc final public let painting: ImglyKit.Painting
  @objc open var activeTool: ImglyKit.Tool
  @objc weak open var dataSource: ImglyKit.CanvasViewDataSource?
  weak open var canvasDelegate: ImglyKit.CanvasViewDelegate?
  @objc final public let uuid: Foundation.UUID
  @objc open var currentlyPainting: Swift.Bool {
    get
  }
  @objc required public init(painting: ImglyKit.Painting, activeTool: ImglyKit.Tool, uuid: Foundation.UUID, frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc open func handlePan(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  @objc open func convertPointToDocument(_ pt: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect, context: OpenGLES.EAGLContext)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension CanvasView : ImglyKit.Identifiable {
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCircleGradientView) open class CircleGradientView : ImglyKit.FocusGradientView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKClarityFilter) open class ClarityFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKClipTrimToolController) open class ClipTrimToolController : ImglyKit.TrimToolController {
  @objc open var deleteOverlayButton: ImglyKit.OverlayButton? {
    get
  }
  @objc deinit
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
@objc public enum ClipTrimOverlayAction : Swift.Int {
  case delete
  case playPause
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKClipTrimToolControllerOptions) open class ClipTrimToolControllerOptions : ImglyKit.TrimToolOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  final public let allowedClipTrimOverlayActions: [ImglyKit.ClipTrimOverlayAction]
  @objc final public let clipTrimOverlayActionSelectedClosure: ((ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.ClipTrimToolControllerOptionsBuilder)
  @objc deinit
  @objc override public init(trimBuilder: ImglyKit.TrimToolOptionsBuilder)
}
@objcMembers @objc(PESDKClipTrimToolControllerOptionsBuilder) open class ClipTrimToolControllerOptionsBuilder : ImglyKit.TrimToolOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  open var allowedClipTrimOverlayActions: [ImglyKit.ClipTrimOverlayAction]
  @objc open var clipTrimOverlayActionSelectedClosure: ((ImglyKit.ClipTrimOverlayAction) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.ClipTrimToolControllerOptions)
  @objc deinit
  @objc override public init(trimOptions: ImglyKit.TrimToolOptions)
}
public struct CollectionViewTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(collectionView: UIKit.UICollectionView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColor) open class Color : ObjectiveC.NSObject {
  @objc final public let color: UIKit.UIColor
  @objc final public let colorName: Swift.String
  @objc convenience public init(color: UIKit.UIColor, colorName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPipette) open class PipettableColor : ImglyKit.Color {
  @objc public init(color: UIKit.UIColor = UIColor.clear, colorName: Swift.String)
  @objc deinit
}
@objc(PESDKColorCollectionViewDelegate) public protocol ColorCollectionViewDelegate {
  @objc func colorCollectionView(_ colorCollectionView: ImglyKit.ColorCollectionView, didSelectColor color: ImglyKit.Color)
}
@objcMembers @objc(PESDKColorCollectionView) open class ColorCollectionView : UIKit.UIView {
  @objc open var colorPalette: ImglyKit.ColorPalette
  @objc weak open var delegate: ImglyKit.ColorCollectionViewDelegate?
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc open var selectedColor: ImglyKit.Color? {
    @objc get
  }
  @objc convenience dynamic public init()
  @objc public init(colorPalette: ImglyKit.ColorPalette)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open func selectColor(atIndex index: Swift.Int, animated: Swift.Bool)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension ColorCollectionView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension ColorCollectionView : UIKit.UICollectionViewDataSource {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKColorCollectionViewCell) open class ColorCollectionViewCell : UIKit.UICollectionViewCell {
  @objc open var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public let colorView: UIKit.UIView
  @objc final public let iconView: UIKit.UIImageView
  @objc final public let imageView: UIKit.UIImageView
  @objc dynamic open var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKColorListSectionController) open class ColorListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
public struct ColorMatrix {
  public var data: [CoreGraphics.CGFloat] {
    get
  }
  public init()
  public init(data: [CoreGraphics.CGFloat])
  public init(exposure: CoreGraphics.CGFloat)
  public init(contrast: CoreGraphics.CGFloat)
  public init(saturation: CoreGraphics.CGFloat)
  public init(brightness: CoreGraphics.CGFloat)
  public mutating func concatenate(_ matrix: ImglyKit.ColorMatrix)
  public func concatenating(_ matrix: ImglyKit.ColorMatrix) -> ImglyKit.ColorMatrix
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorMenuItem) open class ColorMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let color: UIKit.UIColor
  @objc final public let colorName: Swift.String
  @objc convenience public init(color: UIKit.UIColor, colorName: Swift.String)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPipetteMenuItem) open class ColorPipetteMenuItem : ImglyKit.ColorMenuItem {
  public var normalizedPosition: CoreGraphics.CGPoint?
  @objc deinit
}
@objcMembers @objc(PESDKColorPalette) open class ColorPalette : ObjectiveC.NSObject {
  @objc final public let colors: [ImglyKit.Color]
  @objc public init(colors: [ImglyKit.Color])
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPickerView) open class ColorPickerView : UIKit.UIControl {
  @objc public var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
open class ColorPickerViewController<SpriteModelType, GestureController, SelectionView> : ImglyKit.ViewController, ImglyKit.ProxyZoomControllerDelegate, ImglyKit.ColorPipetteViewDelegate where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView {
  weak open var delegate: ImglyKit.ColorPickerViewControllerDelegate?
  @objc open var colorPipetteView: ImglyKit.ColorPipetteView {
    @objc get
  }
  @objc open var colorPickerView: ImglyKit.ColorPickerView {
    @objc get
  }
  @objc open var containerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  final public let spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?
  @objc open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc required convenience dynamic public init()
  required public init(spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc open var isColorPipetteVisible: Swift.Bool {
    get
  }
  open func toggleColorPipette(at normalizedPosition: CoreGraphics.CGPoint? = nil)
  open func showColorPipette(at normalizedPosition: CoreGraphics.CGPoint? = nil)
  @objc open func hideColorPipette()
  @objc open var isColorPickerVisible: Swift.Bool {
    get
  }
  @objc open func toggleColorPicker()
  @objc open func showColorPicker()
  @objc open func hideColorPicker()
  @objc public func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc public func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc public func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc public func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc public func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @objc public func colorPipetteView(_ colorPipetteView: ImglyKit.ColorPipetteView, didPick newColor: Swift.Bool, _ color: UIKit.UIColor, at normalizedPosition: CoreGraphics.CGPoint)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension ColorPickerViewController : ImglyKit.SpriteEditControllerDelegate {
}
public protocol ColorPickerViewControllerDelegate : AnyObject {
  func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor, at normalizedPosition: CoreGraphics.CGPoint) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  func colorPickerViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerPreviewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.MediaEditPreviewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func colorPickerViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
}
@objc(PESDKColorPipetteViewDelegate) public protocol ColorPipetteViewDelegate : AnyObject {
  @objc func colorPipetteView(_ colorPipetteView: ImglyKit.ColorPipetteView, didPick newColor: Swift.Bool, _ color: UIKit.UIColor, at normalizedPosition: CoreGraphics.CGPoint)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKColorPipetteView) open class ColorPipetteView : UIKit.UIView {
  @objc weak open var delegate: ImglyKit.ColorPipetteViewDelegate?
  public var normalizedPosition: CoreGraphics.CGPoint? {
    get
    set
  }
  public var position: CoreGraphics.CGPoint? {
    get
    set
  }
  @objc public var magnificationScale: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var overlayView: ImglyKit.ColorPipetteOverlayView {
    @objc get
  }
  @objc open var magnificationView: UIKit.UIView {
    @objc get
  }
  @objc public var previewController: ImglyKit.MediaEditPreviewController? {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func setNeedsDisplay()
  @objc deinit
}
extension ColorPipetteView : GLKit.GLKViewDelegate {
  @objc dynamic open func glkView(_ view: GLKit.GLKView, drawIn rect: CoreGraphics.CGRect)
}
extension ColorPipetteView : MetalKit.MTKViewDelegate {
  @objc dynamic public func draw(in view: MetalKit.MTKView)
  @objc dynamic public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreGraphics.CGSize)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKColorPipetteOverlayView) open class ColorPipetteOverlayView : UIKit.UIView {
  @objc public var pickedColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TextColorToolController {
  @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
extension StickerColorToolController {
  @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
extension BrushColorToolController {
  @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
open class ColorToolController<SpriteModelType, GestureController, SelectionView> : ImglyKit.MenuToolController, ImglyKit.BrandedTool where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView {
  final public let colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor, at normalizedPosition: CoreGraphics.CGPoint) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  public func colorPickerViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func colorPickerViewControllerPreviewController<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.MediaEditPreviewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func colorPickerViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func colorPickerViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func colorPickerViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension ColorToolController : ImglyKit.ColorPickerViewControllerDelegate {
}
extension ColorToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objcMembers @objc(PESDKColorToolControllerOptions) open class ColorToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let availableColors: [ImglyKit.Color]
  @objc final public let colorActionButtonConfigurationClosure: ((ImglyKit.ColorCollectionViewCell, UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc final public let colorActionSelectedClosure: ((UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.ColorToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKColorToolControllerOptionsBuilder) open class ColorToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var availableColors: [ImglyKit.Color]
  @objc open var colorActionButtonConfigurationClosure: ((ImglyKit.ColorCollectionViewCell, UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc open var colorActionSelectedClosure: ((UIKit.UIColor, Swift.String) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.ColorToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKColorizeFilter) open class ColorizeFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputColor: UIKit.UIColor?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct CompositeTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(transitionAnimators: [ImglyKit.TransitionAnimator])
  public init(_ transitionAnimators: ImglyKit.TransitionAnimator...)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func finishPresentationAnimation()
  public func prepareDismissalAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
@_inheritsConvenienceInitializers @objc(PESDKCompositionActionFooterView) open class CompositionActionFooterView : UIKit.UICollectionViewCell {
  final public let label: ImglyKit.SubtleLabel
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func updateConstraints()
  @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKCompositionActionListSectionController) open class CompositionActionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc override open var supportedElementKinds: [Swift.String] {
    @objc get
  }
  @objc override open func viewForSupplementaryElement(ofKind elementKind: Swift.String, at index: Swift.Int) -> UIKit.UICollectionReusableView
  @objc override open func sizeForSupplementaryView(ofKind elementKind: Swift.String, at index: Swift.Int) -> CoreGraphics.CGSize
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCompositionActionMenuItem) open class CompositionActionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let title: Swift.String?
  @objc final public let icon: UIKit.UIImage
  final public let actionClosure: (inout ImglyKit.PhotoEditModel) -> Swift.Void
  @objc final public let supplementaryText: Swift.String?
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKCompositionEditController) open class CompositionEditController : ImglyKit.ViewController {
  @objc open var proxyZoomController: ImglyKit.ProxyZoomController {
    @objc get
  }
  @objc open var trimViewContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var trimView: ImglyKit.VideoTrimView {
    @objc get
  }
  @objc open var trimViewHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc weak open var delegate: ImglyKit.CompositionEditControllerDelegate?
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc required dynamic public init()
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func updateViewConstraints()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension CompositionEditController : ImglyKit.PhotoEditModelSettable {
}
extension CompositionEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
extension CompositionEditController : ImglyKit.VideoTrimViewDelegate {
  @objc dynamic public func videoTrimViewDidStartDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimView(_ videoTrimView: ImglyKit.VideoTrimView, didDragScrubberTo time: CoreMedia.CMTime)
  @objc dynamic public func videoTrimViewDidStopDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidStartDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
}
extension CompositionEditController : ImglyKit.ProxyZoomControllerDelegate {
  @objc dynamic open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc dynamic open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@objc(PESDKCompositionEditControllerDelegate) public protocol CompositionEditControllerDelegate : AnyObject {
  @objc func compositionEditControllerPreviewController(_ compositionEditController: ImglyKit.CompositionEditController) -> ImglyKit.VideoEditPreviewController?
  @objc func compositionEditControllerDidChangePhotoEditModel(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc func compositionEditControllerDidStartDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc func compositionEditControllerDidStopDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc func compositionEditControllerTargetScrollView(_ compositionEditController: ImglyKit.CompositionEditController) -> UIKit.UIScrollView?
}
@_inheritsConvenienceInitializers @objc(PESDKCompositionListSectionController) open class CompositionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc override open func canMoveItem(at index: Swift.Int) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCompositionMenuItem) open class CompositionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public struct CompositionModel : Swift.Equatable {
  public var clips: [ImglyKit.VideoClipModel]
  public func clipModel(with uuid: Foundation.UUID) -> (Swift.Int, ImglyKit.VideoClipModel)?
  public init()
  public init(clips: [ImglyKit.VideoClipModel])
  public static func == (a: ImglyKit.CompositionModel, b: ImglyKit.CompositionModel) -> Swift.Bool
}
extension CompositionModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKCompositionToolController) open class CompositionToolController : ImglyKit.MenuToolController, ImglyKit.CompositionEditControllerDelegate, ImglyKit.BrandedTool {
  @objc final public let compositionEditController: ImglyKit.CompositionEditController
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(compositionEditController: ImglyKit.CompositionEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: ImglyKit.MenuItem, from previousMenuItems: [ImglyKit.MenuItem], to menuItems: [ImglyKit.MenuItem])
  @objc public func compositionEditControllerPreviewController(_ compositionEditController: ImglyKit.CompositionEditController) -> ImglyKit.VideoEditPreviewController?
  @objc public func compositionEditControllerDidChangePhotoEditModel(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc public func compositionEditControllerDidStartDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc public func compositionEditControllerDidStopDragging(_ compositionEditController: ImglyKit.CompositionEditController)
  @objc public func compositionEditControllerTargetScrollView(_ compositionEditController: ImglyKit.CompositionEditController) -> UIKit.UIScrollView?
  @objc open var playPauseButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension CompositionToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
extension CompositionToolController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, targetIndexPathForMoveFromItemAt originalIndexPath: Foundation.IndexPath, toProposedIndexPath proposedIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
}
extension CompositionToolController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@available(iOS 14, *)
extension CompositionToolController : PhotosUI.PHPickerViewControllerDelegate {
  public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
extension CompositionToolController : ImglyKit.VideoClipToolControllerDelegate {
  @objc dynamic public func videoClipToolController(_ videoClipToolController: ImglyKit.VideoClipToolController, didSelect videos: [ImglyKit.VideoClip])
}
@objc public enum CompositionOverlayAction : Swift.Int {
  case playPause
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKVideoClipLibraryMode) public enum VideoClipLibraryMode : Swift.Int {
  case personal
  case predefined
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKCompositionToolControllerOptions) open class CompositionToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  final public let allowedCompositionOverlayActions: [ImglyKit.CompositionOverlayAction]
  @objc final public let compositionOverlayActionSelectedClosure: ((ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  @objc final public let compositionTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc @available(*, deprecated, renamed: "videoClipLibraryMode", message: "Use `videoClipLibraryMode = .personal` instead.")
  public var personalVideoClipsEnabled: Swift.Bool {
    @objc get
  }
  @objc final public let videoClipLibraryMode: ImglyKit.VideoClipLibraryMode
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.CompositionToolControllerOptionsBuilder)
  @objc deinit
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
}
@objcMembers @objc(PESDKCompositionToolControllerOptionsBuilder) open class CompositionToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  open var allowedCompositionOverlayActions: [ImglyKit.CompositionOverlayAction]
  @objc open var compositionOverlayActionSelectedClosure: ((ImglyKit.CompositionOverlayAction) -> Swift.Void)?
  @objc open var compositionTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc @available(*, deprecated, renamed: "videoClipLibraryMode", message: "Use `videoClipLibraryMode = .personal` instead.")
  open var personalVideoClipsEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var videoClipLibraryMode: ImglyKit.VideoClipLibraryMode
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.CompositionToolControllerOptions)
  @objc deinit
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
}
extension Configuration {
  @objc dynamic public var photoEditViewControllerOptions: ImglyKit.PhotoEditViewControllerOptions {
    @objc get
  }
}
extension ConfigurationBuilder {
  @objc dynamic open func configurePhotoEditViewController(_ builder: (ImglyKit.PhotoEditViewControllerOptionsBuilder) -> Swift.Void)
}
extension Configuration {
  @objc dynamic public var videoEditViewControllerOptions: ImglyKit.VideoEditViewControllerOptions {
    @objc get
  }
  @objc dynamic public var trimToolControllerOptions: ImglyKit.TrimToolControllerOptions {
    @objc get
  }
  @objc dynamic public var compositionToolControllerOptions: ImglyKit.CompositionToolControllerOptions {
    @objc get
  }
  @objc dynamic public var clipTrimToolControllerOptions: ImglyKit.ClipTrimToolControllerOptions {
    @objc get
  }
  @objc dynamic public var videoClipToolControllerOptions: ImglyKit.VideoClipToolControllerOptions {
    @objc get
  }
  @objc dynamic public var audioClipToolControllerOptions: ImglyKit.AudioClipToolControllerOptions {
    @objc get
  }
  @objc dynamic public var audioToolControllerOptions: ImglyKit.AudioToolControllerOptions {
    @objc get
  }
}
extension ConfigurationBuilder {
  @objc dynamic open func configureTrimToolController(_ builder: (ImglyKit.TrimToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureCompositionToolController(_ builder: (ImglyKit.CompositionToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureVideoClipToolController(_ builder: (ImglyKit.VideoClipToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureClipTrimToolController(_ builder: (ImglyKit.ClipTrimToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureAudioToolController(_ builder: (ImglyKit.AudioToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureAudioClipToolController(_ builder: (ImglyKit.AudioClipToolControllerOptionsBuilder) -> Swift.Void)
  @objc dynamic open func configureVideoEditViewController(_ builder: (ImglyKit.VideoEditViewControllerOptionsBuilder) -> Swift.Void)
}
public typealias ButtonConfigurationClosure = (ImglyKit.Button) -> Swift.Void
public typealias ViewConfigurationClosure = (UIKit.UIView) -> Swift.Void
public typealias DidEnterToolClosure = () -> Swift.Void
public typealias WillLeaveToolClosure = () -> Swift.Void
public typealias ToolbarItemClosure = (ImglyKit.ToolbarItem) -> Swift.Void
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKConfiguration) open class Configuration : ObjectiveC.NSObject {
  final public let theme: ImglyKit.Theme
  final public let appearanceProxyConfigurationClosure: ((ImglyKit.Theme) -> Swift.Void)?
  @objc final public let assetCatalog: ImglyKit.AssetCatalog
  @objc public var cameraViewControllerOptions: ImglyKit.CameraViewControllerOptions {
    @objc get
  }
  @objc public var filterToolControllerOptions: ImglyKit.FilterToolControllerOptions {
    @objc get
  }
  @objc public var overlayToolControllerOptions: ImglyKit.OverlayToolControllerOptions {
    @objc get
  }
  @objc public var stickerToolControllerOptions: ImglyKit.StickerToolControllerOptions {
    @objc get
  }
  @objc public var stickerOptionsToolControllerOptions: ImglyKit.StickerOptionsToolControllerOptions {
    @objc get
  }
  @objc public var stickerColorToolControllerOptions: ImglyKit.ColorToolControllerOptions {
    @objc get
  }
  @objc public var transformToolControllerOptions: ImglyKit.TransformToolControllerOptions {
    @objc get
  }
  @objc public var focusToolControllerOptions: ImglyKit.FocusToolControllerOptions {
    @objc get
  }
  @objc public var textToolControllerOptions: ImglyKit.TextToolControllerOptions {
    @objc get
  }
  @objc public var textOptionsToolControllerOptions: ImglyKit.TextOptionsToolControllerOptions {
    @objc get
  }
  @objc public var textFontToolControllerOptions: ImglyKit.TextFontToolControllerOptions {
    @objc get
  }
  @objc public var textColorToolControllerOptions: ImglyKit.TextColorToolControllerOptions {
    @objc get
  }
  @objc public var adjustToolControllerOptions: ImglyKit.AdjustToolControllerOptions {
    @objc get
  }
  @objc public var brushToolControllerOptions: ImglyKit.BrushToolControllerOptions {
    @objc get
  }
  @objc public var brushColorToolControllerOptions: ImglyKit.BrushColorToolControllerOptions {
    @objc get
  }
  @objc public var frameToolControllerOptions: ImglyKit.FrameToolControllerOptions {
    @objc get
  }
  @objc public var frameOptionsToolControllerOptions: ImglyKit.FrameOptionsToolControllerOptions {
    @objc get
  }
  @objc public var textDesignToolControllerOptions: ImglyKit.TextDesignToolControllerOptions {
    @objc get
  }
  @objc public var textDesignOptionsToolControllerOptions: ImglyKit.TextDesignOptionsToolControllerOptions {
    @objc get
  }
  @objc public var snappingOptions: ImglyKit.SnappingOptions {
    @objc get
  }
  public func getOptions<T>() -> T? where T : AnyObject
  @objc convenience override dynamic public init()
  @objc public init(builder: (ImglyKit.ConfigurationBuilder) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKConfigurationBuilder) open class ConfigurationBuilder : ObjectiveC.NSObject {
  open var theme: ImglyKit.Theme {
    get
    set
  }
  @objc(theme) open var _objCTheme: ImglyKit._ObjCTheme
  open var appearanceProxyConfigurationClosure: ((ImglyKit.Theme) -> Swift.Void)?
  @objc(appearanceProxyConfigurationClosure) open var _objCAppearanceProxyConfigurationClosure: ((ImglyKit._ObjCTheme) -> Swift.Void)?
  @objc open var assetCatalog: ImglyKit.AssetCatalog
  public func getOptions<T>() -> T? where T : AnyObject
  @objc public func addOptions(_ options: Swift.AnyObject)
  @objc open func configureCameraViewController(_ builder: (ImglyKit.CameraViewControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFilterToolController(_ builder: (ImglyKit.FilterToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureOverlayToolController(_ builder: (ImglyKit.OverlayToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureStickerToolController(_ builder: (ImglyKit.StickerToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureStickerOptionsToolController(_ builder: (ImglyKit.StickerOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureStickerColorToolController(_ builder: (ImglyKit.ColorToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFocusToolController(_ builder: (ImglyKit.FocusToolControllerOptionsBuilder) -> Swift.Void)
  @objc @available(*, deprecated, renamed: "configureTransformToolController")
  open func transformToolControllerOptions(_ builder: (ImglyKit.TransformToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextToolController(_ builder: (ImglyKit.TextToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextOptionsToolController(_ builder: (ImglyKit.TextOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextFontToolController(_ builder: (ImglyKit.TextFontToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextColorToolController(_ builder: (ImglyKit.TextColorToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureAdjustToolController(_ builder: (ImglyKit.AdjustToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureBrushToolController(_ builder: (ImglyKit.BrushToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureBrushColorToolController(_ builder: (ImglyKit.BrushColorToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTransformToolController(_ builder: (ImglyKit.TransformToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFrameToolController(_ builder: (ImglyKit.FrameToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureFrameOptionsToolController(_ builder: (ImglyKit.FrameOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextDesignToolController(_ builder: (ImglyKit.TextDesignToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureTextDesignOptionsToolController(_ builder: (ImglyKit.TextDesignOptionsToolControllerOptionsBuilder) -> Swift.Void)
  @objc open func configureSnapping(_ builder: (ImglyKit.SnappingOptionsBuilder) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
extension ConfigurationBuilder {
  @objc(configureFromDictionary:error:) dynamic public func configure(from dictionary: [Swift.String : Any]) throws
  @objc(configureFromData:error:) dynamic public func configure(from data: Foundation.Data) throws
}
@objc(PESDKConfigurationSerializationConfiguration) public class ConfigurationSerializationConfiguration : ObjectiveC.NSObject, Swift.Codable {
  final public let export: ImglyKit.ConfigurationSerializationExport?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ConfigurationSerializationExport : Swift.Codable {
  public let filename: Swift.String?
  public let force: Swift.Bool?
  public let image: ImglyKit.ConfigurationSerializationImage?
  public let video: ImglyKit.ConfigurationSerializationVideo?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ConfigurationSerializationImage : Swift.Codable {
  public let format: ImglyKit.ConfigurationSerializationImageFormat?
  public let quality: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ConfigurationSerializationImageFormat : Swift.String, Swift.Codable {
  case imageHeif
  case imageJPEG
  case imagePNG
  case imageTiff
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct ConfigurationSerializationVideo : Swift.Codable {
  public let bitRate: Swift.Double?
  public let codec: ImglyKit.ConfigurationSerializationVideoCodec?
  public let format: ImglyKit.ConfigurationSerializationVideoFormat?
  public let quality: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ConfigurationSerializationVideoCodec : Swift.String, Swift.Codable {
  case h264
  case hevc
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigurationSerializationVideoFormat : Swift.String, Swift.Codable {
  case videoMp4
  case videoQuicktime
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objcMembers @objc(PESDKCoreImageEffect) open class CoreImageEffect : ImglyKit.Effect {
  @objc final public let ciFilterName: Swift.String?
  @objc final public let options: [Swift.String : Swift.AnyObject]?
  @objc public init(identifier: Swift.String, ciFilterName filterName: Swift.String?, displayName: Swift.String, options: [Swift.String : Swift.AnyObject]?)
  @objc override open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc deinit
  @objc override public init(identifier: Swift.String, displayName: Swift.String)
  @objc override dynamic public init()
}
@objc(PESDKCropAndStraightenViewDelegate) public protocol CropAndStraightenViewDelegate : AnyObject {
  @objc func cropAndStraightenViewWillBeginTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @objc func cropAndStraightenViewDidEndTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @objc func cropAndStraightenViewDidTrack(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropAndStraightenView) open class CropAndStraightenView : UIKit.UIView {
  @objc open var spriteContainerView: ImglyKit.SpriteContainerView? {
    @objc get
    @objc set
  }
  @objc weak open var delegate: ImglyKit.CropAndStraightenViewDelegate?
  @objc open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc open var straightenAngle: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var cropRect: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc open var orientation: ImglyKit.Orientation {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc open var imageCropRect: CoreGraphics.CGRect {
    @objc get
  }
  @objc open func imageCropRect(forViewRect viewRect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc open func fitImageRegion(_ imageRegion: CoreGraphics.CGRect, inCropRectAnimated animated: Swift.Bool)
  @objc open var isTracking: Swift.Bool {
    @objc get
  }
  @objc open var isDecelerating: Swift.Bool {
    @objc get
  }
  @objc open var canvasFrame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc deinit
}
extension CropAndStraightenView : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
extension CropAndStraightenView : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension CropAndStraightenView : GLKit.GLKViewDelegate {
  @objc dynamic open func glkView(_ view: GLKit.GLKView, drawIn rect: CoreGraphics.CGRect)
}
extension CropAndStraightenView : MetalKit.MTKViewDelegate {
  @objc dynamic public func draw(in view: MetalKit.MTKView)
  @objc dynamic public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreGraphics.CGSize)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropAspect) open class CropAspect : ObjectiveC.NSObject {
  @objc convenience override dynamic public init()
  @objc convenience public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  @objc convenience public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, rotatable: Swift.Bool)
  @objc convenience public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, localizedName: Swift.String)
  @objc public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, localizedName: Swift.String, rotatable: Swift.Bool)
  @objc final public let width: CoreGraphics.CGFloat
  @objc final public let height: CoreGraphics.CGFloat
  @objc final public let localizedName: Swift.String
  @objc final public let isRotatable: Swift.Bool
  @objc open var ratio: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open func width(forHeight height: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc open func height(forWidth width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc open var inversed: ImglyKit.CropAspect {
    @objc get
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public func == (lhs: ImglyKit.CropAspect, rhs: ImglyKit.CropAspect) -> Swift.Bool
@_inheritsConvenienceInitializers @objc(PESDKCropAspectListSectionController) open class CropAspectListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func selectItem(at index: Swift.Int)
  @objc override open func deselectItem(at index: Swift.Int)
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCropAspectMenuItem) open class CropAspectMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let cropAspect: ImglyKit.CropAspect?
  @objc final public let title: Swift.String
  @objc final public let rotatable: Swift.Bool
  @objc final public let resetsTransform: Swift.Bool
  @objc public init(cropAspect: ImglyKit.CropAspect)
  @objc convenience public init(title: Swift.String)
  @objc public static var resetItem: ImglyKit.CropAspectMenuItem {
    @objc get
  }
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum CropHandle {
  case top
  case left
  case right
  case bottom
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public var opposite: ImglyKit.CropHandle {
    get
  }
  public var isTop: Swift.Bool {
    get
  }
  public var isBottom: Swift.Bool {
    get
  }
  public var isLeft: Swift.Bool {
    get
  }
  public var isRight: Swift.Bool {
    get
  }
  public var isLateral: Swift.Bool {
    get
  }
  public var isCorner: Swift.Bool {
    get
  }
  public var adjacent: (ImglyKit.CropHandle, ImglyKit.CropHandle) {
    get
  }
  public static var allHandles: [ImglyKit.CropHandle] {
    get
  }
  public static func == (a: ImglyKit.CropHandle, b: ImglyKit.CropHandle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropHandleView) open class CropHandleView : UIKit.UIView {
  @objc open var isTop: Swift.Bool {
    @objc get
  }
  @objc open var isLeft: Swift.Bool {
    @objc get
  }
  @objc open var isRight: Swift.Bool {
    @objc get
  }
  @objc open var isBottom: Swift.Bool {
    @objc get
  }
  @objc open var isCorner: Swift.Bool {
    @objc get
  }
  @objc open var isLateral: Swift.Bool {
    @objc get
  }
  open var oppositeHandle: ImglyKit.CropHandle {
    get
  }
  open var adjacentHandles: (ImglyKit.CropHandle, ImglyKit.CropHandle) {
    get
  }
  final public let handle: ImglyKit.CropHandle
  @objc open var isLineWeightHeavy: Swift.Bool {
    @objc get
    @objc set
  }
  public init(for handle: ImglyKit.CropHandle)
  @objc convenience override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropMaskView) open class CropMaskView : UIKit.UIView {
  @objc final public let effectView: UIKit.UIVisualEffectView
  @objc dynamic public var effect: UIKit.UIVisualEffect? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCropOverlayView) open class CropOverlayView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open var isMaskedContentVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open func setMaskedContentVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  @objc open var cropRect: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc open var isCropGridVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open func setCropGridVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  @objc open var isStraightenGridVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open func setStraightenGridVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCustomAdjustmentsFilter) open class CustomAdjustmentsFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputBrightness: Foundation.NSNumber?
  @objc open var inputContrast: Foundation.NSNumber?
  @objc open var inputSaturation: Foundation.NSNumber?
  @objc open var inputShadows: Foundation.NSNumber?
  @objc open var inputHighlights: Foundation.NSNumber?
  @objc open var inputExposure: Foundation.NSNumber?
  @objc open var inputGamma: Foundation.NSNumber?
  @objc open var inputBlacks: Foundation.NSNumber?
  @objc open var inputWhites: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKCustomPatchConfiguration) open class CustomPatchConfiguration : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var topImageGroup: ImglyKit.FrameImageGroup?
  @objc public var leftImageGroup: ImglyKit.FrameImageGroup?
  @objc public var bottomImageGroup: ImglyKit.FrameImageGroup?
  @objc public var rightImageGroup: ImglyKit.FrameImageGroup?
  @objc public var layoutMode: ImglyKit.FrameLayoutMode
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKCustomPatchFrameBuilder) open class CustomPatchFrameBuilder : ObjectiveC.NSObject, ImglyKit.FrameBuilder {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public init(configuration: ImglyKit.CustomPatchConfiguration)
  @objc public func build(size: CoreGraphics.CGSize, relativeScale: CoreGraphics.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultDynamicFrames) open class DefaultDynamicFrames : ObjectiveC.NSObject {
  @objc public static var artDecorFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc public static var woodPassepartoutFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc public static var blackPassepartoutFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc public static var diaFrameBuilder: ImglyKit.CustomPatchFrameBuilder {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultLogger) public class DefaultLogger : ObjectiveC.NSObject, ImglyKit.LoggerProtocol {
  @objc public func error(_ message: Swift.String)
  @objc public func warn(_ message: Swift.String)
  @objc public func info(_ message: Swift.String)
  @objc public func debug(_ message: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultProgressView) open class DefaultProgressView : ObjectiveC.NSObject, ImglyKit.ProgressView {
  @objc final public let overlayView: UIKit.UIView
  @objc final public let backgroundView: UIKit.UIView
  @objc final public let imageView: UIKit.UIImageView
  @objc final public let label: UIKit.UILabel
  @objc open var animationDuration: Swift.Double
  @objc public static let sharedView: ImglyKit.DefaultProgressView
  @objc override dynamic public init()
  @objc open func show(withMessage message: Swift.String)
  @objc open func hide()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDeserializer) public class Deserializer : ObjectiveC.NSObject {
  @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKDeserializationResult) public class DeserializationResult : ObjectiveC.NSObject {
    final public let model: ImglyKit.PhotoEditModel?
    @objc final public let photo: ImglyKit.PhotoRepresentation?
    @objc deinit
    @objc override dynamic public init()
  }
  public static func deserialize(data: Foundation.Data, imageDimensions: CoreGraphics.CGSize?, existingModel: ImglyKit.PhotoEditModel? = nil, assetCatalog: ImglyKit.AssetCatalog = .shared) -> ImglyKit.Deserializer.DeserializationResult
  @objc deinit
  @objc override dynamic public init()
}
extension Deserializer.DeserializationResult {
  @objc(model) dynamic public var _objCModel: ImglyKit._ObjCPhotoEditModel? {
    @objc get
  }
}
extension Deserializer {
  @objc(deserializeWithData:) public static func _objCDeserialize(data: Foundation.Data) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:assetCatalog:) public static func _objCDeserialize(data: Foundation.Data, assetCatalog: ImglyKit.AssetCatalog) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:imageDimensions:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreGraphics.CGSize) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:imageDimensions:assetCatalog:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreGraphics.CGSize, assetCatalog: ImglyKit.AssetCatalog) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:imageDimensions:existingModel:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreGraphics.CGSize, existingModel: ImglyKit._ObjCPhotoEditModel) -> ImglyKit.Deserializer.DeserializationResult
  @objc(deserializeWithData:imageDimensions:existingModel:assetCatalog:) public static func _objCDeserialize(data: Foundation.Data, imageDimensions: CoreGraphics.CGSize, existingModel: ImglyKit._ObjCPhotoEditModel, assetCatalog: ImglyKit.AssetCatalog) -> ImglyKit.Deserializer.DeserializationResult
}
@objc public enum RecordingOrientation : Swift.Int {
  case portrait
  case portraitBottomUp
  case landscapeBottomLeft
  case landscapeBottomRight
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDeviceOrientationController) open class DeviceOrientationController : ObjectiveC.NSObject {
  open var captureVideoOrientation: AVFoundation.AVCaptureVideoOrientation? {
    get
  }
  @objc open func start()
  @objc open func stop()
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKDiffable) public protocol Diffable : AnyObject {
  @objc var diffIdentifier: ObjectiveC.NSObjectProtocol { get }
  @objc func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDimmedLabel) open class DimmedLabel : ImglyKit.Label {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDimmingView) open class DimmingView : UIKit.UIView {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objcMembers @objc(PESDKDuoToneEffect) open class DuoToneEffect : ImglyKit.Effect {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let lightColor: UIKit.UIColor?
  @objc final public let darkColor: UIKit.UIColor?
  @objc public init(identifier: Swift.String, lightColor: UIKit.UIColor?, darkColor: UIKit.UIColor?, displayName: Swift.String)
  @objc override open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc override public init(identifier: Swift.String, displayName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDuoToneFilter) open class DuoToneFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc open var inputLightColor: UIKit.UIColor?
  @objc open var inputDarkColor: UIKit.UIColor?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class EditController {
  public static let shared: ImglyKit.EditController
  final public func increaseEditCount(for product: ImglyKit.LicenseProduct)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKEffect) open class Effect : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let identifier: Swift.String
  @objc final public let displayName: Swift.String
  @objc open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc public init(identifier: Swift.String, displayName: Swift.String)
  @objc override dynamic public init()
  @objc public class var defaultItems: [ImglyKit.Effect] {
    @objc get
  }
  @objc public static var all: [ImglyKit.Effect] {
    @objc get
    @objc set
  }
  @objc public static func effect(withIdentifier identifier: Swift.String) -> ImglyKit.Effect?
  @objc deinit
}
@objcMembers @objc(PESDKNoEffect) public class NoEffect : ImglyKit.Effect {
  @objc override dynamic public init()
  @objc override public init(identifier: Swift.String, displayName: Swift.String)
  @objc deinit
}
public struct EffectFilterModel : Swift.Equatable {
  public var identifier: Swift.String
  public var intensity: Swift.Double
  public init(identifier: Swift.String, intensity: Swift.Double)
  public init()
  public static func == (a: ImglyKit.EffectFilterModel, b: ImglyKit.EffectFilterModel) -> Swift.Bool
}
extension EffectFilterModel : ImglyKit.ObjectiveCBridgeable {
}
@_inheritsConvenienceInitializers @objc(PESDKEffectListSectionController) open class EffectListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@objcMembers @objc(PESDKEffectMenuItem) open class EffectMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let effect: ImglyKit.Effect
  @objc final public let thumbnail: UIKit.UIImage?
  @objc public init(effect: ImglyKit.Effect, thumbnail: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKEffectThumbnailRenderer) open class EffectThumbnailRenderer : ObjectiveC.NSObject {
  @objc final public let inputImage: UIKit.UIImage
  @objc public init(inputImage: UIKit.UIImage)
  @objc(generateThumbnailsForEffects:ofSize:singleCompletion:) open func generateThumbnails(for effects: [ImglyKit.Effect], of size: CoreGraphics.CGSize, singleCompletion: @escaping ((UIKit.UIImage, ImglyKit.Effect) -> Swift.Void))
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers open class WeakContainer<T> {
  open var value: T? {
    get
    set
  }
  @objc deinit
}
public protocol EventSubscribable : AnyObject {
  var subscribers: [ImglyKit.WeakContainer<ImglyKit.EventSubscriber>] { get set }
  func subscribe(_ subscriber: ImglyKit.EventSubscriber)
  func unsubscribe(_ subscriber: ImglyKit.EventSubscriber)
}
extension EventSubscribable {
  public func subscribe(_ subscriber: ImglyKit.EventSubscriber)
  public func unsubscribe(_ subscriber: ImglyKit.EventSubscriber)
  public func notifySubscribers(_ closure: (ImglyKit.EventSubscriber) -> Swift.Void)
}
public protocol EventSubscriber : AnyObject {
  func viewControllerDidFinish(_ viewController: UIKit.UIViewController)
  func viewControllerDidCancel(_ viewController: UIKit.UIViewController)
  func viewController(_ viewController: UIKit.UIViewController, didSelect menuItem: ImglyKit.MenuItem)
  func photoEditToolController(_ photoEditToolController: UIKit.UIViewController, wantsToPresent toolController: ImglyKit.PhotoEditToolController)
  func photoEditModelDidChange(_ photoEditModel: ImglyKit.PhotoEditModel)
  func registerUndoChange(from oldPhotoEditModel: ImglyKit.PhotoEditModel, to newPhotoEditModel: ImglyKit.PhotoEditModel)
  func userInterfaceStateDidChange(_ userInterfaceState: ImglyKit.UserInterfaceState)
}
public struct FadeCollectionViewTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(view: UIKit.UIView, collectionView: UIKit.UICollectionView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
public struct FadeTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(view: UIKit.UIView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
@objcMembers @objc(PESDKFilterEditController) open class FilterEditController : ImglyKit.ViewController {
  final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>
  @objc weak open var delegate: ImglyKit.FilterEditControllerDelegate?
  @objc open var effect: ImglyKit.Effect? {
    @objc get
    @objc set
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var showFilterIntensitySlider: Swift.Bool
  @objc open var initialFilterIntensity: CoreGraphics.CGFloat
  @objc required convenience dynamic public init()
  required public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc open func setEffect(_ effect: ImglyKit.Effect?, animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension FilterEditController : ImglyKit.PhotoEditModelSettable {
}
extension FilterEditController : ImglyKit.SliderEditControllerDelegate {
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension FilterEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
@objc(PESDKFilterEditControllerDelegate) public protocol FilterEditControllerDelegate : AnyObject {
  @objc func filterEditControllerTargetScrollView(_ filterEditController: ImglyKit.FilterEditController) -> UIKit.UIScrollView?
  @objc func filterEditControllerDidChangePhotoEditModel(_ filterEditController: ImglyKit.FilterEditController)
  @objc func filterEditController(_ filterEditController: ImglyKit.FilterEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFilterSelectionController) open class FilterSelectionController : ObjectiveC.NSObject {
  @objc final public let collectionView: UIKit.UICollectionView
  @objc open var selectedBlock: ((ImglyKit.Effect) -> Swift.Void)?
  @objc open var activeEffectBlock: (() -> (ImglyKit.Effect?))?
  @objc open var cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Effect) -> Swift.Void)?
  @objc convenience override dynamic public init()
  @objc convenience public init(inputImage: UIKit.UIImage?)
  @objc public init(inputImage: UIKit.UIImage?, cellClass: ImglyKit.MenuCollectionViewCell.Type)
  @objc open func updateSelection(animated: Swift.Bool)
  @objc deinit
}
extension FilterSelectionController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension FilterSelectionController : UIKit.UICollectionViewDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension FilterSelectionController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
@objcMembers @objc(PESDKFilterToolController) open class FilterToolController : ImglyKit.MenuToolController, ImglyKit.FilterEditControllerDelegate, ImglyKit.BrandedTool {
  @objc final public let filterEditController: ImglyKit.FilterEditController
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(filterEditController: ImglyKit.FilterEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc open func filterEditControllerDidChangePhotoEditModel(_ filterEditController: ImglyKit.FilterEditController)
  @objc open func filterEditControllerTargetScrollView(_ filterEditController: ImglyKit.FilterEditController) -> UIKit.UIScrollView?
  @objc open func filterEditController(_ filterEditController: ImglyKit.FilterEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension FilterToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objcMembers @objc(PESDKFilterToolControllerOptions) open class FilterToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let filterIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let showFilterIntensitySlider: Swift.Bool
  @objc final public let initialFilterIntensity: CoreGraphics.CGFloat
  @objc final public let filterSelectedClosure: ((ImglyKit.Effect) -> Swift.Void)?
  @objc final public let filterIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Effect) -> Swift.Void)?
  @objc final public let filterCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Effect) -> Swift.Void)?
  @objc final public let folderCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell) -> Swift.Void)?
  @objc final public let filterGroups: [ImglyKit.Group]
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FilterToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKFilterToolControllerOptionsBuilder) open class FilterToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var filterIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var filterIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var showFilterIntensitySlider: Swift.Bool
  @objc open var initialFilterIntensity: CoreGraphics.CGFloat
  @objc open var filterSelectedClosure: ((ImglyKit.Effect) -> Swift.Void)?
  @objc open var filterIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Effect) -> Swift.Void)?
  @objc open var filterCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Effect) -> Swift.Void)?
  @objc open var folderCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell) -> Swift.Void)?
  @objc open var filterGroups: [ImglyKit.Group]
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.FilterToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
public struct FittedLayout<View> : ImglyKit.Layout where View : UIKit.UIView {
  public let view: View
  public init(view: View)
  public func constraints(in view: UIKit.UIView, with insets: UIKit.UIEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
}
public enum FloatValue : Swift.Equatable {
  case relative(CoreGraphics.CGFloat)
  case absolute(CoreGraphics.CGFloat)
  public static func == (a: ImglyKit.FloatValue, b: ImglyKit.FloatValue) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFloatValue) final public class _ObjCFloatValue : ObjectiveC.NSObject {
  final public let relativeValue: CoreGraphics.CGFloat?
  final public let absoluteValue: CoreGraphics.CGFloat?
  @objc public init(relativeValue: CoreGraphics.CGFloat)
  @objc public init(absoluteValue: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKFocusEditController) open class FocusEditController : ImglyKit.ViewController {
  final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?
  @objc open var boxGradientView: ImglyKit.BoxGradientView {
    @objc get
  }
  @objc open var circleGradientView: ImglyKit.CircleGradientView {
    @objc get
  }
  @objc open var linearGradientView: ImglyKit.LinearGradientView {
    @objc get
  }
  @objc open var focusMode: ImglyKit.FocusMode {
    @objc get
    @objc set
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc weak open var delegate: ImglyKit.FocusEditControllerDelegate?
  @objc required convenience dynamic public init()
  required public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc open func setFocusMode(_ focusMode: ImglyKit.FocusMode, animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension FocusEditController : ImglyKit.PhotoEditModelSettable {
}
extension FocusEditController : ImglyKit.SliderEditControllerDelegate {
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension FocusEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
@objc(PESDKFocusEditControllerDelegate) public protocol FocusEditControllerDelegate : AnyObject {
  @objc func focusEditControllerDidChangePhotoEditModel(_ focusEditController: ImglyKit.FocusEditController)
  @objc func focusEditControllerPreviewView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIView?
  @objc func focusEditControllerTargetScrollView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIScrollView?
  @objc func focusEditControllerUntransformedImageSize(_ focusEditController: ImglyKit.FocusEditController) -> CoreGraphics.CGSize
  @objc func focusEditController(_ focusEditController: ImglyKit.FocusEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFocusGradientView) open class FocusGradientView : UIKit.UIControl {
  @objc open var centerPoint: CoreGraphics.CGPoint {
    get
  }
  open var controlPoints: (CoreGraphics.CGPoint, CoreGraphics.CGPoint) {
    get
    set
  }
  @objc open var fadeWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var normalizedFadeWidth: CoreGraphics.CGFloat {
    @objc get
  }
  @objc dynamic open var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc dynamic open var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func accessibilityIncrement()
  @objc override dynamic open func accessibilityDecrement()
  @objc deinit
}
extension FocusGradientView : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(PESDKFocusListSectionController) open class FocusListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFocusMenuItem) open class FocusMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let focusMode: ImglyKit.FocusMode
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init?(focusMode: ImglyKit.FocusMode)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc(PESDKFocusMode) public enum FocusMode : Swift.Int {
  case off
  case radial
  case mirrored
  case linear
  case gaussian
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
public struct FocusModel : Swift.Equatable {
  public var normalizedControlPoint1: CoreGraphics.CGPoint
  public var normalizedControlPoint2: CoreGraphics.CGPoint
  public var normalizedBlurRadius: Swift.Double
  public var normalizedFadeWidth: Swift.Double
  public var mode: ImglyKit.FocusMode
  public var blurQuality: ImglyKit.BlurQuality
  public init(normalizedControlPoint1: CoreGraphics.CGPoint, normalizedControlPoint2: CoreGraphics.CGPoint, normalizedBlurRadius: Swift.Double, normalizedFadeWidth: Swift.Double, mode: ImglyKit.FocusMode, blurQuality: ImglyKit.BlurQuality)
  public init()
  public static func == (a: ImglyKit.FocusModel, b: ImglyKit.FocusModel) -> Swift.Bool
}
extension FocusModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKFocusToolController) open class FocusToolController : ImglyKit.MenuToolController, ImglyKit.FocusEditControllerDelegate, ImglyKit.BrandedTool {
  @objc final public let focusEditController: ImglyKit.FocusEditController
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(focusEditController: ImglyKit.FocusEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc public func focusEditControllerDidChangePhotoEditModel(_ focusEditController: ImglyKit.FocusEditController)
  @objc public func focusEditControllerPreviewView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIView?
  @objc public func focusEditControllerPreviewContainer(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIView?
  @objc open func focusEditControllerDidSlide(_ focusEditController: ImglyKit.FocusEditController, toValue value: CoreGraphics.CGFloat)
  @objc public func focusEditControllerTargetScrollView(_ focusEditController: ImglyKit.FocusEditController) -> UIKit.UIScrollView?
  @objc public func focusEditControllerUntransformedImageSize(_ focusEditController: ImglyKit.FocusEditController) -> CoreGraphics.CGSize
  @objc public func focusEditController(_ focusEditController: ImglyKit.FocusEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension FocusToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objcMembers @objc(PESDKFocusToolControllerOptions) open class FocusToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedFocusModes: [ImglyKit.FocusMode]
  @objc final public let focusModeButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FocusMode) -> Swift.Void)?
  @objc final public let focusModeSelectedClosure: ((ImglyKit.FocusMode) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderUpdatedValueClosure: ((ImglyKit.Slider, ImglyKit.FocusMode) -> Swift.Void)?
  @objc final public let circleGradientViewConfigurationClosure: ((ImglyKit.CircleGradientView) -> Swift.Void)?
  @objc final public let boxGradientViewConfigurationClosure: ((ImglyKit.BoxGradientView) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FocusToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFocusToolControllerOptionsBuilder) open class FocusToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedFocusModes: [ImglyKit.FocusMode] {
    get
    set
  }
  @objc open var focusModeButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FocusMode) -> Swift.Void)?
  @objc open var focusModeSelectedClosure: ((ImglyKit.FocusMode) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderUpdatedValueClosure: ((ImglyKit.Slider, ImglyKit.FocusMode) -> Swift.Void)?
  @objc open var circleGradientViewConfigurationClosure: ((ImglyKit.CircleGradientView) -> Swift.Void)?
  @objc open var boxGradientViewConfigurationClosure: ((ImglyKit.BoxGradientView) -> Swift.Void)?
  @objc override dynamic public init()
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
extension FocusToolControllerOptionsBuilder {
  @objc(allowedFocusModes) dynamic open var _objCAllowedFocusModes: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(PESDKFolderListSectionController) open class FolderListSectionController : ImglyKit.MenuListSectionController {
  @objc override open var numberOfItems: Swift.Int {
    @objc get
  }
  @objc override open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didSelectItem(at index: Swift.Int)
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@objcMembers @objc(PESDKFolderMenuItem) open class FolderMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let thumbnail: UIKit.UIImage?
  @objc final public let accessibilityIdentifier: Swift.String?
  @objc final public let items: [ImglyKit.MenuItem]
  @objc public init(identifier: Swift.String, title: Swift.String, thumbnail: UIKit.UIImage?, accessibilityIdentifier: Swift.String?, items: [ImglyKit.MenuItem])
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKFont) open class Font : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let url: Foundation.URL?
  @objc final public let displayName: Swift.String
  @objc open var fontName: Swift.String
  @objc open var identifier: Swift.String
  @objc public init(url: Foundation.URL, displayName: Swift.String, fontName: Swift.String, identifier: Swift.String)
  @objc public init(displayName: Swift.String, fontName: Swift.String, identifier: Swift.String)
  public struct Identifiers {
    public static var openSansBold: Swift.String {
      get
    }
    public static var aleoBold: Swift.String {
      get
    }
    public static var amaticsc: Swift.String {
      get
    }
    public static var sancreek: Swift.String {
      get
    }
    public static var kumarOneOutline: Swift.String {
      get
    }
    public static var nixieOne: Swift.String {
      get
    }
    public static var bungeeInline: Swift.String {
      get
    }
    public static var lobster: Swift.String {
      get
    }
    public static var molle: Swift.String {
      get
    }
    public static var ostrichSansBlack: Swift.String {
      get
    }
    public static var ostrichSansBold: Swift.String {
      get
    }
    public static var robotoBlackItalic: Swift.String {
      get
    }
    public static var robotoLightItalic: Swift.String {
      get
    }
    public static var codystar: Swift.String {
      get
    }
    public static var trashHand: Swift.String {
      get
    }
    public static var carterOne: Swift.String {
      get
    }
    public static var kronaOne: Swift.String {
      get
    }
    public static var monoton: Swift.String {
      get
    }
    public static var notable: Swift.String {
      get
    }
    public static var yesevaOne: Swift.String {
      get
    }
    public static var vt323: Swift.String {
      get
    }
    public static var stintUltraExpanded: Swift.String {
      get
    }
    public static var camptonBold: Swift.String {
      get
    }
    public static var galanoGrotesqueBold: Swift.String {
      get
    }
    public static var palanquinDarkSemiBold: Swift.String {
      get
    }
    public static var archivoBlack: Swift.String {
      get
    }
    public static var permanentMarker: Swift.String {
      get
    }
    public static var firaSans: Swift.String {
      get
    }
    public static var oswaldSemiBold: Swift.String {
      get
    }
    public static var poppins: Swift.String {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Font.Identifiers {
  public static var petitFormalScript: Swift.String {
    get
  }
  public static var ultra: Swift.String {
    get
  }
  public static var robotoBlack: Swift.String {
    get
  }
  public static var robotoLight: Swift.String {
    get
  }
  public static var sueEllenFrancisco: Swift.String {
    get
  }
  public static var ostrichSansHeavy: Swift.String {
    get
  }
  public static var wolesbro: Swift.String {
    get
  }
  public static var montserratLight: Swift.String {
    get
  }
  public static var amberlight: Swift.String {
    get
  }
  public static var rasa500: Swift.String {
    get
  }
  public static var rasaRegular: Swift.String {
    get
  }
  public static var handycheeraRegular: Swift.String {
    get
  }
  public static var abrilFatfaceRegular: Swift.String {
    get
  }
  public static var nunitoBold: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFontImporter) open class FontImporter : ObjectiveC.NSObject {
  @objc public static var all: [ImglyKit.Font] {
    @objc get
    @objc set
  }
  @objc public static func font(withIdentifier identifier: Swift.String) -> ImglyKit.Font?
  @objc public class var defaultItems: [ImglyKit.Font] {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(PESDKFontListSectionController) open class FontListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFontMenuItem) open class FontMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let font: ImglyKit.Font
  @objc final public let title: Swift.String
  @objc convenience public init(font: ImglyKit.Font)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc(PESDKFontSelectorViewDelegate) public protocol FontSelectorViewDelegate : AnyObject {
  @objc func fontSelectorView(_ fontSelectorView: ImglyKit.FontSelectorView, didSelectFontWithName fontName: Swift.String)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFontSelectorView) open class FontSelectorView : UIKit.UIScrollView {
  @objc weak open var selectorDelegate: ImglyKit.FontSelectorViewDelegate?
  @objc open var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var labelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var selectedFontName: Swift.String? {
    @objc get
    @objc set
  }
  @objc open var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKHandleButton) open class HandleButton : ImglyKit.Button {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func tintColorDidChange()
  @objc deinit
}
open class FontSelectorViewController<SpriteModelType, GestureController, SelectionView> : ImglyKit.ViewController, ImglyKit.FontSelectorViewDelegate where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView {
  weak open var delegate: ImglyKit.FontSelectorViewControllerDelegate?
  @objc open var fontSelectorView: ImglyKit.FontSelectorView {
    @objc get
  }
  @objc open var handleButton: ImglyKit.HandleButton {
    @objc get
  }
  @objc open var dimmingView: UIKit.UIView {
    @objc get
  }
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  final public let spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var handleButtonConfigurationClosure: ((ImglyKit.HandleButton) -> Swift.Void)?
  @objc open var fontSelectorViewConfigurationClosure: ((ImglyKit.FontSelectorView) -> Swift.Void)?
  @objc required convenience dynamic public init()
  public init(spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SelectionView>?)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @objc public func fontSelectorView(_ fontSelectorView: ImglyKit.FontSelectorView, didSelectFontWithName fontName: Swift.String)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension FontSelectorViewController : ImglyKit.SpriteEditControllerDelegate {
}
public protocol FontSelectorViewControllerDelegate : AnyObject {
  func fontSelectorViewController<SpriteModelType, GestureController, SelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SelectionView>, didPick font: ImglyKit.Font) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  func fontSelectorViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func fontSelectorViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func fontSelectorViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func fontSelectorViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
}
@objcMembers @objc(PESDKFrame) open class Frame : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc open var imageInsets: UIKit.UIEdgeInsets
  @objc public var relativeScale: CoreGraphics.CGFloat {
    get
  }
  @objc final public let tolerance: CoreGraphics.CGFloat
  @objc final public let identifier: Swift.String
  @objc open var isDynamic: Swift.Bool {
    get
  }
  @objc public init(frameBuilder: ImglyKit.FrameBuilder, relativeScale: CoreGraphics.CGFloat, thumbnailURL: Foundation.URL, identifier: Swift.String)
  @objc public init(identifier: Swift.String, tolerance: CoreGraphics.CGFloat)
  @objc open func addImage(_ imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, forRatio ratio: CoreGraphics.CGFloat)
  @objc open func imageURL(forRatio ratio: CoreGraphics.CGFloat) -> Foundation.URL?
  @objc open func maskImageURL(forRatio ratio: CoreGraphics.CGFloat, withTolerance tolerance: CoreGraphics.CGFloat) -> Foundation.URL?
  @objc open func image(forSize size: CoreGraphics.CGSize, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc open func image(forSize size: CoreGraphics.CGSize, relativeScale: CoreGraphics.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc open func staticImage(forRatio ratio: CoreGraphics.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
  @objc open func saveThumbnailToCameraRoll(forSize size: CoreGraphics.CGSize)
  @objc open func thumbnailURL(forRatio ratio: CoreGraphics.CGFloat) -> Foundation.URL?
  @objc open func hasImage(forRatio ratio: CoreGraphics.CGFloat) -> Swift.Bool
  @objc public static var all: [ImglyKit.Frame] {
    @objc get
    @objc set
  }
  @objc public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.Frame?
  @objc @available(*, deprecated, renamed: "defaultItems")
  open class func createDefaultFrames() -> [ImglyKit.Frame]
  @objc public class var defaultItems: [ImglyKit.Frame] {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum FrameBuildMode : Swift.Int {
  case horizontal
  case vertical
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKFrameBuilderProtocol) public protocol FrameBuilder {
  @objc func build(size: CoreGraphics.CGSize, relativeScale: CoreGraphics.CGFloat, completion: @escaping ((UIKit.UIImage?) -> Swift.Void))
}
@_inheritsConvenienceInitializers @objc(PESDKFrameEditController) open class FrameEditController : ImglyKit.TransformEditController {
  @objc open var rotationEnabled: Swift.Bool
  @objc open var frameImageView: UIKit.UIImageView {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open func setFrame(_ frame: ImglyKit.Frame?, with image: UIKit.UIImage?)
  @objc override dynamic open func viewDidLoad()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameImageGroup) open class FrameImageGroup : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var startImage: UIKit.UIImage?
  @objc public var midImage: UIKit.UIImage?
  @objc public var endImage: UIKit.UIImage?
  @objc final public let startImageURL: Foundation.URL?
  @objc final public let midImageURL: Foundation.URL?
  @objc final public let endImageURL: Foundation.URL?
  @objc public var midImageMode: ImglyKit.FrameTileMode
  @objc public init(startImageURL: Foundation.URL?, midImageURL: Foundation.URL, endImageURL: Foundation.URL?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFrameImageView) open class FrameImageView : ImglyKit.SpriteImageView {
  @objc required public init(uuid: Foundation.UUID)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum FrameLayoutMode : Swift.Int {
  case horizontalInside
  case verticalInside
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(PESDKFrameListSectionController) open class FrameListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameMenuItem) open class FrameMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let frame: ImglyKit.Frame?
  @objc final public let thumbnailURL: Foundation.URL?
  @objc convenience public init(frame: ImglyKit.Frame, ratio: CoreGraphics.CGFloat)
  @objc convenience override dynamic public init()
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKFrameOptionListSectionController) open class FrameOptionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameOptionMenuItem) open class FrameOptionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let frameAction: ImglyKit.FrameAction
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(frameAction: ImglyKit.FrameAction)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKFrameOptionsToolController) open class FrameOptionsToolController : ImglyKit.MenuToolController, ImglyKit.TransformEditControllerDelegate, ImglyKit.SliderContainerControllerDelegate, ImglyKit.BrandedTool {
  final public let sliderContainerController: ImglyKit.SliderContainerController<ImglyKit.Slider, ImglyKit.FrameEditController>
  @objc final public let frameEditController: ImglyKit.FrameEditController
  override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  open var activeFrameAction: ImglyKit.FrameAction? {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(sliderContainerController: ImglyKit.SliderContainerController<ImglyKit.Slider, ImglyKit.FrameEditController>, frameEditController: ImglyKit.FrameEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc open func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @objc open func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @objc open func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc open func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @objc public func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  open func sliderContainerControllerDidSlide<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  open func sliderContainerControllerDidEndSliding<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension FrameOptionsToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc public enum FrameAction : Swift.Int {
  case replace
  case width
  case opacity
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objcMembers @objc(PESDKFrameOptionsToolControllerOptions) open class FrameOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedFrameActions: [ImglyKit.FrameAction]
  final public let cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FrameAction?) -> Swift.Void)?
  @objc final public let frameActionSelectedClosure: ((ImglyKit.FrameAction) -> Swift.Void)?
  @objc final public let sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.FrameAction) -> Swift.Void)?
  @objc final public let rotationEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FrameOptionsToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKFrameOptionsToolControllerOptionsBuilder) open class FrameOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedFrameActions: [ImglyKit.FrameAction]
  open var cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.FrameAction?) -> Swift.Void)?
  @objc open var frameActionSelectedClosure: ((ImglyKit.FrameAction) -> Swift.Void)?
  @objc open var sliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var sliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var sliderChangedValueClosure: ((ImglyKit.Slider, ImglyKit.FrameAction) -> Swift.Void)?
  @objc open var rotationEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.FrameOptionsToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
extension FrameOptionsToolControllerOptionsBuilder {
  @objc(allowedFrameActions) dynamic open var _objCAllowedFrameActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
public struct FrameSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public var scale: CoreGraphics.CGFloat?
  public var alpha: CoreGraphics.CGFloat
  public var ratio: CoreGraphics.CGFloat?
  public init(identifier: Swift.String)
  public init(frame: ImglyKit.Frame)
  public static func == (a: ImglyKit.FrameSpriteModel, b: ImglyKit.FrameSpriteModel) -> Swift.Bool
}
@objc public enum FrameTileMode : Swift.Int {
  case stretch
  case `repeat`
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKFrameToolController) open class FrameToolController : ImglyKit.MenuToolController, ImglyKit.TransformEditControllerDelegate, ImglyKit.BrandedTool {
  @objc open var selectedFrame: ImglyKit.Frame?
  @objc final public let frameEditController: ImglyKit.FrameEditController
  override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(frameEditController: ImglyKit.FrameEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override dynamic open func willBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  @objc open func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @objc open func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @objc open func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc open func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @objc public func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension FrameToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objcMembers @objc(PESDKFrameToolControllerOptions) open class FrameToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let selectedFrameClosure: ((ImglyKit.Frame?) -> Swift.Void)?
  @objc final public let cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Frame?) -> Swift.Void)?
  @objc final public let rotationEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.FrameToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameToolControllerOptionsBuilder) open class FrameToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var selectedFrameClosure: ((ImglyKit.Frame?) -> Swift.Void)?
  @objc open var cellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Frame?) -> Swift.Void)?
  @objc open var rotationEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKFreehandTool) open class FreehandTool : ImglyKit.Tool {
  @objc open var color: UIKit.UIColor
  @objc open var hardness: CoreGraphics.CGFloat
  @objc open var brush: ImglyKit.Brush?
  @objc override open func gestureBegan(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func beginPath(location: CoreGraphics.CGPoint, force: CoreGraphics.CGFloat = 1)
  @objc override open func gestureMoved(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func continuePath(location: CoreGraphics.CGPoint, canvas: ImglyKit.CanvasView, force: CoreGraphics.CGFloat = 1)
  @objc override open func gestureEnded(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func endPath(location: CoreGraphics.CGPoint, canvas: ImglyKit.CanvasView, didMove: Swift.Bool = true)
  @objc override open func gestureCancelled(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKGaussianFocusFilter) open class GaussianFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKGradientFocusFilter) open class GradientFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputNormalizedControlPoint1: Foundation.NSValue?
  @objc open var inputNormalizedControlPoint2: Foundation.NSValue?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKGradientView) open class GradientView : UIKit.UIView {
  @objc dynamic open var topColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc dynamic open var bottomColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc convenience public init(topColor: UIKit.UIColor, bottomColor: UIKit.UIColor)
  @objc required convenience dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objcMembers @objc(PESDKGroup) open class Group : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let displayName: Swift.String
  @objc final public let thumbnail: UIKit.UIImage?
  @objc final public let memberIdentifiers: [Swift.String]
  @objc public init(identifier: Swift.String, displayName: Swift.String, thumbnail: UIKit.UIImage?, memberIdentifiers: [Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class IMGLY : ObjectiveC.NSObject {
  @objc dynamic public static var metalDisabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public static var metalFiltersDisabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public static var forceExtendedSRGBColorSpace: Swift.Bool
  @available(*, deprecated, message: "Use `MediaEditViewControllerOptions.forceExport` instead.")
  @objc dynamic public static var forceRenderHighResolutionImage: Swift.Bool {
    @objc get
    @objc set
  }
  public enum Error : Swift.Error {
    case replacingClassNotASubclass
    case licenseFatalError(Swift.String)
    case licenseError(Swift.String)
    case licenseWarning(Swift.String)
  }
  @objc public class func unlockWithLicense(at url: Foundation.URL)
  @objc open class func crashIfNeeded() throws
  @objc(unlockWithLicenseFromURL:error:) public class func unlockWithLicense(from url: Foundation.URL) throws
  @objc(unlockWithLicenseFromString:error:) public class func unlockWithLicense(from string: Swift.String) throws
  @objc(unlockWithLicenseFromDictionary:error:) public class func unlockWithLicense(from dictionary: [Swift.String : Any]) throws
  @objc public static let analytics: ImglyKit.Analytics
  @objc public static var progressView: ImglyKit.ProgressView
  @objc public static var localizationDictionary: [Swift.String : [Swift.String : Swift.String]]?
  @objc public static var localizationBlock: ((Swift.String) -> Swift.String?)?
  @objc public static var bundleImageBlock: ((Swift.String) -> UIKit.UIImage?)?
  public static var renderPipelineBlock: ((CoreImage.CIImage, ImglyKit.PESDKRenderMode?) -> CoreImage.CIImage)?
  @objc public static var toolbarItemBlock: ((UIKit.UIViewController, ImglyKit.ToolbarItem?) -> ImglyKit.ToolbarItem?)?
  @objc public static func replaceClass(_ builtinClass: ObjectiveC.NSObject.Type, with replacingClass: ObjectiveC.NSObject.Type) throws
  public static func replacingClass<ReplacedClass>(for replacedClass: ReplacedClass.Type) -> ReplacedClass.Type where ReplacedClass : ObjectiveC.NSObject
  @objc public static func resetClassReplacements()
  @objc public static func reset()
  @objc deinit
  @objc override dynamic public init()
}
extension IMGLY.Error : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension IMGLY.Error : Foundation.CustomNSError {
  public var errorCode: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKIconGenerator) open class IconGenerator : ObjectiveC.NSObject {
  @objc(generateCropAspectImageWithWidth:height:ofSize:dottedBorder:showSwitchIcon:) open class func generateCropAspectImage(withWidth width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat, of size: CoreGraphics.CGSize, dottedBorder: Swift.Bool, showSwapIcon: Swift.Bool) -> UIKit.UIImage?
  @objc(generateTextImageWithFont:ofSize:text:) open class func generateTextImage(with font: UIKit.UIFont, of size: CoreGraphics.CGSize, text: Swift.String = "Ag") -> UIKit.UIImage?
  @objc(generateColorImageWithColor:borderColor:ofSize:) open class func generateColorImage(with color: UIKit.UIColor, border borderColor: UIKit.UIColor, of size: CoreGraphics.CGSize) -> UIKit.UIImage?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKImageAsset) open class ImageAsset : ObjectiveC.NSObject {
  @objc open var image: UIKit.UIImage?
  @objc open var userInfo: [Swift.String : Any]?
  @objc open var ciImage: CoreImage.CIImage? {
    @objc get
  }
  @objc open var orientedCIImage: CoreImage.CIImage? {
    @objc get
  }
  @objc convenience public init(ciImage: CoreImage.CIImage, userInfo: [Swift.String : Any]? = nil)
  @objc convenience public init(image: UIKit.UIImage, userInfo: [Swift.String : Any]? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKImageFileFormat) public enum ImageFileFormat : Swift.Int {
  case jpeg
  case png
  @available(iOS 11.0, *)
  case heif
  case tiff
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct ImageGeometry : Swift.CustomStringConvertible {
  public let inputRect: CoreGraphics.CGRect
  public var appliedOrientation: ImglyKit.Orientation
  public var appliedTransform: CoreGraphics.CGAffineTransform {
    get
  }
  public var isSizeInverted: Swift.Bool {
    get
  }
  public init()
  public init(inputSize: CoreGraphics.CGSize)
  public init(inputSize: CoreGraphics.CGSize, initialOrientation: ImglyKit.Orientation)
  public func transform(from orientation: ImglyKit.Orientation) -> CoreGraphics.CGAffineTransform
  public mutating func flipVertically()
  public mutating func flipHorizontally()
  public mutating func rotateClockwise()
  public mutating func rotateCounterClockwise()
  public mutating func apply(_ orientation: ImglyKit.Orientation)
  public func normalize(_ point: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  public func normalize(_ vector: CoreGraphics.CGVector) -> CoreGraphics.CGVector
  public func normalize(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  public func normalize(_ rect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public func denormalize(_ point: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  public func denormalize(_ rect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public var description: Swift.String {
    get
  }
}
public protocol ImageVendor {
  func addConsumer(_ closure: @escaping (CoreImage.CIImage) -> Swift.Void) -> Swift.AnyObject
  func removeConsumer(_ consumer: Swift.AnyObject)
}
@objcMembers @objc(PESDKLUTEffect) open class LUTEffect : ImglyKit.Effect {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let lutURL: Foundation.URL?
  @objc final public let horizontalTileCount: Swift.UInt
  @objc final public let verticalTileCount: Swift.UInt
  @objc public init(identifier: Swift.String, lutURL: Foundation.URL?, displayName: Swift.String)
  @objc public init(identifier: Swift.String, lutURL: Foundation.URL?, displayName: Swift.String, horizontalTileCount: Swift.UInt, verticalTileCount: Swift.UInt)
  @objc override open var newEffectFilter: CoreImage.CIFilter? {
    @objc get
  }
  @objc override public init(identifier: Swift.String, displayName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLUTFilter) open class LUTFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputLUT: CoreImage.CIImage?
  @objc open var inputHorizontalTileCount: Foundation.NSNumber?
  @objc open var inputVerticalTileCount: Foundation.NSNumber?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLabel) open class Label : UIKit.UILabel {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc dynamic open var labelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc deinit
}
public protocol Layout {
  func constraints(in view: UIKit.UIView, with insets: UIKit.UIEdgeInsets) -> [UIKit.NSLayoutConstraint]
}
@_hasMissingDesignatedInitializers final public class LicenseController {
  public static let shared: ImglyKit.LicenseController
  final public func isLocked(for product: ImglyKit.LicenseProduct) -> Swift.Bool
  final public func unlockWithLicense(at licenseURL: Foundation.URL) throws
  final public func crashIfNeeded(for product: ImglyKit.LicenseProduct) throws
  final public func printWatermarkMessage(for product: ImglyKit.LicenseProduct)
  final public func hasAccess(to feature: ImglyKit.LicenseFeature, for product: ImglyKit.LicenseProduct, ignoreState: Swift.Bool = false) -> Swift.Bool
  @objc deinit
}
public enum LicenseFeature : Swift.String, Swift.Decodable {
  case adjustment
  case brush
  case camera
  case export
  case filter
  case focus
  case frame
  case library
  case overlay
  case sticker
  case text
  case textdesign
  case transform
  case trim
  case noexporttracking
  case whitelabel
  case customassets
  case composition
  case audio
  case videolibrary
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum LicenseProduct : Swift.String, Swift.Decodable, Swift.CaseIterable {
  case pesdk
  case vesdk
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [ImglyKit.LicenseProduct]
  public static var allCases: [ImglyKit.LicenseProduct] {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc(PESDKLicenseProduct) public enum _ObjCLicenseProduct : Swift.Int {
  @objc(PESDKLicenseProductPESDK) case pesdk
  @objc(PESDKLicenseProductVESDK) case vesdk
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLineView) open class LineView : UIKit.UIView {
  @objc dynamic open var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLinearFocusFilter) open class LinearFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputNormalizedControlPoint1: Foundation.NSValue?
  @objc open var inputNormalizedControlPoint2: Foundation.NSValue?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputFadeWidth: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKLinearGradientView) open class LinearGradientView : ImglyKit.FocusGradientView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
@objc public enum LogLevel : Swift.Int {
  case none
  case error
  case warn
  case info
  case debug
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKLogger) public class MasterLogger : ObjectiveC.NSObject {
  @objc public static var logLevel: ImglyKit.LogLevel
  @objc public static func add(logger: ImglyKit.LoggerProtocol)
  @objc public static func remove(logger: ImglyKit.LoggerProtocol)
  @objc public static func removeAll()
  @objc public static func error(_ message: Swift.String)
  @objc public static func warn(_ message: Swift.String)
  @objc public static func info(_ message: Swift.String)
  @objc public static func debug(_ message: Swift.String)
  @objc deinit
}
@objc(PESDKLoggerProtocol) public protocol LoggerProtocol : AnyObject {
  @objc func error(_ message: Swift.String)
  @objc func warn(_ message: Swift.String)
  @objc func info(_ message: Swift.String)
  @objc func debug(_ message: Swift.String)
}
@objcMembers @objc(PESDKMainFlowController) open class MainFlowController : ObjectiveC.NSObject {
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc final public let configuration: ImglyKit.Configuration
  final public let uneditedPhotoEditModel: ImglyKit.PhotoEditModel
  @objc weak open var mediaEditViewController: ImglyKit.MediaEditViewController? {
    get
  }
  open var userInterfaceState: ImglyKit.UserInterfaceState {
    get
    set
  }
  @objc convenience public init(mediaEditViewController: ImglyKit.MediaEditViewController, configuration: ImglyKit.Configuration)
  required public init(mediaEditViewController: ImglyKit.MediaEditViewController, photoEditModel: ImglyKit.PhotoEditModel, configuration: ImglyKit.Configuration)
  @objc deinit
  @objc override dynamic public init()
}
extension MainFlowController : ImglyKit.EventSubscriber {
  @objc dynamic public func viewControllerDidFinish(_ viewController: UIKit.UIViewController)
  @objc dynamic public func viewControllerDidCancel(_ viewController: UIKit.UIViewController)
  @objc dynamic public func viewController(_ viewController: UIKit.UIViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc dynamic public func photoEditToolController(_ photoEditToolController: UIKit.UIViewController, wantsToPresent toolController: ImglyKit.PhotoEditToolController)
  public func photoEditModelDidChange(_ photoEditModel: ImglyKit.PhotoEditModel)
  public func registerUndoChange(from oldPhotoEditModel: ImglyKit.PhotoEditModel, to newPhotoEditModel: ImglyKit.PhotoEditModel)
  public func userInterfaceStateDidChange(_ userInterfaceState: ImglyKit.UserInterfaceState)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMarkerView) open class MarkerView : UIKit.UIView {
  @objc dynamic open var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc dynamic open var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc(PESDKMediaEditPreviewController) open class MediaEditPreviewController : ImglyKit.ViewController {
  @objc open var previewViewScrollingContainer: UIKit.UIScrollView {
    @objc get
  }
  @objc open var previewView: UIKit.UIView {
    @objc get
  }
  @objc open var allowsPreviewImageZoom: Swift.Bool
  @objc weak open var delegate: ImglyKit.MediaEditPreviewControllerDelegate?
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var baseWorkUIImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc open var baseWorkCIImage: CoreImage.CIImage? {
    get
  }
  @objc final public let renderer: ImglyKit.PhotoEditRenderer
  @objc open var spriteViewController: ImglyKit.SpriteViewController {
    @objc get
  }
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  @objc open var undoController: ImglyKit.UndoController?
  @objc open var loadingProgressClosure: ((Swift.Bool) -> Swift.Void)?
  convenience public init(photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  public init(renderer: ImglyKit.PhotoEditRenderer, photoEditModel: ImglyKit.PhotoEditModel)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func updateViewConstraints()
  @objc open func loadBaseImage(_ completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc open func updateRenderer()
  open var imageVendor: ImglyKit.ImageVendor? {
    get
  }
  @objc public func updateBrush(onlyIfMissing: Swift.Bool = false)
  @objc open func updateLayout()
  @objc open func updateInsets(animated: Swift.Bool)
  @objc open func updatePreview()
  @objc open func workImageSize(for screen: UIKit.UIScreen) -> CoreGraphics.CGSize
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension MediaEditPreviewController : UIKit.UIScrollViewDelegate {
  @objc dynamic open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
  @objc dynamic open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
extension MediaEditPreviewController : GLKit.GLKViewDelegate {
  @objc dynamic open func glkView(_ view: GLKit.GLKView, drawIn rect: CoreGraphics.CGRect)
}
extension MediaEditPreviewController : MetalKit.MTKViewDelegate {
  @objc dynamic public func draw(in view: MetalKit.MTKView)
  @objc dynamic public func mtkView(_ view: MetalKit.MTKView, drawableSizeWillChange size: CoreGraphics.CGSize)
}
extension MediaEditPreviewController : ImglyKit.SpriteViewControllerDelegate {
  @objc dynamic public func spriteViewControllerDidChangePhotoEditModel(_ spriteViewController: ImglyKit.SpriteViewController)
  @objc dynamic public func spriteViewControllerUndoController(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.UndoController?
  @objc dynamic public func spriteViewControllerConfiguration(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.Configuration?
}
@objc(PESDKMediaEditPreviewControllerDelegate) public protocol MediaEditPreviewControllerDelegate : AnyObject {
  @objc func mediaEditPreviewControllerPreviewEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc func mediaEditPreviewControllerRenderMode(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.PESDKRenderMode
  @objc func mediaEditPreviewControllerBackgroundColor(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIColor
  @objc func mediaEditPreviewControllerPreviewInsets(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIEdgeInsets
  @objc func mediaEditPreviewControllerPreviewScale(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> CoreGraphics.CGFloat
  @objc func mediaEditPreviewControllerProxyZoomingActive(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc func mediaEditPreviewControllerResetProxyZooming(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @objc func mediaEditPreviewControllerPlaybackEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc func mediaEditPreviewControllerDidChangePhotoEditModel(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @objc func mediaEditPreviewControllerConfiguration(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.Configuration
}
@objcMembers @objc(PESDKMediaEditViewController) open class MediaEditViewController : ImglyKit.ViewController {
  @objc open var flowController: ImglyKit.MainFlowController! {
    get
  }
  @objc final public let menuViewController: ImglyKit.MenuViewController
  @objc final public let mediaEditPreviewController: ImglyKit.MediaEditPreviewController
  @objc open var containerView: UIKit.UIView {
    @objc get
  }
  @objc open var toolbar: ImglyKit.Toolbar {
    @objc get
  }
  @objc open var toolbarItem: ImglyKit.ToolbarItem
  open var subscribers: [ImglyKit.WeakContainer<ImglyKit.EventSubscriber>]
  @objc final public let configuration: ImglyKit.Configuration
  @objc open var undoController: ImglyKit.UndoController {
    @objc get
    @objc set
  }
  @objc final public let assetManager: ImglyKit.AssetManager
  @objc public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
  }
  @objc open var hasChanges: Swift.Bool {
    @objc get
  }
  public init(mediaEditPreviewController: ImglyKit.MediaEditPreviewController, configuration: ImglyKit.Configuration = Configuration(), menuItems: [ImglyKit.PhotoEditMenuItem] = PhotoEditMenuItem.defaultItems, photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func updateViewConstraints()
  @objc override dynamic open func willMove(toParent parent: UIKit.UIViewController?)
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var shouldAutomaticallyForwardAppearanceMethods: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  @objc open var soundOnOffButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var playPauseButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc open func presentTool(for toolMenuItem: ImglyKit.ToolMenuItem)
  @objc open func didCancel()
  @objc open func willPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc open func didPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc open func willDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc open func didDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc open func renderHighResolutionVariant()
  @objc open var viewControllers: [ImglyKit.PhotoEditToolController] {
    get
  }
  @objc(pushViewController:animated:completion:) open func push(_ viewController: ImglyKit.PhotoEditToolController, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @discardableResult
  @objc(popViewControllerAnimated:completion:) open func pop(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil) -> ImglyKit.PhotoEditToolController?
  @objc open var options: ImglyKit.MediaEditViewControllerOptions {
    @objc get
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension MediaEditViewController : ImglyKit.EventSubscribable {
}
extension MediaEditViewController : ImglyKit.ToolbarItemProviding {
}
extension MediaEditViewController : ImglyKit.PhotoEditModelSettable {
}
extension MediaEditViewController : ImglyKit.MenuViewControllerDelegate {
  @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: ImglyKit.MenuItem)
  @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc dynamic open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: ImglyKit.MenuItem, from previousMenuItems: [ImglyKit.MenuItem], to menuItems: [ImglyKit.MenuItem])
}
extension MediaEditViewController : ImglyKit.MediaEditPreviewControllerDelegate {
  @objc dynamic open func mediaEditPreviewControllerPreviewEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc dynamic open func mediaEditPreviewControllerRenderMode(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.PESDKRenderMode
  @objc dynamic open func mediaEditPreviewControllerBackgroundColor(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIColor
  @objc dynamic open func mediaEditPreviewControllerPreviewInsets(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> UIKit.UIEdgeInsets
  @objc dynamic open func mediaEditPreviewControllerPreviewScale(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> CoreGraphics.CGFloat
  @objc dynamic open func mediaEditPreviewControllerProxyZoomingActive(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc dynamic open func mediaEditPreviewControllerResetProxyZooming(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @objc dynamic open func mediaEditPreviewControllerPlaybackEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc dynamic open func mediaEditPreviewControllerDidChangePhotoEditModel(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController)
  @objc dynamic open func mediaEditPreviewControllerConfiguration(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> ImglyKit.Configuration
}
extension MediaEditViewController : ImglyKit.PhotoEditToolControllerDelegate {
  @objc dynamic open func photoEditToolControllerViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditViewController?
  @objc dynamic open func photoEditToolControllerPreviewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditPreviewController?
  @objc dynamic open func photoEditToolControllerBaseImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIImage?
  @objc dynamic open func photoEditToolControllerBaseCIImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> CoreImage.CIImage?
  @objc dynamic open func photoEditToolControllerPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIView?
  @objc dynamic open func photoEditToolControllerPreviewScrollView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIScrollView?
  @objc dynamic open func photoEditToolController(_ photoEditToolController: ImglyKit.PhotoEditToolController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc dynamic open func photoEditToolControllerDidChangeWantsDefaultPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController)
  @objc dynamic open func photoEditToolControllerSpriteViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.SpriteViewController?
}
@objc(PESDKMediaEditViewControllerDelegate) public protocol MediaEditViewControllerDelegate {
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, willPresentToolController toolController: ImglyKit.PhotoEditToolController)
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, didPresentToolController toolController: ImglyKit.PhotoEditToolController)
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, willDismissToolController toolController: ImglyKit.PhotoEditToolController)
  @objc optional func mediaEditViewController(_ mediaEditViewController: ImglyKit.MediaEditViewController, didDismissToolController toolController: ImglyKit.PhotoEditToolController)
}
@objc public enum MediaEditOverlayAction : Swift.Int {
  case undo
  case redo
  case soundOnOff
  case playPause
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKNavigationControllerMode) public enum NavigationControllerMode : Swift.Int {
  case useNavigationBar
  case useToolbar
  case useNavigationBarAndParentNavigationItem
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMediaEditViewControllerOptions) open class MediaEditViewControllerOptions : ObjectiveC.NSObject {
  @objc final public let titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let backgroundColor: UIKit.UIColor?
  @objc final public let menuBackgroundColor: UIKit.UIColor?
  @objc final public let applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  final public let photoEditorActionSelectedClosure: ((ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  @objc final public let allowsPreviewImageZoom: Swift.Bool
  @objc final public let forceCropMode: Swift.Bool
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  final public let allowedMediaEditOverlayActions: [ImglyKit.MediaEditOverlayAction]
  @objc final public let mediaEditOverlayActionSelectedClosure: ((ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  @objc final public let undoStepByStep: Swift.Bool
  @objc final public let discardConfirmationClosure: ((ImglyKit.MediaEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc @available(*, deprecated, renamed: "navigationControllerMode", message: "Use `navigationControllerMode = .useNavigationBarAndParentNavigationItem` instead.")
  public var useParentNavigationItem: Swift.Bool {
    @objc get
  }
  @objc final public let navigationControllerMode: ImglyKit.NavigationControllerMode
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  final public let menuItems: [ImglyKit.PhotoEditMenuItem]
  @objc final public let forceExport: Swift.Bool
  @objc convenience override dynamic public init()
  @objc public init(builder: ImglyKit.MediaEditViewControllerOptionsBuilder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMediaEditViewControllerOptionsBuilder) open class MediaEditViewControllerOptionsBuilder : ObjectiveC.NSObject {
  @objc open var titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var backgroundColor: UIKit.UIColor?
  @objc open var menuBackgroundColor: UIKit.UIColor?
  @objc open var applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  open var photoEditorActionSelectedClosure: ((ImglyKit.PhotoEditMenuItem) -> Swift.Void)?
  @objc open var forceCropMode: Swift.Bool
  @objc open var allowsPreviewImageZoom: Swift.Bool
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  open var allowedMediaEditOverlayActions: [ImglyKit.MediaEditOverlayAction]
  @objc open var mediaEditOverlayActionSelectedClosure: ((ImglyKit.MediaEditOverlayAction) -> Swift.Void)?
  @objc open var undoStepByStep: Swift.Bool
  @objc open var discardConfirmationClosure: ((ImglyKit.MediaEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc @available(*, deprecated, renamed: "navigationControllerMode", message: "Use `navigationControllerMode = .useNavigationBarAndParentNavigationItem` instead.")
  public var useParentNavigationItem: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var navigationControllerMode: ImglyKit.NavigationControllerMode
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  open var menuItems: [ImglyKit.PhotoEditMenuItem]
  @objc open var forceExport: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.MediaEditViewControllerOptions)
  @objc deinit
}
extension MediaEditViewControllerOptionsBuilder {
  @objc dynamic open var actionButtonConfigurationBlock: ((ImglyKit.MenuCollectionViewCell, ImglyKit._ObjCPhotoEditMenuItem) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc dynamic open var photoEditorActionSelectedBlock: ((ImglyKit._ObjCPhotoEditMenuItem) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc(allowedMediaEditOverlayActions) dynamic open var _objCAllowedMediaEditOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(menuItems) dynamic open var _objCMenuItems: [ImglyKit._ObjCPhotoEditMenuItem] {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuAccessoryContainerView) open class MenuAccessoryContainerView : UIKit.UIView {
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc open var backgroundColorDidChange: ((UIKit.UIColor) -> Swift.Void)?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objcMembers @objc(PESDKMenuCollectionView) open class MenuCollectionView : UIKit.UICollectionView {
  @objc dynamic public init()
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open var flowLayout: UIKit.UICollectionViewFlowLayout {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuCollectionViewCell) open class MenuCollectionViewCell : UIKit.UICollectionViewCell {
  @objc open var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public let iconImageView: UIKit.UIImageView
  @objc final public let captionTextLabel: UIKit.UILabel
  @objc final public let captionGradientView: ImglyKit.GradientView
  @objc final public let backgroundImageView: UIKit.UIImageView
  @objc final public let backgroundDimmingView: UIKit.UIView
  @objc dynamic open var dimsBackgroundImageWhenSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var dimsContentWhenNotSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var showsGradientBehindCaptionTextLabel: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public let activityIndicator: UIKit.UIActivityIndicatorView
  @objc dynamic open var contentTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc dynamic open var backgroundDimmingColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc dynamic open var showsCaptionTextLabel: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var selectionBorderWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc dynamic open var cornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func updateConstraints()
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(PESDKMenuItem) public protocol MenuItem : ImglyKit.Diffable {
  @objc static var sectionControllerType: ImglyKit.MenuListSectionController.Type { get }
}
@objc(PESDKMenuListSectionControllerListDisplayDelegate) public protocol MenuListSectionControllerListDisplayDelegate : AnyObject {
  @objc func sectionController(_ sectionController: ImglyKit.MenuListSectionController, willDisplay cell: UIKit.UICollectionViewCell, at index: Swift.Int)
}
@objc(PESDKMenuListSectionControllerSelectionDelegate) public protocol MenuListSectionControllerSelectionDelegate : AnyObject {
  @objc func sectionController(_ sectionController: ImglyKit.MenuListSectionController, didSelectItemAt index: Swift.Int, object: Any)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuListSectionController) open class MenuListSectionController : ObjectiveC.NSObject {
  @objc weak public var selectionDelegate: ImglyKit.MenuListSectionControllerSelectionDelegate?
  @objc weak public var displayDelegate: ImglyKit.MenuListSectionControllerListDisplayDelegate?
  @objc public var inset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc public var minimumLineSpacing: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public var minimumInteritemSpacing: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public var isFirstSection: Swift.Bool {
    @objc get
  }
  @objc public var isLastSection: Swift.Bool {
    @objc get
  }
  @objc public var section: Swift.Int {
    @objc get
  }
  @objc open var hasSelectedItems: Swift.Bool {
    @objc get
  }
  @objc open func hasSelection(at index: Swift.Int) -> Swift.Bool
  @objc open func selectItem(at index: Swift.Int)
  @objc open func deselectItem(at index: Swift.Int)
  @objc required override dynamic public init()
  @objc open var numberOfItems: Swift.Int {
    @objc get
  }
  @objc open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc open func didUpdate(to object: Any)
  @objc open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc open func didSelectItem(at index: Swift.Int)
  @objc open func canMoveItem(at index: Swift.Int) -> Swift.Bool
  @objc open var supportedElementKinds: [Swift.String] {
    @objc get
  }
  @objc open func viewForSupplementaryElement(ofKind elementKind: Swift.String, at index: Swift.Int) -> UIKit.UICollectionReusableView
  @objc open func sizeForSupplementaryView(ofKind elementKind: Swift.String, at index: Swift.Int) -> CoreGraphics.CGSize
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKMenuToolController) open class MenuToolController : ImglyKit.PhotoEditToolController, ImglyKit.MenuViewControllerDelegate {
  @objc final public let menuViewController: ImglyKit.MenuViewController
  @objc final public let contentViewController: UIKit.UIViewController
  public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: ImglyKit.MenuItem)
  @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: ImglyKit.MenuItem, from previousMenuItems: [ImglyKit.MenuItem], to menuItems: [ImglyKit.MenuItem])
  @objc deinit
}
@objcMembers @objc(PESDKMenuViewController) open class MenuViewController : ImglyKit.ViewController {
  @objc final public let contentViewController: UIKit.UIViewController
  @objc open var keepsSelection: Swift.Bool
  @objc weak open var delegate: ImglyKit.MenuViewControllerDelegate?
  @objc open var collectionView: ImglyKit.MenuCollectionView {
    @objc get
  }
  @objc open var workspaceView: UIKit.UIView {
    @objc get
  }
  @objc open var accessoryView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var menuItems: [ImglyKit.MenuItem]
  @objc open var menuHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var isMenuHidden: Swift.Bool {
    get
  }
  @objc required public init(contentViewController: UIKit.UIViewController)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func updateViewConstraints()
  @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @objc open func showMenu(animated: Swift.Bool)
  @objc open func hideMenu(animated: Swift.Bool)
  @objc open func reloadData(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc open func performUpdates(animated: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc open func reloadMenuItems(_ menuItems: [ImglyKit.MenuItem])
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension MenuViewController : ImglyKit.MenuListSectionControllerSelectionDelegate {
  @objc dynamic public func sectionController(_ sectionController: ImglyKit.MenuListSectionController, didSelectItemAt index: Swift.Int, object: Any)
}
extension MenuViewController : ImglyKit.MenuListSectionControllerListDisplayDelegate {
  @objc dynamic public func sectionController(_ sectionController: ImglyKit.MenuListSectionController, willDisplay cell: UIKit.UICollectionViewCell, at index: Swift.Int)
}
extension MenuViewController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc(PESDKMenuViewControllerDelegate) public protocol MenuViewControllerDelegate : AnyObject {
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: ImglyKit.MenuItem)
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc func menuViewController(_ menuViewController: ImglyKit.MenuViewController, move menuItem: ImglyKit.MenuItem, from previousMenuItems: [ImglyKit.MenuItem], to menuItems: [ImglyKit.MenuItem])
}
extension Bundle {
  @objc dynamic public class var imglyBundle: Foundation.Bundle {
    @objc get
  }
}
public struct NeutralModelValues {
  public static let none: Swift.String
  public static let autoEnhancementOperation: Swift.Bool
  public static let adjustments: CoreGraphics.CGFloat
  public static let alpha: CoreGraphics.CGFloat
  public struct Filter {
    public static let identifier: Swift.String
  }
  public struct Overlay {
    public static let identifier: Swift.String
  }
  public struct Orientation {
    public static let rotation: Swift.Int
    public static let flipVertically: Swift.Bool
    public static let flipHorizontally: Swift.Bool
  }
}
extension NSNotification.Name {
  public static var PESDKPhotoEditPreviewControllerDidLayoutSubviews: Foundation.Notification.Name
  public static var PESDKDidSelectSpriteView: Foundation.Notification.Name
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAdjustmentModel) final public class _ObjCAdjustmentModel : ObjectiveC.NSObject {
  final public var adjustmentModel: ImglyKit.AdjustmentModel {
    get
  }
  @objc public init(brightness: Swift.Double, contrast: Swift.Double, shadows: Swift.Double, highlights: Swift.Double, exposure: Swift.Double, clarity: Swift.Double, saturation: Swift.Double, gamma: Swift.Double, blacks: Swift.Double, whites: Swift.Double, temperature: Swift.Double, sharpness: Swift.Double)
  @objc override dynamic public init()
  @objc final public var brightness: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var contrast: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var shadows: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var highlights: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var exposure: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var clarity: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var saturation: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var gamma: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var blacks: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var whites: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var temperature: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var sharpness: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioClipModel) final public class _ObjCAudioClipModel : ObjectiveC.NSObject {
  final public var audioClipModel: ImglyKit.AudioClipModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var trimModel: ImglyKit._ObjCTrimModel {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKAudioModel) final public class _ObjCAudioModel : ObjectiveC.NSObject {
  final public var audioModel: ImglyKit.AudioModel {
    get
  }
  @objc override dynamic public init()
  public init(clips: [ImglyKit.AudioClipModel], volumeBalance: Swift.Double)
  @objc final public var clips: [ImglyKit._ObjCAudioClipModel] {
    @objc get
    @objc set
  }
  @objc final public var volumeBalance: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKBrushSpriteModel) final public class _ObjCBrushSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var brushSpriteModel: ImglyKit.BrushSpriteModel {
    get
  }
  override final public var spriteModel: ImglyKit.SpriteModel {
    get
  }
  @objc override dynamic public init()
  public init(paths: [ImglyKit.PathModel])
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var paths: [ImglyKit._ObjCPathModel] {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKCompositionModel) final public class _ObjCCompositionModel : ObjectiveC.NSObject {
  final public var compositionModel: ImglyKit.CompositionModel {
    get
  }
  @objc override dynamic public init()
  public init(clips: [ImglyKit.VideoClipModel])
  @objc final public var clips: [ImglyKit._ObjCVideoClipModel] {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKEffectFilterModel) final public class _ObjCEffectFilterModel : ObjectiveC.NSObject {
  final public var effectFilterModel: ImglyKit.EffectFilterModel {
    get
  }
  @objc public init(identifier: Swift.String, intensity: Swift.Double)
  @objc override dynamic public init()
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var intensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFocusModel) final public class _ObjCFocusModel : ObjectiveC.NSObject {
  final public var focusModel: ImglyKit.FocusModel {
    get
  }
  @objc public init(normalizedControlPoint1: CoreGraphics.CGPoint, normalizedControlPoint2: CoreGraphics.CGPoint, normalizedBlurRadius: Swift.Double, normalizedFadeWidth: Swift.Double, mode: ImglyKit.FocusMode, blurQuality: ImglyKit.BlurQuality)
  @objc override dynamic public init()
  @objc final public var normalizedControlPoint1: CoreGraphics.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var normalizedControlPoint2: CoreGraphics.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var normalizedBlurRadius: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var normalizedFadeWidth: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var mode: ImglyKit.FocusMode {
    @objc get
    @objc set
  }
  @objc final public var blurQuality: ImglyKit.BlurQuality {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKFrameSpriteModel) final public class _ObjCFrameSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var frameSpriteModel: ImglyKit.FrameSpriteModel {
    get
  }
  override final public var spriteModel: ImglyKit.SpriteModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc public init(frame: ImglyKit.Frame)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var scale: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc final public var alpha: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var ratio: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKOverlayModel) final public class _ObjCOverlayModel : ObjectiveC.NSObject {
  final public var overlayModel: ImglyKit.OverlayModel {
    get
  }
  @objc public init(identifier: Swift.String, blendMode: ImglyKit.BlendMode, intensity: Swift.Double)
  @objc override dynamic public init()
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var blendMode: ImglyKit.BlendMode {
    @objc get
    @objc set
  }
  @objc final public var intensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPathModel) final public class _ObjCPathModel : ImglyKit._ObjCSpriteModel {
  final public var pathModel: ImglyKit.PathModel {
    get
  }
  override final public var spriteModel: ImglyKit.SpriteModel {
    get
  }
  @objc public init(color: UIKit.UIColor, normalizedSize: CoreGraphics.CGFloat, hardness: CoreGraphics.CGFloat, points: [CoreGraphics.CGPoint], eraseFragment: ImglyKit.PaintingFragment?, drawFragment: ImglyKit.PaintingFragment?)
  @objc public init(color: UIKit.UIColor, normalizedSize: CoreGraphics.CGFloat, hardness: CoreGraphics.CGFloat, points: [CoreGraphics.CGPoint])
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var color: UIKit.UIColor {
    @objc get
  }
  @objc final public var normalizedSize: CoreGraphics.CGFloat {
    @objc get
  }
  @objc final public var hardness: CoreGraphics.CGFloat {
    @objc get
  }
  @objc final public var points: [CoreGraphics.CGPoint] {
    @objc get
  }
  @objc final public var eraseFragment: ImglyKit.PaintingFragment? {
    @objc get
    @objc set
  }
  @objc final public var drawFragment: ImglyKit.PaintingFragment? {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditModel) final public class _ObjCPhotoEditModel : ObjectiveC.NSObject {
  final public var photoEditModel: ImglyKit.PhotoEditModel {
    get
  }
  @objc override dynamic public init()
  public init?(serializedData data: Foundation.Data, referenceSize: CoreGraphics.CGSize?, assetCatalog: ImglyKit.AssetCatalog)
  public init?(serializedData data: Foundation.Data, referenceSize: CoreGraphics.CGSize?)
  @objc public init?(serializedData data: Foundation.Data, referenceSize: CoreGraphics.CGSize)
  @objc final public var adjustmentModel: ImglyKit._ObjCAdjustmentModel {
    @objc get
    @objc set
  }
  @objc final public var effectFilterModel: ImglyKit._ObjCEffectFilterModel {
    @objc get
    @objc set
  }
  @objc final public var focusModel: ImglyKit._ObjCFocusModel {
    @objc get
    @objc set
  }
  @objc final public var overlayModel: ImglyKit._ObjCOverlayModel {
    @objc get
    @objc set
  }
  @objc final public var spriteModels: [ImglyKit._ObjCSpriteModel] {
    @objc get
    @objc set
  }
  @objc final public var transformModel: ImglyKit._ObjCTransformModel {
    @objc get
    @objc set
  }
  @objc final public var trimModel: ImglyKit._ObjCTrimModel {
    @objc get
    @objc set
  }
  @objc final public var compositionModel: ImglyKit._ObjCCompositionModel {
    @objc get
    @objc set
  }
  @objc final public var audioModel: ImglyKit._ObjCAudioModel {
    @objc get
    @objc set
  }
  @objc final public var isAutoEnhancementEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSpriteModel) public class _ObjCSpriteModel : ObjectiveC.NSObject {
  public var spriteModel: ImglyKit.SpriteModel {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerSpriteModel) final public class _ObjCStickerSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var stickerSpriteModel: ImglyKit.StickerSpriteModel {
    get
  }
  override final public var spriteModel: ImglyKit.SpriteModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc public init(sticker: ImglyKit.Sticker)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var normalizedSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc final public var normalizedCenter: CoreGraphics.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var rotation: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var verticallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var horizontallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  final public var tintMode: ImglyKit.StickerTintMode? {
    get
    set
  }
  @objc final public var tintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var brightness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var contrast: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var saturation: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var alpha: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignSpriteModel) final public class _ObjCTextDesignSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var textDesignSpriteModel: ImglyKit.TextDesignSpriteModel {
    get
  }
  override final public var spriteModel: ImglyKit.SpriteModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var rotation: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var verticallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var horizontallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var normalizedWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var normalizedCenter: CoreGraphics.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var normalizedPadding: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var tintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var randomizerSeed: Swift.UInt64 {
    @objc get
    @objc set
  }
  @objc final public var isInverted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextSpriteModel) final public class _ObjCTextSpriteModel : ImglyKit._ObjCSpriteModel {
  final public var textSpriteModel: ImglyKit.TextSpriteModel {
    get
  }
  override final public var spriteModel: ImglyKit.SpriteModel {
    get
  }
  @objc override dynamic public init()
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var normalizedWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var normalizedCenter: CoreGraphics.CGPoint {
    @objc get
    @objc set
  }
  @objc final public var rotation: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var verticallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var horizontallyFlipped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var normalizedFontSize: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @objc final public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var fontIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTheme) final public class _ObjCTheme : ObjectiveC.NSObject {
  final public var theme: ImglyKit.Theme {
    get
  }
  @objc public init(backgroundColor: UIKit.UIColor, menuBackgroundColor: UIKit.UIColor, toolbarBackgroundColor: UIKit.UIColor, primaryColor: UIKit.UIColor)
  @objc override dynamic public init()
  @objc final public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var menuBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var toolbarBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var primaryColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc final public var rotationSnapGuideColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc final public var positionSnapGuideColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc final public var boundingBoxSnapGuideColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  public static var dark: ImglyKit.Theme {
    get
  }
  public static var light: ImglyKit.Theme {
    get
  }
  @available(iOS 13.0, *)
  public static var dynamic: ImglyKit.Theme {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTransformModel) final public class _ObjCTransformModel : ObjectiveC.NSObject {
  final public var transformModel: ImglyKit.TransformModel {
    get
  }
  @objc public init(appliedOrientation: ImglyKit.Orientation, normalizedCropRect: CoreGraphics.CGRect, straightenAngle: Swift.Double, imageInsets: UIKit.UIEdgeInsets)
  @objc override dynamic public init()
  @objc final public var appliedOrientation: ImglyKit.Orientation {
    @objc get
    @objc set
  }
  @objc final public var normalizedCropRect: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc final public var straightenAngle: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var imageInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc final public var adjustedStraightenAngle: Swift.Double {
    @objc get
  }
  @objc final public var isGeometryIdentity: Swift.Bool {
    @objc get
  }
  @objc public static var identityOrientation: ImglyKit.Orientation {
    @objc get
  }
  @objc public static var identityNormalizedCropRect: CoreGraphics.CGRect {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTrimModel) final public class _ObjCTrimModel : ObjectiveC.NSObject {
  final public var trimModel: ImglyKit.TrimModel {
    get
  }
  public init(startTime: CoreMedia.CMTime?, endTime: CoreMedia.CMTime?)
  @objc override dynamic public init()
  @objc final public var startTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc final public var endTime: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipModel) final public class _ObjCVideoClipModel : ObjectiveC.NSObject {
  final public var videoClipModel: ImglyKit.VideoClipModel {
    get
  }
  @objc public init(identifier: Swift.String)
  @objc final public var uuid: Foundation.UUID {
    @objc get
  }
  @objc final public var identifier: Swift.String {
    @objc get
    @objc set
  }
  @objc final public var trimModel: ImglyKit._ObjCTrimModel {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init()
}
extension AdjustEditController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension BrushEditController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension CompositionEditController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension FilterEditController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension FocusEditController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension MediaEditViewController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension OverlayEditController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension PhotoEditRenderer {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension PhotoEditToolController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension SpriteContainerView {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension SpriteEditController {
  public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    get
    set
  }
}
extension SpriteViewController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
extension TransformEditController {
  @objc dynamic public var boxedPhotoEditModel: ImglyKit._ObjCPhotoEditModel {
    @objc get
    @objc set
  }
}
public protocol ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKOpenWeatherProvider) public class OpenWeatherProvider : ObjectiveC.NSObject, ImglyKit.WeatherProvider, CoreLocation.CLLocationManagerDelegate {
  @objc final public let apiKey: Swift.String?
  @objc public var updateInterval: Swift.Double
  @objc public init(apiKey: Swift.String?, unit: ImglyKit.TemperatureFormat)
  @objc deinit
  @objc public var temperatureFormat: ImglyKit.TemperatureFormat
  @objc public var temperature: ImglyKit.Temperature? {
    @objc get
  }
  @objc public func updateData()
  @objc public var locationAccessRequestClosure: ((CoreLocation.CLLocationManager) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc override dynamic public init()
}
infix operator =? : AssignmentPrecedence
@objc(PESDKOrientation) public enum Orientation : Swift.Int {
  case normal = 1
  case flipX
  case rotate180
  case flipY
  case transverse
  case rotate90
  case transpose
  case rotate270
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension Orientation : Swift.CustomStringConvertible {
  public var exifValue: Swift.Int32 {
    get
  }
  public var description: Swift.String {
    get
  }
  public init(imageOrientation: UIKit.UIImage.Orientation)
  public func concatenating(_ o2: ImglyKit.Orientation) -> ImglyKit.Orientation
  public func orientation(between o2: ImglyKit.Orientation) -> ImglyKit.Orientation
  public var inversed: ImglyKit.Orientation {
    get
  }
  public func transform(with size: CoreGraphics.CGSize) -> CoreGraphics.CGAffineTransform
  public var isMirrored: Swift.Bool {
    get
  }
  public func calculateOrientationParameters() -> (angle: Swift.Int, flippedHorizontally: Swift.Bool, flippedVertically: Swift.Bool)
}
@objcMembers @objc(PESDKOverlay) open class Overlay : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public var identifier: Swift.String {
    get
  }
  @objc public var url: Foundation.URL? {
    get
  }
  @objc public var thumbnailURL: Foundation.URL? {
    get
  }
  @objc public var displayName: Swift.String {
    get
  }
  @objc public var initialBlendMode: ImglyKit.BlendMode {
    get
  }
  @objc public init(identifier: Swift.String, displayName: Swift.String, url: Foundation.URL?, thumbnailURL: Foundation.URL? = nil, initialBlendMode: ImglyKit.BlendMode)
  @objc public static func overlay(withIdentifier identifier: Swift.String) -> ImglyKit.Overlay?
  @objc public static var none: ImglyKit.Overlay {
    @objc get
  }
  @objc public class var defaultItems: [ImglyKit.Overlay] {
    @objc get
  }
  @objc public static var all: [ImglyKit.Overlay] {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKOverlayButton) open class OverlayButton : ImglyKit.Button {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc open func setImage(_ image: UIKit.UIImage?)
  @objc open class func makeAddButton() -> ImglyKit.OverlayButton
  @objc open class func makeDeleteButton() -> ImglyKit.OverlayButton
  @objc open class func makeFlipButton() -> ImglyKit.OverlayButton
  @objc open class func makeStraightenButton() -> ImglyKit.OverlayButton
  @objc open class func makeToFrontButton() -> ImglyKit.OverlayButton
  @objc open class func makeUndoButton() -> ImglyKit.OverlayButton
  @objc open class func makeRedoButton() -> ImglyKit.OverlayButton
  @objc open class func makeAlignmentButton() -> ImglyKit.OverlayButton
  @objc open class func makeInvertButton() -> ImglyKit.OverlayButton
  @objc open class func makeDisableInvertButton() -> ImglyKit.OverlayButton
  @objc open class func makePlayButton() -> ImglyKit.OverlayButton
  @objc open class func makePauseButton() -> ImglyKit.OverlayButton
  @objc open class func makeSoundOnButton() -> ImglyKit.OverlayButton
  @objc open class func makeSoundOffButton() -> ImglyKit.OverlayButton
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKOverlayEditController) open class OverlayEditController : ImglyKit.ViewController {
  final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>
  @objc final public let blendModeContainerView: ImglyKit.GradientView
  @objc final public let blendModeCollectionView: UIKit.UICollectionView
  open var blendModes: [ImglyKit.BlendMode] {
    get
    set
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var overlay: ImglyKit.Overlay? {
    @objc get
    @objc set
  }
  @objc weak open var delegate: ImglyKit.OverlayEditControllerDelegate?
  @objc open var showOverlayIntensitySlider: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var showBlendModeCollectionView: Swift.Bool
  @objc open var initialOverlayIntensity: CoreGraphics.CGFloat
  @objc required convenience dynamic public init()
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open func selectBlendMode(_ blendMode: ImglyKit.BlendMode, animated: Swift.Bool)
  @objc open func selectNextBlendMode(animated: Swift.Bool)
  @objc open func showControls(animated: Swift.Bool)
  @objc open func hideControls(animated: Swift.Bool)
  @objc open func showBlendModes(animated: Swift.Bool)
  @objc open func hideBlendModes(animated: Swift.Bool)
  @objc open var isBlendModeViewHidden: Swift.Bool {
    get
  }
  @objc open var blendModeHideTimeInterval: Foundation.TimeInterval
  @objc open func setOverlay(_ overlay: ImglyKit.Overlay?, animated: Swift.Bool)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func updateViewConstraints()
  @objc public static var collectionViewCellType: ImglyKit.BlendModeCollectionViewCell.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension OverlayEditController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension OverlayEditController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
extension OverlayEditController : ImglyKit.SliderEditControllerDelegate {
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
extension OverlayEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
extension OverlayEditController : ImglyKit.PhotoEditModelSettable {
}
@objc(PESDKOverlayEditControllerDelegate) public protocol OverlayEditControllerDelegate : AnyObject {
  @objc func overlayEditControllerDidChangePhotoEditModel(_ overlayEditController: ImglyKit.OverlayEditController)
  @objc func overlayEditControllerTargetScrollView(_ overlayEditController: ImglyKit.OverlayEditController) -> UIKit.UIScrollView?
  @objc func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, willDisplay blendMode: ImglyKit.BlendMode, in cell: ImglyKit.BlendModeCollectionViewCell)
  @objc func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKOverlayFilter) open class OverlayFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputOverlayImage: CoreImage.CIImage?
  @objc open var inputIntensity: Foundation.NSNumber?
  @objc open var inputBlendMode: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKOverlayLabel) open class OverlayLabel : ImglyKit.Label {
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers @objc(PESDKOverlayListSectionController) open class OverlayListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func selectItem(at index: Swift.Int)
  @objc override open func deselectItem(at index: Swift.Int)
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKOverlayMenuItem) open class OverlayMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let overlay: ImglyKit.Overlay
  @objc final public let title: Swift.String
  @objc final public let thumbnailURL: Foundation.URL?
  @objc final public let thumbnail: UIKit.UIImage?
  @objc convenience public init(overlay: ImglyKit.Overlay, thumbnail: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public struct OverlayModel : Swift.Equatable {
  public var identifier: Swift.String
  public var blendMode: ImglyKit.BlendMode
  public var intensity: Swift.Double
  public init(identifier: Swift.String, blendMode: ImglyKit.BlendMode, intensity: Swift.Double)
  public init()
  public static func == (a: ImglyKit.OverlayModel, b: ImglyKit.OverlayModel) -> Swift.Bool
}
extension OverlayModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKOverlayToolController) open class OverlayToolController : ImglyKit.MenuToolController, ImglyKit.OverlayEditControllerDelegate, ImglyKit.BrandedTool {
  @objc final public let overlayEditController: ImglyKit.OverlayEditController
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(overlayEditController: ImglyKit.OverlayEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc public func overlayEditControllerDidChangePhotoEditModel(_ overlayEditController: ImglyKit.OverlayEditController)
  @objc public func overlayEditControllerTargetScrollView(_ overlayEditController: ImglyKit.OverlayEditController) -> UIKit.UIScrollView?
  @objc public func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, willDisplay blendMode: ImglyKit.BlendMode, in cell: ImglyKit.BlendModeCollectionViewCell)
  @objc public func overlayEditController(_ overlayEditController: ImglyKit.OverlayEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension OverlayToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objcMembers @objc(PESDKOverlayToolControllerOptions) open class OverlayToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc final public let overlayIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let showOverlayIntensitySlider: Swift.Bool
  @objc final public let showBlendModeCollectionView: Swift.Bool
  @objc final public let overlaySelectedClosure: ((ImglyKit.Overlay) -> Swift.Void)?
  @objc final public let blendModeSelectedClosure: ((ImglyKit.BlendMode) -> Swift.Void)?
  @objc final public let overlayIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Overlay) -> Swift.Void)?
  @objc final public let overlayCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Overlay) -> Swift.Void)?
  @objc final public let initialOverlayIntensity: CoreGraphics.CGFloat
  final public let allowedBlendModes: [ImglyKit.BlendMode]
  @objc final public let blendModeCollectionViewConfigurationClosure: ((UIKit.UICollectionView) -> Swift.Void)?
  @objc final public let blendModeCollectionViewCellConfigurationClosure: ((ImglyKit.BlendModeCollectionViewCell, ImglyKit.BlendMode) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.OverlayToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKOverlayToolControllerOptionsBuilder) open class OverlayToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayIntensitySliderConfigurationClosure: ((ImglyKit.Slider) -> Swift.Void)?
  @objc open var overlayIntensitySliderContainerConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var showOverlayIntensitySlider: Swift.Bool
  @objc open var overlaySelectedClosure: ((ImglyKit.Overlay) -> Swift.Void)?
  @objc open var blendModeSelectedClosure: ((ImglyKit.BlendMode) -> Swift.Void)?
  @objc open var overlayIntensityChangedClosure: ((ImglyKit.Slider, ImglyKit.Overlay) -> Swift.Void)?
  @objc open var showBlendModeCollectionView: Swift.Bool
  @objc open var overlayCellConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Overlay) -> Swift.Void)?
  @objc open var initialOverlayIntensity: CoreGraphics.CGFloat
  open var allowedBlendModes: [ImglyKit.BlendMode]
  @objc open var blendModeCollectionViewConfigurationClosure: ((UIKit.UICollectionView) -> Swift.Void)?
  @objc open var blendModeCollectionViewCellConfigurationClosure: ((ImglyKit.BlendModeCollectionViewCell, ImglyKit.BlendMode) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.OverlayToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class PESDK : ImglyKit.IMGLY {
  @objc override final public class func crashIfNeeded() throws
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKPainting) open class Painting : ObjectiveC.NSObject {
  @objc weak open var canvas: ImglyKit.CanvasView?
  @objc final public let dimensions: CoreGraphics.CGSize
  @objc open var bounds: CoreGraphics.CGRect {
    @objc get
  }
  @objc open var context: OpenGLES.EAGLContext {
    @objc get
  }
  @objc open var quadVAO: OpenGLES.GLuint {
    @objc get
  }
  @objc open var brushTexture: ImglyKit.Texture?
  @objc required public init(size: CoreGraphics.CGSize)
  @objc deinit
  @objc open func clear()
  @objc open func preloadPaintTexture()
  @objc(imageWithSize:backgroundColor:) open func image(with size: CoreGraphics.CGSize, backgroundColor color: UIKit.UIColor) -> UIKit.UIImage?
  @objc(ciImageWithSize:backgroundColor:) open func ciImage(with size: CoreGraphics.CGSize, backgroundColor color: UIKit.UIColor) -> CoreImage.CIImage?
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKPaintingFragment) open class PaintingFragment : ObjectiveC.NSObject {
  @objc final public let bounds: CoreGraphics.CGRect
  @objc final public let dataLength: Swift.Int
  @objc open var data: Foundation.Data {
    @objc get
  }
  @objc public init(data: Foundation.Data, bounds: CoreGraphics.CGRect)
  @objc deinit
  @objc open func apply(in painting: ImglyKit.Painting)
  @objc override dynamic public init()
}
public struct PathModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public let color: UIKit.UIColor
  public let normalizedSize: CoreGraphics.CGFloat
  public let hardness: CoreGraphics.CGFloat
  public let points: [CoreGraphics.CGPoint]
  public var eraseFragment: ImglyKit.PaintingFragment?
  public var drawFragment: ImglyKit.PaintingFragment?
  public init(color: UIKit.UIColor, normalizedSize: CoreGraphics.CGFloat, hardness: CoreGraphics.CGFloat, points: [CoreGraphics.CGPoint], eraseFragment: ImglyKit.PaintingFragment?, drawFragment: ImglyKit.PaintingFragment?)
  public init(color: UIKit.UIColor, normalizedSize: CoreGraphics.CGFloat, hardness: CoreGraphics.CGFloat, points: [CoreGraphics.CGPoint])
  public static func == (a: ImglyKit.PathModel, b: ImglyKit.PathModel) -> Swift.Bool
}
@objcMembers @objc(PESDKPhoto) final public class Photo : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL?
  @objc final public let data: Foundation.Data?
  @objc final public let image: UIKit.UIImage?
  @objc final public var uiImage: UIKit.UIImage? {
    @objc get
  }
  @objc final public var size: CoreGraphics.CGSize {
    @objc get
  }
  @objc(photoFromPhotoRepresentation:) public static func from(photoRepresentation: ImglyKit.PhotoRepresentation) -> ImglyKit.Photo?
  @objc(initWithURL:) public init(url: Foundation.URL)
  @objc public init(data: Foundation.Data)
  @objc public init(image: UIKit.UIImage)
  @objc deinit
  @objc override dynamic public init()
}
extension Photo : ImglyKit.PhotoRepresentation {
}
public enum PhotoEditMenuItem {
  case tool(ImglyKit.ToolMenuItem)
  case action(ImglyKit.ActionMenuItem)
  public static var defaultItems: [ImglyKit.PhotoEditMenuItem] {
    get
  }
  public var diffIdentifier: Swift.String {
    get
  }
}
@objcMembers @objc(PESDKPhotoEditMenuItem) final public class _ObjCPhotoEditMenuItem : ObjectiveC.NSObject {
  @objc final public let toolMenuItem: ImglyKit.ToolMenuItem?
  @objc final public let actionMenuItem: ImglyKit.ActionMenuItem?
  final public var photoEditMenuItem: ImglyKit.PhotoEditMenuItem {
    get
  }
  @objc public static var defaultItems: [ImglyKit._ObjCPhotoEditMenuItem] {
    @objc get
  }
  @objc public init?(toolMenuItem: ImglyKit.ToolMenuItem?)
  @objc public init?(actionMenuItem: ImglyKit.ActionMenuItem?)
  @objc override dynamic public init()
  @objc deinit
}
extension PhotoEditModel {
  public func serialized(with photo: ImglyKit.Photo, includeImageData: Swift.Bool) -> Foundation.Data?
  public func serialized(with photo: ImglyKit.Photo, includeImageData: Swift.Bool, assetCatalog: ImglyKit.AssetCatalog, assetManager: ImglyKit.AssetManager) -> Foundation.Data?
}
public struct PhotoEditModel : Swift.Equatable {
  public var adjustmentModel: ImglyKit.AdjustmentModel
  public var effectFilterModel: ImglyKit.EffectFilterModel
  public var focusModel: ImglyKit.FocusModel
  public var overlayModel: ImglyKit.OverlayModel
  public var spriteModels: [ImglyKit.SpriteModel]
  public var transformModel: ImglyKit.TransformModel
  public var trimModel: ImglyKit.TrimModel
  public var audioModel: ImglyKit.AudioModel
  public var isAutoEnhancementEnabled: Swift.Bool
  public init()
  public init?(serializedData data: Foundation.Data, referenceSize: CoreGraphics.CGSize?, assetCatalog: ImglyKit.AssetCatalog)
  public init?(serializedData data: Foundation.Data, referenceSize: CoreGraphics.CGSize?)
  public init?(serializedData data: Foundation.Data, referenceSize: CoreGraphics.CGSize)
  public func spriteModel(with uuid: Foundation.UUID) -> (Swift.Int, ImglyKit.SpriteModel)?
}
public func == (lhs: ImglyKit.PhotoEditModel, rhs: ImglyKit.PhotoEditModel) -> Swift.Bool
extension PhotoEditModel : ImglyKit.ObjectiveCBridgeable {
}
public protocol PhotoEditModelSettable : AnyObject {
  var photoEditModel: ImglyKit.PhotoEditModel { get set }
  func performChanges(_ changes: (inout ImglyKit.PhotoEditModel) -> Swift.Void)
}
extension PhotoEditModelSettable {
  public func performChanges(_ changes: (inout ImglyKit.PhotoEditModel) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditPreviewController) open class PhotoEditPreviewController : ImglyKit.MediaEditPreviewController {
  @objc final public let photo: ImglyKit.Photo
  required convenience public init(photoAsset: ImglyKit.Photo, photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @objc override open func loadBaseImage(_ completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc override open func updateRenderer()
  @objc deinit
  override public init(renderer: ImglyKit.PhotoEditRenderer, photoEditModel: ImglyKit.PhotoEditModel)
}
extension PhotoEditPreviewController {
  @objc convenience dynamic public init(photoAsset: ImglyKit.Photo, photoEditModel: ImglyKit._ObjCPhotoEditModel)
}
extension PhotoEditRenderer {
  @objc(generateOutputImageDataWithFormat:compressionQuality:metadataSourcePhoto:completionHandler:) dynamic open func generateOutputImageData(withFormat imageFormat: ImglyKit.ImageFileFormat, compressionQuality: CoreGraphics.CGFloat, metadataSourcePhoto: ImglyKit.Photo?, completionHandler: @escaping (Foundation.Data?, CoreGraphics.CGFloat, CoreGraphics.CGFloat) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKPhotoEditRenderer) open class PhotoEditRenderer : ObjectiveC.NSObject {
  required public init(productType: ImglyKit.LicenseProduct)
  @objc(initWithProductType:) convenience public init(_objCProductType: ImglyKit._ObjCLicenseProduct)
  @objc open var originalImage: CoreImage.CIImage? {
    @objc get
    @objc set
  }
  open var currentTime: CoreMedia.CMTime? {
    get
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var renderMode: ImglyKit.PESDKRenderMode {
    @objc get
    @objc set
  }
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  @objc public var renderingQueue: Dispatch.DispatchQueue {
    @objc get
  }
  @objc open var outputImage: CoreImage.CIImage {
    @objc get
  }
  @objc public func watermarkedImage(from inputImage: CoreImage.CIImage) -> CoreImage.CIImage
  @objc open var outputImageSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc open func invalidateCache()
  @objc public var generatingCIContext: CoreImage.CIContext {
    @objc get
  }
  @objc open func newOutputImage() -> CoreGraphics.CGImage
  @objc open func renderOutputImage(into pixelBuffer: CoreVideo.CVPixelBuffer)
  @objc(createOutputImageWithCompletion:) open func createOutputImage(with completion: @escaping (CoreGraphics.CGImage) -> Swift.Void)
  @discardableResult
  @objc(drawOutputImageInContext:toRect:) open func drawOutputImage(in context: OpenGLES.EAGLContext, to rect: CoreGraphics.CGRect) -> CoreImage.CIImage
  open func drawOutputImage(in context: OpenGLES.EAGLContext, to rect: CoreGraphics.CGRect, targetSize: CoreGraphics.CGSize? = nil, transform: CoreGraphics.CGAffineTransform = CGAffineTransform.identity, backgroundColor: UIKit.UIColor? = nil, backgroundImage: CoreImage.CIImage? = nil, nearest: Swift.Bool = false, forceCropHack: Swift.Bool = false) -> CoreImage.CIImage
  @objcMembers @objc(PESDKDrawReturnValue) open class DrawReturnValue : ObjectiveC.NSObject {
    @objc final public let commandBuffer: Metal.MTLCommandBuffer
    @objc final public let colorSpace: CoreGraphics.CGColorSpace?
    @objc public init(commandBuffer: Metal.MTLCommandBuffer, colorSpace: CoreGraphics.CGColorSpace?)
    @objc deinit
    @objc override dynamic public init()
  }
  @objc @discardableResult
  open func drawOutputImage(for device: Metal.MTLDevice, in drawable: QuartzCore.CAMetalDrawable, to rect: CoreGraphics.CGRect, commandQueue: Metal.MTLCommandQueue) -> ImglyKit.PhotoEditRenderer.DrawReturnValue?
  @discardableResult
  open func drawOutputImage(for device: Metal.MTLDevice, in drawable: QuartzCore.CAMetalDrawable, to rect: CoreGraphics.CGRect, commandQueue: Metal.MTLCommandQueue, targetSize: CoreGraphics.CGSize? = nil, transform: CoreGraphics.CGAffineTransform = CGAffineTransform.identity, backgroundColor: UIKit.UIColor? = nil, backgroundImage: CoreImage.CIImage? = nil, nearest: Swift.Bool = false, presentAndCommit: Swift.Bool = true, label: Swift.String? = nil) -> ImglyKit.PhotoEditRenderer.DrawReturnValue?
  @objc deinit
}
extension PhotoEditRenderer : ImglyKit.PhotoEditModelSettable {
}
extension PhotoEditToolController : ImglyKit.VideoPreviewControlling {
  @objc dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
  open var videoPreviewControllingTarget: ImglyKit.VideoPreviewControlling? {
    get
  }
}
@objcMembers @objc(PESDKPhotoEditToolController) open class PhotoEditToolController : ImglyKit.ViewController {
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  open var subscribers: [ImglyKit.WeakContainer<ImglyKit.EventSubscriber>]
  @objc open var toolbarItem: ImglyKit.ToolbarItem {
    @objc get
    @objc set
  }
  @objc open func configureToolbarItem()
  @objc open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc open func discard(_ sender: ImglyKit.ToolbarItem)
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  public var uneditedPhotoEditModel: ImglyKit.PhotoEditModel {
    get
  }
  open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc final public let configuration: ImglyKit.Configuration
  @objc weak open var delegate: ImglyKit.PhotoEditToolControllerDelegate?
  @objc open var undoController: ImglyKit.UndoController?
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  open var userInterfaceState: ImglyKit.UserInterfaceState {
    get
    set
  }
  @objc open func updateUserInterfaceState()
  @objc override dynamic open func willBecomeActiveTool()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override dynamic open func didResignActiveTool()
  @objc open func setupForZoomAndPan()
  @objc open func resetForZoomAndPan()
  @objc open var isModelChangeLocal: Swift.Bool {
    get
  }
  @objc open var wantsDefaultPreviewView: Swift.Bool {
    @objc get
  }
  @objc open var preferredRenderMode: ImglyKit.PESDKRenderMode {
    @objc get
  }
  @objc open var preferredPreviewBackgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc open var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc open var preferredDefaultPreviewViewScale: CoreGraphics.CGFloat {
    @objc get
  }
  open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension PhotoEditToolController : ImglyKit.EventSubscribable {
}
extension PhotoEditToolController : ImglyKit.PhotoEditModelSettable {
}
extension PhotoEditToolController : ImglyKit.ToolbarItemProviding {
}
extension PhotoEditToolController : ImglyKit.PhotoPreviewControlling {
}
@objc(PESDKPhotoEditToolControllerDelegate) public protocol PhotoEditToolControllerDelegate {
  @objc func photoEditToolControllerViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditViewController?
  @objc func photoEditToolControllerPreviewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.MediaEditPreviewController?
  @objc func photoEditToolControllerBaseImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIImage?
  @objc func photoEditToolControllerBaseCIImage(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> CoreImage.CIImage?
  @objc func photoEditToolControllerPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIView?
  @objc func photoEditToolControllerPreviewScrollView(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> UIKit.UIScrollView?
  @objc func photoEditToolControllerSpriteViewController(_ photoEditToolController: ImglyKit.PhotoEditToolController) -> ImglyKit.SpriteViewController?
  @objc func photoEditToolController(_ photoEditToolController: ImglyKit.PhotoEditToolController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func photoEditToolControllerDidChangeWantsDefaultPreviewView(_ photoEditToolController: ImglyKit.PhotoEditToolController)
}
@objcMembers @objc(PESDKPhotoEditViewController) open class PhotoEditViewController : ImglyKit.MediaEditViewController, ImglyKit.BrandedView {
  final public let branding: ImglyKit.Branding?
  @objc weak open var delegate: ImglyKit.PhotoEditViewControllerDelegate?
  @objc override public var options: ImglyKit.MediaEditViewControllerOptions {
    @objc get
  }
  required public init(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  public static func makePhotoEditViewController(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel()) -> ImglyKit.PhotoEditViewController
  @objc override open func renderHighResolutionVariant()
  @objc open func serializedSettings(withImageData includeImageData: Swift.Bool) -> Foundation.Data?
  @objc override open func didCancel()
  @objc override open func willPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc override open func didPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc override open func willDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc override open func didDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc deinit
  override public init(mediaEditPreviewController: ImglyKit.MediaEditPreviewController, configuration: ImglyKit.Configuration = super, menuItems: [ImglyKit.PhotoEditMenuItem] = super, photoEditModel: ImglyKit.PhotoEditModel = super)
}
@objc(PESDKPhotoEditViewControllerDelegate) public protocol PhotoEditViewControllerDelegate : ImglyKit.MediaEditViewControllerDelegate {
  @objc(photoEditViewController:didSaveImage:imageAsData:) func photoEditViewController(_ photoEditViewController: ImglyKit.PhotoEditViewController, didSave image: UIKit.UIImage, and data: Foundation.Data)
  @objc func photoEditViewControllerDidFailToGeneratePhoto(_ photoEditViewController: ImglyKit.PhotoEditViewController)
  @objc func photoEditViewControllerDidCancel(_ photoEditViewController: ImglyKit.PhotoEditViewController)
}
extension PhotoEditViewController {
  @objc convenience dynamic public init(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration)
  @objc convenience dynamic public init(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel)
  @objc public static func photoEditViewController(photoAsset: ImglyKit.Photo, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel) -> ImglyKit.PhotoEditViewController
}
@objcMembers @objc(PESDKPhotoEditViewControllerOptions) open class PhotoEditViewControllerOptions : ImglyKit.MediaEditViewControllerOptions {
  @objc final public let outputImageFileFormat: ImglyKit.ImageFileFormat
  @objc public var outputImageFileFormatUTI: CoreFoundation.CFString {
    @objc get
  }
  @objc final public let compressionQuality: CoreGraphics.CGFloat
  @objc convenience dynamic public init()
  @objc public init(photoEditBuilder: ImglyKit.PhotoEditViewControllerOptionsBuilder)
  @objc override public init(builder: ImglyKit.MediaEditViewControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKPhotoEditViewControllerOptionsBuilder) open class PhotoEditViewControllerOptionsBuilder : ImglyKit.MediaEditViewControllerOptionsBuilder {
  @objc open var outputImageFileFormat: ImglyKit.ImageFileFormat
  @objc open var compressionQuality: CoreGraphics.CGFloat
  @objc override dynamic public init()
  @objc public init(photoEditOptions: ImglyKit.PhotoEditViewControllerOptions)
  @objc override public init(options: ImglyKit.MediaEditViewControllerOptions)
  @objc deinit
}
public protocol PhotoPreviewControlling {
  var wantsDefaultPreviewView: Swift.Bool { get }
  var preferredRenderMode: ImglyKit.PESDKRenderMode { get }
  var preferredPreviewBackgroundColor: UIKit.UIColor? { get }
  var preferredPreviewViewInsets: UIKit.UIEdgeInsets { get }
  var preferredDefaultPreviewViewScale: CoreGraphics.CGFloat { get }
  var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? { get }
}
extension PhotoPreviewControlling {
  public var wantsDefaultPreviewView: Swift.Bool {
    get
  }
  public var preferredRenderMode: ImglyKit.PESDKRenderMode {
    get
  }
  public var preferredPreviewBackgroundColor: UIKit.UIColor? {
    get
  }
  public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    get
  }
  public var preferredDefaultPreviewViewScale: CoreGraphics.CGFloat {
    get
  }
  public var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
}
@objc(PESDKPhotoRepresentation) public protocol PhotoRepresentation {
  @objc var url: Foundation.URL? { get }
  @objc var data: Foundation.Data? { get }
  @objc var image: UIKit.UIImage? { get }
  @objc var uiImage: UIKit.UIImage? { get }
  @objc var size: CoreGraphics.CGSize { get }
  @objc init(data: Foundation.Data)
  @objc(initWithURL:) init(url: Foundation.URL)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKPrimaryLabel) open class PrimaryLabel : ImglyKit.Label {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc(PESDKProgressView) public protocol ProgressView {
  @objc func show(withMessage message: Swift.String)
  @objc func hide()
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKProxyZoomController) open class ProxyZoomController : ImglyKit.ViewController {
  @objc open var proxyScrollView: UIKit.UIScrollView?
  @objc open var proxyContentView: UIKit.UIView?
  @objc weak open var delegate: ImglyKit.ProxyZoomControllerDelegate?
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open func setupProxyScrolling()
  @objc open func resetProxyScrolling()
  @objc deinit
}
extension ProxyZoomController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
  @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
@objc(PESDKProxyZoomControllerDelegate) public protocol ProxyZoomControllerDelegate {
  @objc func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@objc(PESDKBlurQuality) public enum BlurQuality : Swift.Int {
  case low
  case high
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKRadialFocusFilter) open class RadialFocusFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputNormalizedControlPoint1: Foundation.NSValue?
  @objc open var inputNormalizedControlPoint2: Foundation.NSValue?
  @objc open var inputRadius: Foundation.NSNumber?
  @objc open var inputFadeWidth: Foundation.NSNumber?
  @objc open var inputBlurQuality: Foundation.NSNumber?
  @objc override dynamic open func setDefaults()
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum RecordingMode : Swift.Int {
  case photo
  case video
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKRoundGenerator) open class RoundGenerator : ImglyKit.StampGenerator {
  @objc open var hardness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc(renderStampInContext:) override open func renderStamp(in context: CoreGraphics.CGContext)
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKScalePickerDelegate) public protocol ScalePickerDelegate : AnyObject {
  @objc(scalePicker:didChangeValue:) func didChange(value: CoreGraphics.CGFloat, on scalePicker: ImglyKit.ScalePicker)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKScalePicker) open class ScalePicker : UIKit.UIView {
  @objc open var currentValue: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var minValue: Swift.Int {
    @objc get
    @objc set
  }
  @objc open var maxValue: Swift.Int {
    @objc get
    @objc set
  }
  @objc dynamic open var tickSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc dynamic open var mainTickSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc dynamic open var spaceBetweenTicks: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc dynamic open var tickColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc dynamic open var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var valueLabelBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc weak open var delegate: ImglyKit.ScalePickerDelegate?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc open func scroll(toValue value: CoreGraphics.CGFloat)
  @objc override dynamic open func accessibilityIncrement()
  @objc override dynamic open func accessibilityDecrement()
  @objc deinit
}
extension ScalePicker : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
}
@_hasMissingDesignatedInitializers public class Serializer {
  public static func serialize(_ model: ImglyKit.PhotoEditModel, with photo: ImglyKit.PhotoRepresentation, includeImageData: Swift.Bool) -> Foundation.Data?
  public static func serialize(_ model: ImglyKit.PhotoEditModel, with photo: ImglyKit.PhotoRepresentation, includeImageData: Swift.Bool, assetCatalog: ImglyKit.AssetCatalog, assetManager: ImglyKit.AssetManager) -> Foundation.Data?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSharpnessFilter) open class SharpnessFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputSharpness: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objcMembers @objc(PESDKSlider) open class Slider : UIKit.UIControl {
  @IBInspectable @objc dynamic open var thumbTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @IBInspectable @objc dynamic open var thumbBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @IBInspectable @objc dynamic open var filledTrackColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @IBInspectable @objc dynamic open var unfilledTrackColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc dynamic open var trackHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc dynamic open var trackCornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc dynamic open var thumbSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var minimumValue: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var maximumValue: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var neutralValue: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public let panGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc @IBInspectable open var value: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override dynamic open var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func accessibilityIncrement()
  @objc override dynamic open func accessibilityDecrement()
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func tintColorDidChange()
  open func trackRects(for bounds: CoreGraphics.CGRect) -> (CoreGraphics.CGRect, CoreGraphics.CGRect)
  @objc open func thumbRect(for bounds: CoreGraphics.CGRect, value: CoreGraphics.CGFloat) -> CoreGraphics.CGRect
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc open var thumbView: UIKit.UIImageView?
  @objc open var leftUnfilledTrackView: UIKit.UIView?
  @objc open var rightUnfilledTrackView: UIKit.UIView?
  @objc open var filledTrackView: UIKit.UIView?
  @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc open func beginTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  @objc open func continueTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc open func endTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc deinit
}
@objcMembers open class SliderContainerController<SliderType, CVC> : ImglyKit.ViewController where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController {
  weak open var delegate: ImglyKit.SliderContainerControllerDelegate?
  final public let contentViewController: CVC?
  @objc open var sliderContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  open var slider: SliderType {
    get
  }
  @objc open var isSliderHidden: Swift.Bool {
    get
  }
  @objc required convenience dynamic public init()
  public init(contentViewController: CVC?)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func updateViewConstraints()
  @objc open func hideSlider(animated: Swift.Bool)
  @objc open func showSlider(animated: Swift.Bool)
  @objc open func toggleSlider(animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
public protocol SliderContainerControllerDelegate : AnyObject {
  func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  func sliderContainerControllerDidSlide<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  func sliderContainerControllerDidEndSliding<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
}
@objcMembers open class SliderEditController<SliderType> : ImglyKit.ViewController, ImglyKit.ProxyZoomControllerDelegate, ImglyKit.SliderContainerControllerDelegate where SliderType : ImglyKit.Slider {
  weak open var delegate: ImglyKit.SliderEditControllerDelegate?
  @objc final public let proxyZoomController: ImglyKit.ProxyZoomController?
  final public let sliderContainerController: ImglyKit.SliderContainerController<SliderType, ImglyKit.ProxyZoomController>
  @objc open var sliderContainerView: UIKit.UIView {
    @objc get
  }
  open var slider: SliderType {
    get
  }
  @objc open var isSliderHidden: Swift.Bool {
    @objc get
  }
  @objc required convenience dynamic public init()
  @objc public init(proxyZoomController: ImglyKit.ProxyZoomController?)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc open func hideSlider(animated: Swift.Bool)
  @objc open func showSlider(animated: Swift.Bool)
  @objc open func toggleSlider(animated: Swift.Bool)
  @objc open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  open func sliderContainerController<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  open func sliderContainerControllerDidSlide<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  open func sliderContainerControllerDidEndSliding<SliderType, CVC>(_ sliderContainerController: ImglyKit.SliderContainerController<SliderType, CVC>) where SliderType : ImglyKit.Slider, CVC : UIKit.UIViewController
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
public protocol SliderEditControllerDelegate : AnyObject {
  func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider
  func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
  func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSliderTooltip) open class SliderTooltip : UIKit.UIView {
  @objc open var tooltipColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var attributedString: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKMultiImageSticker) open class MultiImageSticker : ImglyKit.Sticker {
  @objc final public let stickers: [ImglyKit.Sticker]
  @objc public init(identifier: Swift.String, imageURL: Foundation.URL?, stickers: [ImglyKit.Sticker])
  @objc deinit
  @objc override public init(imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, tintMode: ImglyKit.StickerTintMode, identifier: Swift.String)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSmartSticker) open class SmartSticker : ImglyKit.Sticker {
  @objc public class var defaultItems: [ImglyKit.Sticker] {
    @objc get
  }
  @objc override public init(imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, tintMode: ImglyKit.StickerTintMode, identifier: Swift.String)
  @objc deinit
}
@objc(PESDKTemperatureFormat) public enum TemperatureFormat : Swift.Int {
  case fahrenheit
  case celsius
  case kelvin
  @available(iOS 10.0, *)
  case locale
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(PESDKTemperatureUnit) public enum TemperatureUnit : Swift.Int {
  case fahrenheit
  case celsius
  case kelvin
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTemperature) public class Temperature : ObjectiveC.NSObject {
  @objc final public let value: Swift.Double
  @objc final public let unit: ImglyKit.TemperatureUnit
  @objc public init(value: Swift.Double, unit: ImglyKit.TemperatureUnit)
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKWeatherProvider) public protocol WeatherProvider : AnyObject {
  @objc var temperatureFormat: ImglyKit.TemperatureFormat { get }
  @objc var temperature: ImglyKit.Temperature? { get }
  @objc func updateData()
}
@objc(PESDKSnapGuide) public enum SnapGuide : Swift.Int {
  case horizontalLine
  case verticalLine
  case rectangle
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSnapGuideView) open class SnapGuideView : UIKit.UIView {
  @objc open var guideMode: ImglyKit.SnapGuide
  @objc dynamic open var guideColor: UIKit.UIColor
  @objc dynamic open var lineWidth: CoreGraphics.CGFloat
  @objc dynamic open var lineDash: [CoreGraphics.CGFloat]
  @objc open var isSnapped: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var didSnapHandler: (() -> Swift.Void)?
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSnappingOptions) open class SnappingOptions : ObjectiveC.NSObject {
  @objc final public let snappingEnabled: Swift.Bool
  @objc final public let rotationSnappingEnabled: Swift.Bool
  @objc final public let rotationSnappingThreshold: CoreGraphics.CGFloat
  @objc final public let positionSnappingEnabled: Swift.Bool
  @objc final public let positionSnappingThreshold: CoreGraphics.CGFloat
  @objc final public let snapToAngles: [Swift.Int]
  @objc final public let snapToHorizontalCenterLine: Swift.Bool
  @objc final public let snapToVerticalCenterLine: Swift.Bool
  final public let snapToLeft: CoreGraphics.CGFloat?
  final public let snapToRight: CoreGraphics.CGFloat?
  final public let snapToTop: CoreGraphics.CGFloat?
  final public let snapToBottom: CoreGraphics.CGFloat?
  @objc convenience override dynamic public init()
  @objc public init(builder: ImglyKit.SnappingOptionsBuilder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSnappingOptionsOptionsBuilder) open class SnappingOptionsBuilder : ObjectiveC.NSObject {
  @objc open var snappingEnabled: Swift.Bool
  @objc open var rotationSnappingEnabled: Swift.Bool
  @objc open var rotationSnappingThreshold: CoreGraphics.CGFloat
  @objc open var positionSnappingEnabled: Swift.Bool
  @objc open var positionSnappingThreshold: CoreGraphics.CGFloat
  @objc open var snapToAngles: [Swift.Int]
  @objc open var snapToHorizontalCenterLine: Swift.Bool
  @objc open var snapToVerticalCenterLine: Swift.Bool
  open var snapToLeft: CoreGraphics.CGFloat?
  open var snapToRight: CoreGraphics.CGFloat?
  open var snapToTop: CoreGraphics.CGFloat?
  open var snapToBottom: CoreGraphics.CGFloat?
  @objc override dynamic public init()
  @objc deinit
}
extension SnappingOptions {
  @objc(snapToLeft) dynamic open var _objCSnapToLeft: Foundation.NSNumber? {
    @objc get
  }
  @objc(snapToRight) dynamic open var _objCSnapToRight: Foundation.NSNumber? {
    @objc get
  }
  @objc(snapToTop) dynamic open var _objCSnapToTop: Foundation.NSNumber? {
    @objc get
  }
  @objc(snapToBottom) dynamic open var _objCSnapToBottom: Foundation.NSNumber? {
    @objc get
  }
}
extension SnappingOptionsBuilder {
  @objc(snapToLeft) dynamic open var _objCSnapToLeft: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc(snapToRight) dynamic open var _objCSnapToRight: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc(snapToTop) dynamic open var _objCSnapToTop: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc(snapToBottom) dynamic open var _objCSnapToBottom: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSpriteAdjustmentsFilter) open class SpriteAdjustmentsFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputBrightness: Foundation.NSNumber?
  @objc open var inputContrast: Foundation.NSNumber?
  @objc open var inputSaturation: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension NSNotification.Name {
  public static let SpriteContainerViewDidUpdateLayout: Foundation.Notification.Name
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSpriteContainerView) open class SpriteContainerView : UIKit.UIView {
  @objc open var referenceSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc open var currentSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  open var sprites: [ImglyKit.SpriteView] {
    get
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var imageToViewScaleFactor: CoreGraphics.CGFloat {
    @objc get
  }
  @objc override dynamic open func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SpriteContainerView : ImglyKit.PhotoEditModelSettable {
}
open class SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView> : ImglyKit.ViewController, ImglyKit.ProxyZoomControllerDelegate where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView {
  weak open var delegate: ImglyKit.SpriteEditControllerDelegate?
  @objc final public let proxyZoomController: ImglyKit.ProxyZoomController?
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  open var spriteSelectionView: SpriteSelectionView {
    get
  }
  open var spriteGestureController: GestureController? {
    get
  }
  @objc required dynamic public init()
  @objc public init(proxyZoomController: ImglyKit.ProxyZoomController?)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc public func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc public func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc public func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc public func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc public func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  public func spriteGestureController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerDidBeginGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerDidChangeGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerDidEndGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerDidChangeSpriteModel<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerSpriteViewController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerPreviewView<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerPreviewZoomScale<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreGraphics.CGFloat where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerIsOrientationMirrored<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> Swift.Bool where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  public func spriteGestureControllerTransformForEditedGeometry<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreGraphics.CGAffineTransform where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension SpriteEditController : ImglyKit.SpriteGestureControllerDelegate {
}
extension SpriteEditController : ImglyKit.PhotoEditModelSettable {
}
public protocol SpriteEditControllerDelegate : AnyObject {
  func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
}
@objcMembers open class SpriteGestureController<SpriteModelType, SpriteSelectionView> : ObjectiveC.NSObject, UIKit.UIGestureRecognizerDelegate where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView {
  @objc final public let tapGestureRecognizer: UIKit.UITapGestureRecognizer
  @objc final public let panGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc final public let pinchGestureRecognizer: UIKit.UIPinchGestureRecognizer
  @objc final public let rotationGestureRecognizer: UIKit.UIRotationGestureRecognizer
  @objc final public let workspaceView: UIKit.UIView
  @objc open var verticalSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc open var horizontalSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc open var rotationSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc open var spriteSnapGuide: ImglyKit.SnapGuideView {
    @objc get
  }
  @objc open var isTapEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  open var spriteSelectionView: SpriteSelectionView?
  open var spriteModel: SpriteModelType? {
    get
    set
  }
  weak open var delegate: ImglyKit.SpriteGestureControllerDelegate?
  @objc required public init(workspaceView: UIKit.UIView)
  @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
public protocol SpriteGestureControllerDelegate : AnyObject {
  func spriteGestureController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidBeginGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidChangeGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidEndGesture<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerDidChangeSpriteModel<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerSpriteViewController<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerPreviewView<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerPreviewZoomScale<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreGraphics.CGFloat where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerIsOrientationMirrored<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> Swift.Bool where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  func spriteGestureControllerTransformForEditedGeometry<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreGraphics.CGAffineTransform where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
}
@objcMembers @objc(PESDKSpriteImageView) open class SpriteImageView : UIKit.UIView {
  @objc open var rotation: CoreGraphics.CGFloat
  @objc final public let uuid: Foundation.UUID
  @objc open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc required public init(uuid: Foundation.UUID)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc override dynamic open func sizeToFit()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension SpriteImageView : ImglyKit.Identifiable {
}
extension SpriteImageView : ImglyKit.Rotatable {
}
@objcMembers @objc(PESDKSpriteLabel) open class SpriteLabel : UIKit.UILabel {
  @objc open var normalizedWidth: CoreGraphics.CGFloat
  @objc open var normalizedCenter: CoreGraphics.CGPoint
  @objc open var normalizedFontSize: CoreGraphics.CGFloat
  @objc open var rotation: CoreGraphics.CGFloat
  @objc open var verticallyFlipped: Swift.Bool
  @objc open var horizontallyFlipped: Swift.Bool
  @objc final public let uuid: Foundation.UUID
  @objc required public init(uuid: Foundation.UUID)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension SpriteLabel : ImglyKit.NormalizedCenterable {
}
extension SpriteLabel : ImglyKit.NormalizedWidthSettable {
}
extension SpriteLabel : ImglyKit.NormalizedFontSizable {
}
extension SpriteLabel : ImglyKit.Identifiable {
}
extension SpriteLabel : ImglyKit.Rotatable {
}
extension SpriteLabel : ImglyKit.VerticallyFlippable {
}
extension SpriteLabel : ImglyKit.HorizontallyFlippable {
}
extension SpriteLabel : ImglyKit.Orientatable {
}
public protocol SpriteModel : ImglyKit.Identifiable, ImglyKit.ObjectiveCBridgeable {
}
public func == (lhs: [ImglyKit.SpriteModel], rhs: [ImglyKit.SpriteModel]) -> Swift.Bool
public func != (lhs: [ImglyKit.SpriteModel], rhs: [ImglyKit.SpriteModel]) -> Swift.Bool
@objcMembers @objc(PESDKSpriteTextDesignView) open class SpriteTextDesignView : ImglyKit.TextDesignView {
  @objc open var normalizedWidth: CoreGraphics.CGFloat
  @objc open var normalizedCenter: CoreGraphics.CGPoint
  @objc open var normalizedPadding: CoreGraphics.CGFloat
  @objc open var rotation: CoreGraphics.CGFloat
  @objc open var verticallyFlipped: Swift.Bool
  @objc open var horizontallyFlipped: Swift.Bool
  @objc final public let uuid: Foundation.UUID
  @objc required public init(uuid: Foundation.UUID)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension SpriteTextDesignView : ImglyKit.NormalizedCenterable {
}
extension SpriteTextDesignView : ImglyKit.NormalizedWidthSettable {
}
extension SpriteTextDesignView : ImglyKit.NormalizedPaddable {
}
extension SpriteTextDesignView : ImglyKit.Identifiable {
}
extension SpriteTextDesignView : ImglyKit.Rotatable {
}
extension SpriteTextDesignView : ImglyKit.VerticallyFlippable {
}
extension SpriteTextDesignView : ImglyKit.HorizontallyFlippable {
}
extension SpriteTextDesignView : ImglyKit.Orientatable {
}
public typealias SpriteView = UIKit.UIView & ImglyKit.Identifiable
public protocol Identifiable {
  var uuid: Foundation.UUID { get }
}
public protocol NormalizedFontSizable {
  var normalizedFontSize: CoreGraphics.CGFloat { get set }
}
public protocol NormalizedCenterable {
  var normalizedCenter: CoreGraphics.CGPoint { get set }
}
public protocol NormalizedWidthSettable {
  var normalizedWidth: CoreGraphics.CGFloat { get set }
}
extension NormalizedWidthSettable where Self : ImglyKit.NormalizedSizable {
  public var normalizedWidth: CoreGraphics.CGFloat {
    get
    set
  }
}
public protocol NormalizedHeightSettable {
  var normalizedHeight: CoreGraphics.CGFloat { get set }
}
extension NormalizedHeightSettable where Self : ImglyKit.NormalizedSizable {
  public var normalizedHeight: CoreGraphics.CGFloat {
    get
    set
  }
}
public protocol NormalizedSizable : ImglyKit.NormalizedHeightSettable, ImglyKit.NormalizedWidthSettable {
  var normalizedSize: CoreGraphics.CGSize { get set }
}
public protocol NormalizedPlaceable : ImglyKit.NormalizedCenterable, ImglyKit.NormalizedSizable {
  var normalizedRect: CoreGraphics.CGRect { get set }
}
extension NormalizedPlaceable {
  public var normalizedRect: CoreGraphics.CGRect {
    get
    set
  }
}
public protocol NormalizedPaddable {
  var normalizedPadding: CoreGraphics.CGFloat { get set }
}
public protocol Paddable {
  var padding: CoreGraphics.CGFloat { get set }
}
public protocol Rotatable {
  var rotation: CoreGraphics.CGFloat { get set }
}
public protocol VerticallyFlippable {
  var verticallyFlipped: Swift.Bool { get set }
}
public protocol HorizontallyFlippable {
  var horizontallyFlipped: Swift.Bool { get set }
}
public protocol Orientatable {
}
@objc(PESDKSpriteViewController) open class SpriteViewController : ImglyKit.ViewController {
  @objc weak open var delegate: ImglyKit.SpriteViewControllerDelegate?
  @objc open var spriteContainerView: ImglyKit.SpriteContainerView {
    @objc get
  }
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc public var assetCatalog: ImglyKit.AssetCatalog {
    @objc get
    @objc set
  }
  @objc open var referenceSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc open var currentSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  required public init(productType: ImglyKit.LicenseProduct)
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func loadView()
  @objc override dynamic open func viewDidLoad()
  @objc open func tapped(_ gestureRecognizer: UIKit.UITapGestureRecognizer)
  open func play(at time: CoreMedia.CMTime? = nil, with trimStartTime: CoreMedia.CMTime? = nil)
  open func pause(at time: CoreMedia.CMTime? = nil, with trimStartTime: CoreMedia.CMTime? = nil)
  open func seek(to time: CoreMedia.CMTime, with trimStartTime: CoreMedia.CMTime? = nil)
  open func selectSpriteView(_ spriteView: ImglyKit.SpriteView?)
  open func spriteView(at point: CoreGraphics.CGPoint) -> ImglyKit.SpriteView?
  open func spriteView(with uuid: Foundation.UUID) -> ImglyKit.SpriteView?
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension SpriteViewController : ImglyKit.PhotoEditModelSettable {
}
extension SpriteViewController : ImglyKit.CanvasViewDataSource {
  @objc dynamic public func canvasViewNormalizedCropRect(_ canvasView: ImglyKit.CanvasView) -> CoreGraphics.CGRect
  @objc dynamic public func canvasViewAppliedOrientation(_ canvasView: ImglyKit.CanvasView) -> ImglyKit.Orientation
  @objc dynamic public func canvasViewStraightenAngle(_ canvasView: ImglyKit.CanvasView) -> CoreGraphics.CGFloat
  @objc dynamic public func canvasViewImageInsets(_ canvasView: ImglyKit.CanvasView) -> UIKit.UIEdgeInsets
  @objc dynamic public func canvasViewOutputImageSize(_ canvasView: ImglyKit.CanvasView) -> CoreGraphics.CGSize
}
extension SpriteViewController : ImglyKit.CanvasViewDelegate {
  public func canvasView(_ canvasView: ImglyKit.CanvasView, didAddPathModel pathModel: ImglyKit.PathModel)
}
@objc(PESDKSpriteViewControllerDelegate) public protocol SpriteViewControllerDelegate : AnyObject {
  @objc func spriteViewControllerDidChangePhotoEditModel(_ spriteViewController: ImglyKit.SpriteViewController)
  @objc func spriteViewControllerUndoController(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.UndoController?
  @objc func spriteViewControllerConfiguration(_ spriteViewController: ImglyKit.SpriteViewController) -> ImglyKit.Configuration?
}
@objc(PESDKGeneratorDelegate) public protocol GeneratorDelegate : AnyObject {
  @objc func generatorDidChange(_ generator: ImglyKit.StampGenerator)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKStampGenerator) open class StampGenerator : ObjectiveC.NSObject {
  @objc open var size: CoreGraphics.CGSize
  @objc open var stamp: UIKit.UIImage {
    @objc get
  }
  @objc open var smallStamp: UIKit.UIImage {
    @objc get
  }
  @objc open var baseDimension: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open var baseBounds: CoreGraphics.CGRect {
    @objc get
  }
  @objc open var scale: CoreGraphics.CGFloat {
    @objc get
  }
  @objc weak open var delegate: ImglyKit.GeneratorDelegate?
  @objc(renderStampInContext:) open func renderStamp(in context: CoreGraphics.CGContext)
  @objc open func radialFade(withHardness hardness: CoreGraphics.CGFloat) -> CoreGraphics.CGImage
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKStickerTintMode) public enum StickerTintMode : Swift.Int {
  case none
  case solid
  case colorized
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKSticker) open class Sticker : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let imageURL: Foundation.URL
  @objc final public let thumbnailURL: Foundation.URL?
  @objc public var tintMode: ImglyKit.StickerTintMode
  @objc final public let identifier: Swift.String
  @objc open var allowBrightnessAdjustment: Swift.Bool
  @objc open var allowContrastAdjustment: Swift.Bool
  @objc open var allowSaturationAdjustment: Swift.Bool
  @objc convenience public init(imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, identifier: Swift.String)
  @objc public init(imageURL: Foundation.URL, thumbnailURL: Foundation.URL?, tintMode: ImglyKit.StickerTintMode, identifier: Swift.String)
  @objc public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.Sticker?
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKStickerCategory) open class StickerCategory : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let imageURL: Foundation.URL
  @objc final public let stickers: [ImglyKit.Sticker]
  public var product: ImglyKit.LicenseProduct?
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL, stickers: [ImglyKit.Sticker])
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL, stickers: [ImglyKit.Sticker])
  @objc public static var all: [ImglyKit.StickerCategory] {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "defaultItems")
  open class func createDefaultStickerCategories() -> [ImglyKit.StickerCategory]
  @objc public class var defaultItems: [ImglyKit.StickerCategory] {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKStickerCategoryListSectionController) open class StickerCategoryListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerCategoryMenuItem) open class StickerCategoryMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let stickerCategory: ImglyKit.StickerCategory
  @objc final public let title: Swift.String
  @objc final public let iconURL: Foundation.URL
  @objc convenience public init(stickerCategory: ImglyKit.StickerCategory)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerCategoryActionMenuItem) open class StickerCategoryActionMenuItem : ImglyKit.ActionMenuItem {
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKIconCollectionViewCell) open class StickerCollectionViewCell : ImglyKit.AssetCollectionViewCell {
  @objc override open func setupImageView()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
@objcMembers open class StickerColorToolController : ImglyKit.ColorToolController<ImglyKit.StickerSpriteModel, ImglyKit.StickerGestureController, ImglyKit.StickerSelectionView> {
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @objc override open func configureToolbarItem()
  @objc override open func updateUserInterfaceState()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  override public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
  override public init?(colorPickerViewController: ImglyKit.ColorPickerViewController<ImglyKit.StickerSpriteModel, ImglyKit.StickerGestureController, ImglyKit.StickerSelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension StickerEditController : ImglyKit.VideoPreviewControlling {
  @objc dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objc(PESDKStickerAdjustmentModel) public enum StickerAdjustmentMode : Swift.Int {
  case brightness
  case contrast
  case saturation
  case opacity
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers open class StickerEditController : ImglyKit.SpriteEditController<ImglyKit.StickerSpriteModel, ImglyKit.StickerGestureController, ImglyKit.StickerSelectionView> {
  weak open var stickerEditDelegate: ImglyKit.StickerEditControllerDelegate?
  final public let sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?
  open var adjustmentMode: ImglyKit.StickerAdjustmentMode? {
    get
    set
  }
  override open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc required convenience dynamic public init()
  public init(sliderEditController: ImglyKit.SliderEditController<ImglyKit.Slider>?)
  @objc override dynamic open func viewDidLoad()
  override public func spriteGestureControllerPreviewZoomScale<SpriteModelType, SpriteSelectionView>(_ spriteGestureController: ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>) -> CoreGraphics.CGFloat where SpriteModelType : ImglyKit.SpriteModel, SpriteSelectionView : UIKit.UIView
  @objc deinit
  @objc override public init(proxyZoomController: ImglyKit.ProxyZoomController?)
}
extension StickerEditController : ImglyKit.SliderEditControllerDelegate {
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didShowSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditController<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, didHideSliderAnimated animated: Swift.Bool) where SliderType : ImglyKit.Slider
  public func sliderEditControllerTargetScrollView<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) -> UIKit.UIScrollView? where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidSlide<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>, toValue value: CoreGraphics.CGFloat) where SliderType : ImglyKit.Slider
  public func sliderEditControllerDidEndSliding<SliderType>(_ sliderEditController: ImglyKit.SliderEditController<SliderType>) where SliderType : ImglyKit.Slider
}
extension StickerEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
}
public protocol StickerEditControllerDelegate : AnyObject {
  func stickerEditController(_ stickerEditController: ImglyKit.StickerEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  func stickerEditControllerDidSlide(_ stickerEditController: ImglyKit.StickerEditController, toValue value: CoreGraphics.CGFloat)
  func stickerEditControllerDidEndSliding(_ stickerEditController: ImglyKit.StickerEditController)
}
@_inheritsConvenienceInitializers @objcMembers open class StickerGestureController : ImglyKit.SpriteGestureController<ImglyKit.StickerSpriteModel, ImglyKit.StickerSelectionView> {
  @objc deinit
  @objc required public init(workspaceView: UIKit.UIView)
}
@_inheritsConvenienceInitializers @objc(PESDKStickerImageView) open class StickerImageView : ImglyKit.SpriteImageView {
  @objc open var normalizedSize: CoreGraphics.CGSize
  @objc open var normalizedCenter: CoreGraphics.CGPoint
  @objc open var verticallyFlipped: Swift.Bool
  @objc open var horizontallyFlipped: Swift.Bool
  @objc required public init(uuid: Foundation.UUID)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc open var tintMode: ImglyKit.StickerTintMode {
    @objc get
    @objc set
  }
  @objc open var colorizeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var brightness: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var contrast: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var saturation: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension StickerImageView : ImglyKit.NormalizedPlaceable {
}
extension StickerImageView : ImglyKit.Orientatable {
}
extension StickerImageView : ImglyKit.VerticallyFlippable {
}
extension StickerImageView : ImglyKit.HorizontallyFlippable {
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerMenuItem) open class StickerMenuItem : ObjectiveC.NSObject {
  @objc final public let sticker: ImglyKit.Sticker
  @objc final public let iconURL: Foundation.URL
  @objc convenience public init(sticker: ImglyKit.Sticker)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(PESDKStickerOptionListSectionController) open class StickerOptionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerOptionMenuItem) open class StickerOptionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let stickerAction: ImglyKit.StickerAction
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(stickerAction: ImglyKit.StickerAction, icon: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(PESDKStickerOptionsToolController) open class StickerOptionsToolController : ImglyKit.MenuToolController, ImglyKit.BrandedTool {
  final public let stickerEditController: ImglyKit.StickerEditController
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(stickerEditController: ImglyKit.StickerEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ adjustEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func stickerEditControllerDidSlide(_ stickerEditController: ImglyKit.StickerEditController, toValue value: CoreGraphics.CGFloat)
  public func stickerEditControllerDidEndSliding(_ stickerEditController: ImglyKit.StickerEditController)
  public func stickerEditController(_ stickerEditController: ImglyKit.StickerEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension StickerOptionsToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension StickerOptionsToolController : ImglyKit.StickerEditControllerDelegate {
}
extension StickerOptionsToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc public enum StickerAction : Swift.Int {
  case color
  case straighten
  case brightness
  case contrast
  case saturation
  case replace
  case opacity
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum StickerOverlayAction : Swift.Int {
  case add
  case delete
  case undo
  case redo
  case flip
  case bringToFront
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKStickerOptionsToolControllerOptions) open class StickerOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedStickerActions: [ImglyKit.StickerAction]
  @objc final public let stickerActionSelectedClosure: ((ImglyKit.StickerAction) -> Swift.Void)?
  @objc final public let actionButtonConfigurationClosure: ((UIKit.UICollectionViewCell, ImglyKit.StickerAction) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.StickerOverlayAction) -> Swift.Void)?
  final public let allowedStickerOverlayActions: [ImglyKit.StickerOverlayAction]
  @objc final public let stickerOverlayActionSelectedClosure: ((ImglyKit.StickerOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.StickerOptionsToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKStickerOptionsToolControllerOptionsBuilder) open class StickerOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedStickerActions: [ImglyKit.StickerAction]
  @objc open var stickerActionSelectedClosure: ((ImglyKit.StickerAction) -> Swift.Void)?
  @objc open var actionButtonConfigurationClosure: ((UIKit.UICollectionViewCell, ImglyKit.StickerAction) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.StickerOverlayAction) -> Swift.Void)?
  open var allowedStickerOverlayActions: [ImglyKit.StickerOverlayAction]
  @objc open var stickerOverlayActionSelectedClosure: ((ImglyKit.StickerOverlayAction) -> Swift.Void)?
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
extension StickerOptionsToolControllerOptionsBuilder {
  @objc(allowedStickerOverlayActions) dynamic open var _objCAllowedStickerOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@objcMembers @objc(PESDKStickerSelectionController) open class StickerSelectionController : ImglyKit.ViewController {
  @objc open var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc open var gradientView: ImglyKit.GradientView {
    @objc get
  }
  @objc open var visualEffectView: UIKit.UIVisualEffectView {
    @objc get
  }
  @objc open var stickerPreviewSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc open var stickers: [ImglyKit.Sticker] {
    @objc get
    @objc set
  }
  @objc weak open var delegate: ImglyKit.StickerSelectionControllerDelegate?
  @objc open var cellConfigurationClosure: ((ImglyKit.StickerCollectionViewCell, ImglyKit.Sticker) -> Swift.Void)?
  @objc open var stickerAddedClosure: ((ImglyKit.Sticker) -> Swift.Void)?
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc public static var collectionViewCellType: ImglyKit.StickerCollectionViewCell.Type {
    @objc get
  }
  @objc required dynamic public init()
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension StickerSelectionController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension StickerSelectionController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension StickerSelectionController : UIKit.UICollectionViewDataSourcePrefetching {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, prefetchItemsAt indexPaths: [Foundation.IndexPath])
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cancelPrefetchingForItemsAt indexPaths: [Foundation.IndexPath])
}
@objc(PESDKStickerSelectionControllerDelegate) public protocol StickerSelectionControllerDelegate : AnyObject {
  @objc func stickerSelectionController(_ stickerSelectionController: ImglyKit.StickerSelectionController, didSelect sticker: ImglyKit.Sticker, with image: UIKit.UIImage)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKStickerSelectionView) open class StickerSelectionView : UIKit.UIView {
  @objc open var decrementHandler: (() -> Swift.Void)?
  @objc open var incrementHandler: (() -> Swift.Void)?
  @objc open var rotateLeftHandler: (() -> Swift.Void)?
  @objc open var rotateRightHandler: (() -> Swift.Void)?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func alignmentRect(forFrame frame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic open func accessibilityDecrement()
  @objc override dynamic open func accessibilityIncrement()
  @objc deinit
}
public struct StickerSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public init(identifier: Swift.String)
  public init(sticker: ImglyKit.Sticker)
  public var normalizedSize: CoreGraphics.CGSize
  public var normalizedCenter: CoreGraphics.CGPoint
  public var rotation: CoreGraphics.CGFloat
  public var verticallyFlipped: Swift.Bool
  public var horizontallyFlipped: Swift.Bool
  public var tintMode: ImglyKit.StickerTintMode?
  public var tintColor: UIKit.UIColor
  public var brightness: CoreGraphics.CGFloat
  public var contrast: CoreGraphics.CGFloat
  public var saturation: CoreGraphics.CGFloat
  public var alpha: CoreGraphics.CGFloat
  public static func == (a: ImglyKit.StickerSpriteModel, b: ImglyKit.StickerSpriteModel) -> Swift.Bool
}
extension StickerSpriteModel : ImglyKit.NormalizedPlaceable {
}
extension StickerSpriteModel : ImglyKit.Rotatable {
}
extension StickerSpriteModel : ImglyKit.VerticallyFlippable {
}
extension StickerSpriteModel : ImglyKit.HorizontallyFlippable {
}
@objcMembers @objc(PESDKStickerToolController) open class StickerToolController : ImglyKit.MenuToolController, ImglyKit.StickerSelectionControllerDelegate {
  @objc final public let stickerSelectionController: ImglyKit.StickerSelectionController
  public var stickerSpriteModel: ImglyKit.StickerSpriteModel?
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(stickerSelectionController: ImglyKit.StickerSelectionController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func updateUserInterfaceState()
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc public func stickerSelectionController(_ stickerSelectionController: ImglyKit.StickerSelectionController, didSelect sticker: ImglyKit.Sticker, with image: UIKit.UIImage)
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension StickerToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
extension StickerToolController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@objcMembers @objc(PESDKStickerToolControllerOptions) open class StickerToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let addedStickerClosure: ((ImglyKit.Sticker) -> Swift.Void)?
  @objc final public let stickerCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.StickerCategory) -> Swift.Void)?
  @objc final public let stickerButtonConfigurationClosure: ((ImglyKit.StickerCollectionViewCell, ImglyKit.Sticker) -> Swift.Void)?
  @objc final public let stickerPreviewSize: CoreGraphics.CGSize
  @objc final public let defaultStickerCategoryIndex: Swift.Int
  @objc final public let personalStickersEnabled: Swift.Bool
  @objc final public let defaultPersonalStickerTintMode: ImglyKit.StickerTintMode
  @objc final public let weatherProvider: ImglyKit.WeatherProvider?
  @objc final public let personalStickerCustomizationClosure: ((ImglyKit.StickerToolController, Foundation.URL, @escaping (Foundation.URL?) -> Swift.Void) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.StickerToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKStickerToolControllerOptionsBuilder) open class StickerToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var addedStickerClosure: ((ImglyKit.Sticker) -> Swift.Void)?
  @objc open var stickerCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.StickerCategory) -> Swift.Void)?
  @objc open var stickerButtonConfigurationClosure: ((ImglyKit.StickerCollectionViewCell, ImglyKit.Sticker) -> Swift.Void)?
  @objc open var stickerPreviewSize: CoreGraphics.CGSize
  @objc open var defaultStickerCategoryIndex: Swift.Int
  @objc open var personalStickersEnabled: Swift.Bool
  @objc open var defaultPersonalStickerTintMode: ImglyKit.StickerTintMode
  @objc open var weatherProvider: ImglyKit.WeatherProvider?
  @objc open var personalStickerCustomizationClosure: ((ImglyKit.StickerToolController, Foundation.URL, @escaping (Foundation.URL?) -> Swift.Void) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.StickerToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKSubtleLabel) open class SubtleLabel : ImglyKit.Label {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTemperatureFilter) open class TemperatureFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputTemperature: Foundation.NSNumber?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKTextButton) open class TextButton : ImglyKit.Button {
  @objc open var labelColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc open var fontName: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic open var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc open var displayName: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum TextColorToolControllerMode : Swift.Int {
  case foreground
  case background
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers open class TextColorToolController : ImglyKit.ColorToolController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView> {
  @objc open var textColorMode: ImglyKit.TextColorToolControllerMode {
    @objc get
    @objc set
  }
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open var colorMenuItems: [ImglyKit.ColorMenuItem] {
    @objc get
  }
  @objc override open func configureToolbarItem()
  @objc override open func updateUserInterfaceState()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  override public func colorPickerViewController<SpriteModelType, GestureController, SelectionView>(_ colorPickerViewController: ImglyKit.ColorPickerViewController<SpriteModelType, GestureController, SelectionView>, didPick color: UIKit.UIColor) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
  override public init?(colorPickerViewController: ImglyKit.ColorPickerViewController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
@objc(PESDKTextColorToolControllerOptions) open class TextColorToolControllerOptions : ImglyKit.ColorToolControllerOptions {
  @objc final public let availableBackgroundTextColors: [ImglyKit.Color]
  @objc convenience dynamic public init()
  @objc public init(textBuilder: ImglyKit.TextColorToolControllerOptionsBuilder)
  @objc override public init(builder: ImglyKit.ColorToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(PESDKTextColorToolControllerOptionsBuilder) open class TextColorToolControllerOptionsBuilder : ImglyKit.ColorToolControllerOptionsBuilder {
  @objc open var availableBackgroundTextColors: [ImglyKit.Color]
  @objc override dynamic public init()
  @objc override public init(options: ImglyKit.ColorToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesign) public class TextDesign : ObjectiveC.NSObject {
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc public static var legacy: [ImglyKit.TextDesign] {
    @objc get
    @objc set
  }
  @objc public class var defaultItems: [ImglyKit.TextDesign] {
    @objc get
  }
  @objc public static var all: [ImglyKit.TextDesign] {
    @objc get
    @objc set
  }
  @objc public static func textDesign(withIdentifier identifier: Swift.String) -> ImglyKit.TextDesign?
  @objc public var identifier: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignBlocks) public class TextDesignBlocks : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignBlocksCondensed) public class TextDesignBlocksCondensed : ImglyKit.TextDesignBlocks {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignBlocksLight) public class TextDesignBlocksLight : ImglyKit.TextDesignBlocks {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTextDesignBlocksLight_V3_1_0) public class TextDesignBlocksLight_V3_1_0 : ImglyKit.TextDesignBlocksLight {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignCelebrate) public class TextDesignCelebrate : ImglyKit.TextDesignBlocks {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignCelebrateSimple) public class TextDesignCelebrateSimple : ImglyKit.TextDesignCelebrate {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class TextDesignEditController : ImglyKit.SpriteEditController<ImglyKit.TextDesignSpriteModel, ImglyKit.TextDesignGestureController, ImglyKit.StickerSelectionView> {
  @objc override dynamic open func viewDidLoad()
  @objc deinit
  @objc required dynamic public init()
  @objc override public init(proxyZoomController: ImglyKit.ProxyZoomController?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignEqualWidth) public class TextDesignEqualWidth : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignEqualWidthFat) public class TextDesignEqualWidthFat : ImglyKit.TextDesignEqualWidth {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers open class TextDesignGestureController : ImglyKit.SpriteGestureController<ImglyKit.TextDesignSpriteModel, ImglyKit.StickerSelectionView> {
  @objc deinit
  @objc required public init(workspaceView: UIKit.UIView)
}
@_inheritsConvenienceInitializers @objc(PESDKTextDesignListSectionController) open class TextDesignListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func selectItem(at index: Swift.Int)
  @objc override open func deselectItem(at index: Swift.Int)
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMasked) public class TextDesignMasked : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMaskedBadge) public class TextDesignMaskedBadge : ImglyKit.TextDesignMasked {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMaskedSpeechBubble) public class TextDesignMaskedSpeechBubble : ImglyKit.TextDesignMasked {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMaskedSpeechBubbleComic) public class TextDesignMaskedSpeechBubbleComic : ImglyKit.TextDesignMaskedSpeechBubble {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMenuItem) open class TextDesignMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let textDesign: ImglyKit.TextDesign
  @objc final public let icon: UIKit.UIImage
  @objc convenience public init(textDesign: ImglyKit.TextDesign)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignMultiline) public class TextDesignMultiline : ImglyKit.TextDesignMasked {
  @objc override dynamic public init()
  @objc deinit
}
extension TextDesignOptionsToolController {
  @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKTextDesignOptionsToolController) open class TextDesignOptionsToolController : ImglyKit.MenuToolController, ImglyKit.BrandedTool {
  final public let spriteEditController: ImglyKit.TextDesignEditController
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(spriteEditController: ImglyKit.TextDesignEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override open func updateUserInterfaceState()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension TextDesignOptionsToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension TextDesignOptionsToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc public enum TextDesignOverlayAction : Swift.Int {
  case invert
  case delete
  case undo
  case redo
  case bringToFront
  case add
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTextDesignOptionsToolControllerOptions) open class TextDesignOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedTextDesignOverlayActions: [ImglyKit.TextDesignOverlayAction]
  @objc final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesign) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  @objc final public let textDesignActionSelectedClosure: ((ImglyKit.TextDesign) -> Swift.Void)?
  @objc final public let overlayActionSelectedClosure: ((ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextDesignOptionsToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignOptionsToolControllerOptionsBuilder) open class TextDesignOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextDesign) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  @objc open var textDesignActionSelectedClosure: ((ImglyKit.TextDesign) -> Swift.Void)?
  @objc open var overlayActionSelectedClosure: ((ImglyKit.TextDesignOverlayAction) -> Swift.Void)?
  open var allowedTextDesignOverlayActions: [ImglyKit.TextDesignOverlayAction]
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextDesignOptionsToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
extension TextDesignOptionsToolControllerOptionsBuilder {
  @objc(allowedTextDesignOverlayActions) dynamic open var _objCAllowedTextDesignOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignParticles) public class TextDesignParticles : ImglyKit.TextDesignSunshine {
  @objc dynamic public init()
  @objc override public init(identifier: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignRotated) public class TextDesignRotated : ImglyKit.TextDesign {
  @objc override dynamic public init()
  @objc deinit
}
public struct TextDesignSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public init(identifier: Swift.String)
  public var rotation: CoreGraphics.CGFloat
  public var verticallyFlipped: Swift.Bool
  public var horizontallyFlipped: Swift.Bool
  public var normalizedWidth: CoreGraphics.CGFloat
  public var normalizedCenter: CoreGraphics.CGPoint
  public var normalizedPadding: CoreGraphics.CGFloat
  public var text: Swift.String?
  public var tintColor: UIKit.UIColor
  public var randomizerSeed: Swift.UInt64
  public var isInverted: Swift.Bool
  public static func == (a: ImglyKit.TextDesignSpriteModel, b: ImglyKit.TextDesignSpriteModel) -> Swift.Bool
}
extension TextDesignSpriteModel : ImglyKit.NormalizedCenterable {
}
extension TextDesignSpriteModel : ImglyKit.NormalizedWidthSettable {
}
extension TextDesignSpriteModel : ImglyKit.NormalizedPaddable {
}
extension TextDesignSpriteModel : ImglyKit.Rotatable {
}
extension TextDesignSpriteModel : ImglyKit.VerticallyFlippable {
}
extension TextDesignSpriteModel : ImglyKit.HorizontallyFlippable {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignSunshine) public class TextDesignSunshine : ImglyKit.TextDesign {
  @objc convenience override dynamic public init()
  @objc public init(identifier: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignSunshine_V3_1_0) public class TextDesignSunshine_V3_1_0 : ImglyKit.TextDesignSunshine {
  @objc override public init(identifier: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers open class TextDesignToolController : ImglyKit.TextEditingToolController<ImglyKit.TextDesignSpriteModel> {
  open var textDesignSpriteModel: ImglyKit.TextDesignSpriteModel? {
    get
    set
  }
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override open func configureToolbarItem()
  @objc override open func loadStateFromModel()
  override open func createSpriteModelFromTextView() -> ImglyKit.TextDesignSpriteModel?
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func textViewDidChange(_ textView: UIKit.UITextView)
  @objc override open func colorCollectionView(_ colorCollectionView: ImglyKit.ColorCollectionView, didSelectColor color: ImglyKit.Color)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignToolControllerOptions) open class TextDesignToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc final public let dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc final public let colorCollectionViewConfigurationClosure: ((ImglyKit.ColorCollectionView) -> Swift.Void)?
  @objc final public let updateTitle: Swift.String?
  @objc final public let colorPalette: ImglyKit.ColorPalette
  @objc @available(iOS 10.2, *)
  public var emojisEnabled: Swift.Bool {
    @objc get
  }
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextDesignToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextDesignToolControllerOptionsBuilder) open class TextDesignToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc open var dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc open var colorCollectionViewConfigurationClosure: ((ImglyKit.ColorCollectionView) -> Swift.Void)?
  @objc open var updateTitle: Swift.String?
  @objc open var colorPalette: ImglyKit.ColorPalette
  @objc @available(iOS 10.2, *)
  open var emojisEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextDesignToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTextDesignView) open class TextDesignView : UIKit.UIView {
  @objc open var textDesign: ImglyKit.TextDesign? {
    @objc get
    @objc set
  }
  @objc open var renderingScaleFactor: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc open var randomizerSeed: Swift.UInt64 {
    @objc get
    @objc set
  }
  @objc open var isInverted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open var imageView: UIKit.UIImageView {
    @objc get
  }
  @objc open var padding: CoreGraphics.CGFloat
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc open func render()
  @objc deinit
}
extension TextDesignView : ImglyKit.Paddable {
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextDesignWatercolor) public class TextDesignWatercolor : ImglyKit.TextDesignMaskedSpeechBubble {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class TextEditingToolController<SpriteModelType> : ImglyKit.PhotoEditToolController, UIKit.UITextViewDelegate, ImglyKit.ColorCollectionViewDelegate where SpriteModelType : ImglyKit.SpriteModel {
  @objc open var dimmingView: UIKit.UIView {
    @objc get
  }
  @objc open var textView: UIKit.UITextView {
    @objc get
  }
  @objc open var colorCollectionView: ImglyKit.ColorCollectionView {
    @objc get
  }
  open var spriteModel: SpriteModelType?
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc open func loadStateFromModel()
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  open func createSpriteModelFromTextView() -> SpriteModelType?
  @objc open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc open func textViewDidChange(_ textView: UIKit.UITextView)
  @objc open func colorCollectionView(_ colorCollectionView: ImglyKit.ColorCollectionView, didSelectColor color: ImglyKit.Color)
  @objc deinit
}
extension TextFontToolController {
  @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKTextFontToolController) open class TextFontToolController : ImglyKit.MenuToolController {
  final public let fontSelectorViewController: ImglyKit.FontSelectorViewController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(fontSelectorViewController: ImglyKit.FontSelectorViewController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  public func fontSelectorViewController<SpriteModelType, GestureController, SelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SelectionView>, didPick font: ImglyKit.Font) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SelectionView>, SelectionView : UIKit.UIView
  public func fontSelectorViewControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func fontSelectorViewControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func fontSelectorViewControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func fontSelectorViewControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ fontSelectorViewController: ImglyKit.FontSelectorViewController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc deinit
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
}
extension TextFontToolController : ImglyKit.FontSelectorViewControllerDelegate {
}
extension TextFontToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objcMembers @objc(PESDKTextFontToolControllerOptions) open class TextFontToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Font) -> Swift.Void)?
  @objc final public let textFontActionSelectedClosure: ((Swift.String) -> Swift.Void)?
  @objc final public let fontSelectorViewConfigurationClosure: ((ImglyKit.FontSelectorView) -> Swift.Void)?
  @objc final public let handleButtonConfigurationClosure: ((ImglyKit.HandleButton) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextFontToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextFontToolControllerOptionsBuilder) open class TextFontToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.Font) -> Swift.Void)?
  @objc open var textFontActionSelectedClosure: ((Swift.String) -> Swift.Void)?
  @objc open var fontSelectorViewConfigurationClosure: ((ImglyKit.FontSelectorView) -> Swift.Void)?
  @objc open var handleButtonConfigurationClosure: ((ImglyKit.HandleButton) -> Swift.Void)?
  @objc override dynamic public init()
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers open class TextGestureController : ImglyKit.SpriteGestureController<ImglyKit.TextSpriteModel, ImglyKit.TextSelectionView> {
  @objc final public let leftDragGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc final public let rightDragGestureRecognizer: UIKit.UIPanGestureRecognizer
  @objc override open var spriteSelectionView: ImglyKit.TextSelectionView? {
    @objc get
    @objc set
  }
  @objc required public init(workspaceView: UIKit.UIView)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKTextOptionListSectionController) open class TextOptionListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextOptionMenuItem) open class TextOptionMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let textAction: ImglyKit.TextAction
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage?
  @objc convenience public init(textAction: ImglyKit.TextAction, icon: UIKit.UIImage? = nil)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension TextOptionsToolController {
  @objc override dynamic open var wantsVideoPlayback: Swift.Bool {
    @objc get
  }
}
@objcMembers @objc(PESDKTextOptionsToolController) open class TextOptionsToolController : ImglyKit.MenuToolController, ImglyKit.BrandedTool {
  final public let spriteEditController: ImglyKit.SpriteEditController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>
  open var spriteView: ImglyKit.SpriteView? {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(spriteEditController: ImglyKit.SpriteEditController<ImglyKit.TextSpriteModel, ImglyKit.TextGestureController, ImglyKit.TextSelectionView>, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override open func updateUserInterfaceState()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  public func spriteEditControllerSpriteViewController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> ImglyKit.SpriteViewController? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerPreviewView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidChangePhotoEditModel<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerTargetScrollView<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) -> UIKit.UIScrollView? where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didTapUsing gestureRecognizer: UIKit.UITapGestureRecognizer) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidBeginGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditControllerDidEndGesture<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  public func spriteEditController<SpriteModelType, GestureController, SpriteSelectionView>(_ spriteEditController: ImglyKit.SpriteEditController<SpriteModelType, GestureController, SpriteSelectionView>, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool) where SpriteModelType : ImglyKit.SpriteModel, GestureController : ImglyKit.SpriteGestureController<SpriteModelType, SpriteSelectionView>, SpriteSelectionView : UIKit.UIView
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc open var undoButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var redoButton: ImglyKit.OverlayButton? {
    get
  }
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension TextOptionsToolController : ImglyKit.SpriteEditControllerDelegate {
}
extension TextOptionsToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc public enum TextAction : Swift.Int {
  case selectFont
  case selectColor
  case selectBackgroundColor
  case selectAlignment
  case straighten
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum TextOverlayAction : Swift.Int {
  case add
  case delete
  case undo
  case redo
  case flip
  case bringToFront
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(IMGLTextOptionsToolControllerOptions) open class TextOptionsToolControllerOptions : ImglyKit.ToolControllerOptions {
  final public let allowedTextActions: [ImglyKit.TextAction]
  final public let allowedTextOverlayActions: [ImglyKit.TextOverlayAction]
  @objc final public let actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextAction) -> Swift.Void)?
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextOverlayAction) -> Swift.Void)?
  @objc final public let textActionSelectedClosure: ((ImglyKit.TextAction) -> Swift.Void)?
  @objc final public let overlayActionSelectedClosure: ((ImglyKit.TextOverlayAction) -> Swift.Void)?
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextOptionsToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTextOptionsToolControllerOptionsBuilder) open class TextOptionsToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  open var allowedTextActions: [ImglyKit.TextAction]
  @objc open var actionButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.TextAction) -> Swift.Void)?
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TextOverlayAction) -> Swift.Void)?
  @objc open var textActionSelectedClosure: ((ImglyKit.TextAction) -> Swift.Void)?
  @objc open var overlayActionSelectedClosure: ((ImglyKit.TextOverlayAction) -> Swift.Void)?
  open var allowedTextOverlayActions: [ImglyKit.TextOverlayAction]
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc override dynamic public init()
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
extension TextOptionsToolControllerOptionsBuilder {
  @objc(allowedTextActions) dynamic open var _objCAllowedTextActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
  @objc(allowedTextOverlayActions) dynamic open var _objCAllowedTextOverlayActions: [Foundation.NSNumber] {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTextSelectionView) open class TextSelectionView : UIKit.UIView {
  @objc open var rightHandle: UIKit.UIView {
    @objc get
  }
  @objc open var leftHandle: UIKit.UIView {
    @objc get
  }
  @objc open var decrementHandler: (() -> Swift.Void)?
  @objc open var incrementHandler: (() -> Swift.Void)?
  @objc open var rotateLeftHandler: (() -> Swift.Void)?
  @objc open var rotateRightHandler: (() -> Swift.Void)?
  @objc open var increaseBoundingBoxHandler: (() -> Swift.Void)?
  @objc open var decreaseBoundingBoxHandler: (() -> Swift.Void)?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func alignmentRect(forFrame frame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func accessibilityDecrement()
  @objc override dynamic open func accessibilityIncrement()
  @objc deinit
}
public struct TextSpriteModel : ImglyKit.SpriteModel, Swift.Equatable {
  public let uuid: Foundation.UUID
  public var normalizedWidth: CoreGraphics.CGFloat
  public var normalizedCenter: CoreGraphics.CGPoint
  public var rotation: CoreGraphics.CGFloat
  public var verticallyFlipped: Swift.Bool
  public var horizontallyFlipped: Swift.Bool
  public var normalizedFontSize: CoreGraphics.CGFloat
  public var text: Swift.String?
  public var textAlignment: UIKit.NSTextAlignment
  public var textColor: UIKit.UIColor
  public var fontIdentifier: Swift.String?
  public var backgroundColor: UIKit.UIColor
  public init()
  public static func == (a: ImglyKit.TextSpriteModel, b: ImglyKit.TextSpriteModel) -> Swift.Bool
}
extension TextSpriteModel : ImglyKit.NormalizedCenterable {
}
extension TextSpriteModel : ImglyKit.NormalizedWidthSettable {
}
extension TextSpriteModel : ImglyKit.NormalizedFontSizable {
}
extension TextSpriteModel : ImglyKit.Rotatable {
}
extension TextSpriteModel : ImglyKit.VerticallyFlippable {
}
extension TextSpriteModel : ImglyKit.HorizontallyFlippable {
}
@_inheritsConvenienceInitializers @objcMembers open class TextToolController : ImglyKit.TextEditingToolController<ImglyKit.TextSpriteModel> {
  open var textSpriteModel: ImglyKit.TextSpriteModel? {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override open func configureToolbarItem()
  @objc override open func loadStateFromModel()
  override open func createSpriteModelFromTextView() -> ImglyKit.TextSpriteModel?
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func textViewDidChange(_ textView: UIKit.UITextView)
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
@objcMembers @objc(PESDKTextToolControllerOptions) open class TextToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc final public let dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc final public let updateTitle: Swift.String?
  @objc final public let defaultTextColor: UIKit.UIColor
  @objc final public let defaultTextAlignment: UIKit.NSTextAlignment
  @objc final public let minimumTextSize: CoreGraphics.CGFloat
  final public let maximumTextSize: CoreGraphics.CGFloat?
  @objc @available(iOS 10.2, *)
  public var emojisEnabled: Swift.Bool {
    @objc get
  }
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TextToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTextToolControllerOptionsBuilder) open class TextToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var textViewConfigurationClosure: ((UIKit.UITextView) -> Swift.Void)?
  @objc open var dimmingViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc open var updateTitle: Swift.String?
  @objc open var defaultTextColor: UIKit.UIColor
  @objc open var defaultTextAlignment: UIKit.NSTextAlignment
  @objc open var minimumTextSize: CoreGraphics.CGFloat
  open var maximumTextSize: CoreGraphics.CGFloat?
  @objc @available(iOS 10.2, *)
  open var emojisEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TextToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
extension TextToolControllerOptions {
  @objc(maximumTextSize) dynamic open var _objCMaximumTextSize: Foundation.NSNumber? {
    @objc get
  }
}
extension TextToolControllerOptionsBuilder {
  @objc(maximumTextSize) dynamic open var _objCMaximumTextSize: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objcMembers @objc(PESDKTexture) open class Texture : ObjectiveC.NSObject {
  @objc open var textureName: OpenGLES.GLuint {
    @objc get
  }
  @objc public init(cgImage: CoreGraphics.CGImage, forceRGB: Swift.Bool)
  @objc deinit
  @objc open func freeGLResources()
  @objc override dynamic public init()
}
public struct Theme : Swift.Equatable {
  public var backgroundColor: UIKit.UIColor
  public var menuBackgroundColor: UIKit.UIColor
  public var toolbarBackgroundColor: UIKit.UIColor
  public var primaryColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor?
  public var rotationSnapGuideColor: UIKit.UIColor?
  public var positionSnapGuideColor: UIKit.UIColor?
  public var boundingBoxSnapGuideColor: UIKit.UIColor?
  public static let dark: ImglyKit.Theme
  public static let light: ImglyKit.Theme
  @available(iOS 13.0, *)
  public static let dynamic: ImglyKit.Theme
  public init(backgroundColor: UIKit.UIColor, menuBackgroundColor: UIKit.UIColor, toolbarBackgroundColor: UIKit.UIColor, primaryColor: UIKit.UIColor)
  public init()
  public static func == (a: ImglyKit.Theme, b: ImglyKit.Theme) -> Swift.Bool
}
extension Theme : ImglyKit.ObjectiveCBridgeable {
}
extension _ObjCTheme {
  @objc(dark) public static var _objCDark: ImglyKit._ObjCTheme {
    @objc get
  }
  @objc(light) public static var _objCLight: ImglyKit._ObjCTheme {
    @objc get
  }
  @available(iOS 13.0, *)
  @objc(dynamic) public static var _objCDynamic: ImglyKit._ObjCTheme {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTintFilter) open class TintFilter : CoreImage.CIFilter {
  @objc open var inputImage: CoreImage.CIImage?
  @objc open var inputColor: UIKit.UIColor?
  @objc override dynamic open var outputImage: CoreImage.CIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTool) open class Tool : ObjectiveC.NSObject {
  @objc open var moved: Swift.Bool {
    get
  }
  @objc open func gestureBegan(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func gestureMoved(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func gestureEnded(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc open func gestureCancelled(_ recognizer: UIKit.UIGestureRecognizer, in view: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolControllerOptions) open class ToolControllerOptions : ObjectiveC.NSObject {
  @objc final public let menuBackgroundColor: UIKit.UIColor?
  @objc final public let titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc final public let applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc final public let didEnterToolClosure: ImglyKit.DidEnterToolClosure?
  @objc final public let willLeaveToolClosure: ImglyKit.WillLeaveToolClosure?
  @objc convenience override dynamic public init()
  @objc public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolControllerOptionsBuilder) open class ToolControllerOptionsBuilder : ObjectiveC.NSObject {
  @objc open var menuBackgroundColor: UIKit.UIColor?
  @objc open var titleViewConfigurationClosure: ImglyKit.ViewConfigurationClosure?
  @objc open var didEnterToolClosure: ImglyKit.DidEnterToolClosure?
  @objc open var willLeaveToolClosure: ImglyKit.WillLeaveToolClosure?
  @objc open var applyButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc open var discardButtonConfigurationClosure: ImglyKit.ButtonConfigurationClosure?
  @objc override dynamic public init()
  @objc public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKToolListSectionController) open class ToolListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKToolMenuItem) open class ToolMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let title: Swift.String
  @objc final public let icon: UIKit.UIImage
  @objc final public let toolControllerClass: ImglyKit.PhotoEditToolController.Type
  @objc final public let supportsPhoto: Swift.Bool
  @objc final public let supportsVideo: Swift.Bool
  @objc convenience public init?(title: Swift.String, icon: UIKit.UIImage, toolControllerClass: ImglyKit.PhotoEditToolController.Type?)
  @objc convenience public init?(title: Swift.String, icon: UIKit.UIImage, toolControllerClass: ImglyKit.PhotoEditToolController.Type?, supportsPhoto: Swift.Bool, supportsVideo: Swift.Bool)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension ToolMenuItem {
  @objc public static func createTransformToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createFilterToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createAdjustToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createStickerToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createTextToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createTextDesignToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createOverlayToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createFrameToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createBrushToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createFocusToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createTrimToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createCompositionToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createCompositionOrTrimToolItem() -> ImglyKit.ToolMenuItem?
  @objc public static func createAudioToolItem() -> ImglyKit.ToolMenuItem?
}
@_inheritsConvenienceInitializers @IBDesignable @objcMembers @objc(PESDKToolbar) open class Toolbar : UIKit.UIView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc open var contentView: UIKit.UIView {
    @objc get
  }
  @objc public var items: [ImglyKit.ToolbarItem] {
    @objc get
    @objc set
  }
  @objc public func setItems(_ items: [ImglyKit.ToolbarItem]?, animated: Swift.Bool)
  @objc(pushToolbarItem:animated:) public func push(_ item: ImglyKit.ToolbarItem, animated: Swift.Bool)
  @discardableResult
  @objc(popToolbarItemAnimated:) public func pop(animated: Swift.Bool) -> ImglyKit.ToolbarItem?
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolbarButton) open class ToolbarButton : ImglyKit.Button {
  @objc open var width: CoreGraphics.CGFloat
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc open func setEnabled(_ enabled: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func tintColorDidChange()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKToolbarItem) open class ToolbarItem : ObjectiveC.NSObject {
  @objc open var titleView: UIKit.UIView?
  @objc open var leadingButton: ImglyKit.ToolbarButton?
  @objc open var trailingButton: ImglyKit.ToolbarButton?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKDefaultToolbarItem) open class DefaultToolbarItem : ImglyKit.ToolbarItem {
  @objc open var titleLabel: ImglyKit.Label {
    @objc get
    @objc set
  }
  @objc open var discardButton: ImglyKit.ToolbarButton {
    @objc get
    @objc set
  }
  @objc open var applyButton: ImglyKit.ToolbarButton {
    @objc get
    @objc set
  }
  @objc override open var titleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc override open var leadingButton: ImglyKit.ToolbarButton? {
    @objc get
    @objc set
  }
  @objc override open var trailingButton: ImglyKit.ToolbarButton? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol ToolbarItemProviding {
  var toolbarItem: ImglyKit.ToolbarItem { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTooltipSlider) open class TooltipSlider : ImglyKit.Slider {
  @objc final public let tooltip: ImglyKit.SliderTooltip
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override open func beginTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  @objc override open func endTracking(with panGestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc deinit
}
public typealias TouchingGestureRecognizerBase = UIKit.UIGestureRecognizer
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKTouchingGestureRecognizer) open class TouchingGestureRecognizer : ImglyKit.TouchingGestureRecognizerBase {
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @objc override dynamic open func reset()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTransformEditController) open class TransformEditController : ImglyKit.ViewController {
  @objc open var showControls: Swift.Bool
  @objc open var canRotateUsingGesture: Swift.Bool
  open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  @objc open var isModelChangeLocal: Swift.Bool {
    get
  }
  @objc weak open var delegate: ImglyKit.TransformEditControllerDelegate?
  @objc open var cropView: ImglyKit.CropAndStraightenView {
    @objc get
  }
  @objc open var cropOverlayView: ImglyKit.CropOverlayView {
    @objc get
  }
  open var cropHandleViewsByHandle: [ImglyKit.CropHandle : ImglyKit.CropHandleView] {
    get
  }
  @objc open var cropCanvasView: UIKit.UIView {
    @objc get
  }
  @objc deinit
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func updateViewConstraints()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func willBecomeActiveTool()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override dynamic open func didResignActiveTool()
  @objc open var rotationGestureRecognizer: UIKit.UIRotationGestureRecognizer? {
    get
  }
  @objc open var scalePickerContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var scalePicker: ImglyKit.ScalePicker {
    @objc get
  }
  @objc open var flipButton: ImglyKit.Button {
    @objc get
  }
  @objc open var rotateButton: ImglyKit.Button {
    @objc get
  }
  @objc open var gradientLayer: QuartzCore.CAGradientLayer {
    @objc get
  }
  @objc open var viewCropRect: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc open func setViewCropRect(_ viewCropRect: CoreGraphics.CGRect, normalizedImageRect: CoreGraphics.CGRect, animated: Swift.Bool = false)
  @objc open var straightenAngle: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc open func setStraightenAngle(_ straightenAngle: CoreGraphics.CGFloat, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @objc open var cropAspect: ImglyKit.CropAspect? {
    @objc get
    @objc set
  }
  @objc open func setCropAspect(_ cropAspect: ImglyKit.CropAspect?, animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension TransformEditController : ImglyKit.ScalePickerDelegate {
  @objc(scalePicker:didChangeValue:) dynamic public func didChange(value: CoreGraphics.CGFloat, on scalePicker: ImglyKit.ScalePicker)
}
extension TransformEditController : ImglyKit.CropAndStraightenViewDelegate {
  @objc dynamic public func cropAndStraightenViewWillBeginTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @objc dynamic public func cropAndStraightenViewDidEndTracking(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
  @objc dynamic public func cropAndStraightenViewDidTrack(_ cropAndStraightenView: ImglyKit.CropAndStraightenView)
}
extension TransformEditController : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension TransformEditController : ImglyKit.PhotoEditModelSettable {
}
extension TransformEditController : ImglyKit.PhotoPreviewControlling {
  @objc dynamic public var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc dynamic public var wantsDefaultPreviewView: Swift.Bool {
    @objc get
  }
}
@objc(PESDKTransformEditControllerDelegate) public protocol TransformEditControllerDelegate : AnyObject {
  @objc func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @objc func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @objc func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  @objc func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @objc optional func transformEditControllerDidChangeOrientation(_ transformEditController: ImglyKit.TransformEditController)
}
public struct TransformModel : Swift.Equatable {
  public var appliedOrientation: ImglyKit.Orientation
  public var normalizedCropRect: CoreGraphics.CGRect
  public var straightenAngle: Swift.Double
  public var imageInsets: UIKit.UIEdgeInsets
  public var adjustedStraightenAngle: Swift.Double {
    get
  }
  public static var identityOrientation: ImglyKit.Orientation {
    get
  }
  public static var identityNormalizedCropRect: CoreGraphics.CGRect {
    get
  }
  public var isGeometryIdentity: Swift.Bool {
    get
  }
  public init(appliedOrientation: ImglyKit.Orientation, normalizedCropRect: CoreGraphics.CGRect, straightenAngle: Swift.Double, imageInsets: UIKit.UIEdgeInsets)
  public init()
  public static func == (a: ImglyKit.TransformModel, b: ImglyKit.TransformModel) -> Swift.Bool
}
extension TransformModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKTransformToolController) open class TransformToolController : ImglyKit.MenuToolController, ImglyKit.TransformEditControllerDelegate, ImglyKit.BrandedTool {
  @objc final public let transformEditController: ImglyKit.TransformEditController
  override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(transformEditController: ImglyKit.TransformEditController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  @objc override dynamic open func willResignActiveTool()
  override open var photoPreviewControllingTarget: ImglyKit.PhotoPreviewControlling? {
    get
  }
  @objc open func transformEditControllerBaseImage(_ transformEditController: ImglyKit.TransformEditController) -> UIKit.UIImage?
  @objc open func transformEditControllerBaseCIImage(_ transformEditController: ImglyKit.TransformEditController) -> CoreImage.CIImage?
  @objc open func transformEditController(_ transformEditController: ImglyKit.TransformEditController, didChangePreferredPreviewViewInsetsAnimated animated: Swift.Bool)
  @objc open func transformEditControllerDidChangeWantsDefaultPreviewView(_ transformEditController: ImglyKit.TransformEditController)
  @objc public func transformEditControllerSpriteViewController(_ transformEditController: ImglyKit.TransformEditController) -> ImglyKit.SpriteViewController?
  @objc public func transformEditControllerDidChangeOrientation(_ transformEditController: ImglyKit.TransformEditController)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didDeselect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension TransformToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
@objc public enum TransformAction : Swift.Int {
  case rotateLeft
  case flipHorizontally
  case straighten
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTransformToolControllerOptions) open class TransformToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let showResetButton: Swift.Bool
  @objc final public let allowFreeCrop: Swift.Bool
  @objc final public let allowedCropAspects: [ImglyKit.CropAspect]
  @objc final public let cropAspectButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.CropAspect?) -> Swift.Void)?
  @objc final public let cropAspectSelectedClosure: ((ImglyKit.CropAspect?) -> Swift.Void)?
  @objc final public let transformButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.TransformAction) -> Swift.Void)?
  @objc final public let scalePickerConfigurationClosure: ((ImglyKit.ScalePicker) -> Swift.Void)?
  @objc final public let scalePickerContainerViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TransformToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTransformToolControllerOptionsBuilder) open class TransformToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var showResetButton: Swift.Bool
  @objc open var allowFreeCrop: Swift.Bool
  @objc open var allowedCropRatios: [ImglyKit.CropAspect]
  @objc open var transformButtonConfigurationClosure: ((ImglyKit.Button, ImglyKit.TransformAction) -> Swift.Void)?
  @objc open var cropAspectButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.CropAspect?) -> Swift.Void)?
  @objc open var cropAspectSelectedClosure: ((ImglyKit.CropAspect?) -> Swift.Void)?
  @objc open var scalePickerConfigurationClosure: ((ImglyKit.ScalePicker) -> Swift.Void)?
  @objc open var scalePickerContainerViewConfigurationClosure: ((UIKit.UIView) -> Swift.Void)?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TransformToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
public protocol TransitionAnimator {
  func preparePresentationAnimation()
  func performPresentationAnimation()
  func finishPresentationAnimation()
  func prepareDismissalAnimation()
  func performDismissalAnimation()
  func finishDismissalAnimation()
}
extension TransitionAnimator {
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func finishPresentationAnimation()
  public func prepareDismissalAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
public protocol TransitionProviding {
  var transitionAnimator: ImglyKit.TransitionAnimator? { get }
}
public struct TrimModel : Swift.Equatable {
  public var startTime: CoreMedia.CMTime?
  public var endTime: CoreMedia.CMTime?
  public init(startTime: CoreMedia.CMTime?, endTime: CoreMedia.CMTime?)
  public init()
  public static func == (a: ImglyKit.TrimModel, b: ImglyKit.TrimModel) -> Swift.Bool
}
extension TrimModel : ImglyKit.ObjectiveCBridgeable {
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKTrimToolController) open class TrimToolController : ImglyKit.PhotoEditToolController, ImglyKit.BrandedTool {
  @objc open var proxyZoomController: ImglyKit.ProxyZoomController {
    @objc get
  }
  @objc open var trimViewContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var controlsContainerView: ImglyKit.MenuAccessoryContainerView {
    @objc get
  }
  @objc open var currentTimeLabel: ImglyKit.DimmedLabel {
    @objc get
  }
  @objc open var durationLabel: ImglyKit.PrimaryLabel {
    @objc get
  }
  @objc open var playPauseButton: ImglyKit.Button {
    @objc get
  }
  @objc open var trimView: ImglyKit.VideoTrimView {
    @objc get
  }
  @objc open var trimViewHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  required public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func updateViewConstraints()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func apply(_ sender: ImglyKit.ToolbarItem)
  @objc override open func discard(_ sender: ImglyKit.ToolbarItem)
  override open func photoEditModelDidChange(from oldModel: ImglyKit.PhotoEditModel, to newModel: ImglyKit.PhotoEditModel)
  @objc override open var preferredPreviewViewInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc override open func setupForZoomAndPan()
  @objc override open func resetForZoomAndPan()
  @objc open var playPauseOverlayButton: ImglyKit.OverlayButton? {
    get
  }
  @objc open var overlayButtons: [ImglyKit.OverlayButton] {
    get
  }
  @objc deinit
}
extension TrimToolController : ImglyKit.VideoTrimViewDelegate {
  @objc dynamic public func videoTrimViewDidStartDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimView(_ videoTrimView: ImglyKit.VideoTrimView, didDragScrubberTo time: CoreMedia.CMTime)
  @objc dynamic public func videoTrimViewDidStopDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidStartDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc dynamic public func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
}
extension TrimToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
extension TrimToolController : ImglyKit.ProxyZoomControllerDelegate {
  @objc dynamic open func proxyZoomControllerTargetScrollView(_ proxyZoomController: ImglyKit.ProxyZoomController) -> UIKit.UIScrollView?
  @objc dynamic open func proxyZoomControllerDidScroll(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerWillBeginZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerDidZoom(_ proxyZoomController: ImglyKit.ProxyZoomController)
  @objc dynamic open func proxyZoomControllerDidEndZooming(_ proxyZoomController: ImglyKit.ProxyZoomController)
}
@objc public enum TrimOverlayAction : Swift.Int {
  case playPause
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKTrimToolControllerOptions) open class TrimToolControllerOptions : ImglyKit.TrimToolOptions {
  @objc final public let overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TrimOverlayAction) -> Swift.Void)?
  final public let allowedTrimOverlayActions: [ImglyKit.TrimOverlayAction]
  @objc final public let trimOverlayActionSelectedClosure: ((ImglyKit.TrimOverlayAction) -> Swift.Void)?
  @objc final public let videoTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc final public let minimumDuration: Foundation.TimeInterval
  final public let maximumDuration: Foundation.TimeInterval?
  public var durationLimits: Swift.ClosedRange<Foundation.TimeInterval> {
    get
  }
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.TrimToolControllerOptionsBuilder)
  @objc override public init(trimBuilder: ImglyKit.TrimToolOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTrimToolControllerOptionsBuilder) open class TrimToolControllerOptionsBuilder : ImglyKit.TrimToolOptionsBuilder {
  @objc open var overlayButtonConfigurationClosure: ((ImglyKit.OverlayButton, ImglyKit.TrimOverlayAction) -> Swift.Void)?
  open var allowedTrimOverlayActions: [ImglyKit.TrimOverlayAction]
  @objc open var trimOverlayActionSelectedClosure: ((ImglyKit.TrimOverlayAction) -> Swift.Void)?
  @objc open var videoTooShortConfirmationClosure: ((ImglyKit.VideoEditViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc open var minimumDuration: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  open var maximumDuration: Foundation.TimeInterval?
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.TrimToolControllerOptions)
  @objc override public init(trimOptions: ImglyKit.TrimToolOptions)
  @objc deinit
}
@objcMembers @objc(PESDKTrimToolOptions) open class TrimToolOptions : ImglyKit.ToolControllerOptions {
  @objc final public let overlayButtonInsets: UIKit.UIEdgeInsets
  @objc final public let useOverlayControls: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(trimBuilder: ImglyKit.TrimToolOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKTrimToolOptionsBuilder) open class TrimToolOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var overlayButtonInsets: UIKit.UIEdgeInsets
  @objc open var useOverlayControls: Swift.Bool
  @objc override dynamic public init()
  @objc public init(trimOptions: ImglyKit.TrimToolOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
extension UIDevice {
  @objc(pesdk_isTooOldForLensBlurPreview) dynamic public var isTooOldForLensBlurPreview: Swift.Bool {
    @objc get
  }
}
extension UIImage {
  @objc(pesdk_downsampleWithMaxDimension:) dynamic public func downsample(withMaxDimension dimension: CoreGraphics.CGFloat) -> UIKit.UIImage
  @objc(pesdk_resizedImageToSize:interpolationQuality:) dynamic public func resizedImage(to newSize: CoreGraphics.CGSize, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @objc(pesdk_resizedImageToSize:transform:drawTransposed:interpolationQuality:) dynamic public func resizedImage(to newSize: CoreGraphics.CGSize, transform: CoreGraphics.CGAffineTransform, drawTransposed transpose: Swift.Bool, interpolationQuality quality: CoreGraphics.CGInterpolationQuality) -> UIKit.UIImage
  @objc(pesdk_normalizedImage) dynamic public var normalizedImage: UIKit.UIImage {
    @objc get
  }
  @objc(pesdk_normalizedImageOfSize:) dynamic public func normalizedImage(of size: CoreGraphics.CGSize) -> UIKit.UIImage
  @objc(pesdk_drawInRect:withContentMode:) dynamic public func draw(in rect: CoreGraphics.CGRect, with contentMode: UIKit.UIView.ContentMode)
  @objc(pesdk_imageWithTintColor:) dynamic public func image(withTint tint: UIKit.UIColor) -> UIKit.UIImage
}
extension UIViewController {
  @objc(pesdk_willBecomeActiveTool) dynamic public func willBecomeActiveTool()
  @objc(pesdk_didBecomeActiveTool) dynamic public func didBecomeActiveTool()
  @objc(pesdk_willResignActiveTool) dynamic public func willResignActiveTool()
  @objc(pesdk_didResignActiveTool) dynamic public func didResignActiveTool()
}
extension NSNotification.Name {
  public static let UndoControllerWillUndoChange: Foundation.Notification.Name
  public static let UndoControllerDidUndoChange: Foundation.Notification.Name
  public static let UndoControllerWillRedoChange: Foundation.Notification.Name
  public static let UndoControllerDidRedoChange: Foundation.Notification.Name
  public static let UndoControllerDidRegisterUndoOperation: Foundation.Notification.Name
  public static let UndoControllerDidUpdate: Foundation.Notification.Name
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKUndoController) open class UndoController : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc open var isEnabled: Swift.Bool
  @objc open var isUndoing: Swift.Bool {
    @objc get
  }
  @objc open var isRedoing: Swift.Bool {
    @objc get
  }
  @objc open func beginUndoGrouping()
  @objc open func endUndoGrouping()
  open func registerUndo<TargetType>(withTarget target: TargetType, handler undoHandler: @escaping (TargetType?) -> Swift.Void) where TargetType : AnyObject
  @objc open func removeAllActions()
  @objc open func removeAllActionsInCurrentGroup()
  @objc open var canUndo: Swift.Bool {
    @objc get
  }
  @objc open var canUndoInCurrentGroup: Swift.Bool {
    @objc get
  }
  @objc open func undo()
  @objc open func undoStep()
  @objc open func undoStepInCurrentGroup()
  @objc open func undoAllInCurrentGroup()
  @objc open func undoGroup()
  @objc open var canRedo: Swift.Bool {
    @objc get
  }
  @objc open var canRedoInCurrentGroup: Swift.Bool {
    @objc get
  }
  @objc open func redo()
  @objc deinit
}
public struct UserInterfaceState : Swift.Equatable {
  public struct VideoClipInterfaceState : Swift.Equatable {
    public let videoClipCategoryIdentifier: Swift.String
    public static func == (a: ImglyKit.UserInterfaceState.VideoClipInterfaceState, b: ImglyKit.UserInterfaceState.VideoClipInterfaceState) -> Swift.Bool
  }
  public struct AudioClipInterfaceState : Swift.Equatable {
    public let audioClipCategoryIdentifier: Swift.String
    public static func == (a: ImglyKit.UserInterfaceState.AudioClipInterfaceState, b: ImglyKit.UserInterfaceState.AudioClipInterfaceState) -> Swift.Bool
  }
  public struct StickerInterfaceState : Swift.Equatable {
    public let stickerCategoryIdentifier: Swift.String
    public static func == (a: ImglyKit.UserInterfaceState.StickerInterfaceState, b: ImglyKit.UserInterfaceState.StickerInterfaceState) -> Swift.Bool
  }
  public struct TextInterfaceState : Swift.Equatable {
    public let font: ImglyKit.Font
    public let color: UIKit.UIColor
    public let backgroundColor: UIKit.UIColor
    public let alignment: UIKit.NSTextAlignment
    public static func == (a: ImglyKit.UserInterfaceState.TextInterfaceState, b: ImglyKit.UserInterfaceState.TextInterfaceState) -> Swift.Bool
  }
  public struct TextDesignInterfaceState : Swift.Equatable {
    public let identifier: Swift.String
    public let color: UIKit.UIColor
    public static func == (a: ImglyKit.UserInterfaceState.TextDesignInterfaceState, b: ImglyKit.UserInterfaceState.TextDesignInterfaceState) -> Swift.Bool
  }
  public var videoClipInterfaceState: ImglyKit.UserInterfaceState.VideoClipInterfaceState?
  public var audioClipInterfaceState: ImglyKit.UserInterfaceState.AudioClipInterfaceState?
  public var stickerInterfaceState: ImglyKit.UserInterfaceState.StickerInterfaceState?
  public var stickerColorPalette: [ImglyKit.ColorMenuItem]?
  public var textInterfaceState: ImglyKit.UserInterfaceState.TextInterfaceState?
  public var textColorPalette: [ImglyKit.ColorMenuItem]?
  public var textBackgroundColorPalette: [ImglyKit.ColorMenuItem]?
  public var textDesignInterfaceState: ImglyKit.UserInterfaceState.TextDesignInterfaceState?
  public var brushColorPalette: [ImglyKit.ColorMenuItem]?
  public var lastColorPipetteState: ImglyKit.ColorPipetteMenuItem?
  public static func == (a: ImglyKit.UserInterfaceState, b: ImglyKit.UserInterfaceState) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class VESDK : ImglyKit.IMGLY {
  @objc override final public class func crashIfNeeded() throws
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideo) open class Video : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var asset: AVFoundation.AVAsset {
    @objc get
  }
  @objc public var size: CoreGraphics.CGSize {
    @objc get
  }
  @objc convenience public init(asset: AVFoundation.AVAsset)
  @objc convenience public init(asset: AVFoundation.AVAsset, size: CoreGraphics.CGSize)
  @objc(initWithURL:) convenience public init(url: Foundation.URL)
  @objc convenience public init(assets: [AVFoundation.AVAsset])
  @objc convenience public init(assets: [AVFoundation.AVAsset], size: CoreGraphics.CGSize)
  @objc convenience public init(size: CoreGraphics.CGSize)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKVideoClip) open class VideoClip : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String?
  @objc final public let artist: Swift.String?
  @objc final public let thumbnailURL: Foundation.URL?
  @objc final public let videoURL: Foundation.URL
  @objc convenience public init(identifier: Swift.String, videoURL: Foundation.URL)
  @objc public init(identifier: Swift.String, videoURL: Foundation.URL, title: Swift.String?, artist: Swift.String?, thumbnailURL: Foundation.URL?)
  @objc public static func withIdentifier(_ identifier: Swift.String) -> ImglyKit.VideoClip?
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(PESDKVideoClipCategory) open class VideoClipCategory : ObjectiveC.NSObject {
  @objc final public let identifier: Swift.String
  @objc final public let title: Swift.String
  @objc final public let imageURL: Foundation.URL?
  @objc final public let videoClips: [ImglyKit.VideoClip]
  @objc public static var all: [ImglyKit.VideoClipCategory] {
    @objc get
    @objc set
  }
  @objc public static var defaultItems: [ImglyKit.VideoClipCategory]
  @objc convenience public init(title: Swift.String, imageURL: Foundation.URL?, videoClips: [ImglyKit.VideoClip])
  @objc public init(identifier: Swift.String, title: Swift.String, imageURL: Foundation.URL?, videoClips: [ImglyKit.VideoClip])
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PESDKVideoClipCategoryListSectionController) open class VideoClipCategoryListSectionController : ImglyKit.MenuListSectionController {
  @objc override open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override open func didUpdate(to object: Any)
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipCategoryMenuItem) open class VideoClipCategoryMenuItem : ObjectiveC.NSObject, ImglyKit.MenuItem {
  @objc final public let videoClipCategory: ImglyKit.VideoClipCategory
  @objc final public let title: Swift.String
  @objc final public let iconURL: Foundation.URL?
  @objc convenience public init(videoClipCategory: ImglyKit.VideoClipCategory)
  @objc public var diffIdentifier: ObjectiveC.NSObjectProtocol {
    @objc get
  }
  @objc public func isEqual(toDiffableObject object: ImglyKit.Diffable?) -> Swift.Bool
  @objc public static var sectionControllerType: ImglyKit.MenuListSectionController.Type {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipCategoryActionMenuItem) open class VideoClipCategoryActionMenuItem : ImglyKit.ActionMenuItem {
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoClipCollectionViewCell) open class VideoClipCollectionViewCell : ImglyKit.AssetCollectionViewCell {
  @objc override open func setupImageView()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public struct VideoClipModel : Swift.Equatable {
  public let uuid: Foundation.UUID
  public var identifier: Swift.String
  public var trimModel: ImglyKit.TrimModel
  public init(identifier: Swift.String)
  public static func == (a: ImglyKit.VideoClipModel, b: ImglyKit.VideoClipModel) -> Swift.Bool
}
extension VideoClipModel : ImglyKit.ObjectiveCBridgeable {
}
@objcMembers @objc(PESDKVideoClipSelectionController) open class VideoClipSelectionController : ImglyKit.ViewController {
  @objc open var collectionView: UIKit.UICollectionView {
    @objc get
  }
  @objc open var gradientView: ImglyKit.GradientView {
    @objc get
  }
  @objc open var visualEffectView: UIKit.UIVisualEffectView {
    @objc get
  }
  @objc open var assetManager: ImglyKit.AssetManager?
  @objc open var videoClips: [ImglyKit.VideoClip] {
    @objc get
    @objc set
  }
  @objc weak open var delegate: ImglyKit.VideoClipSelectionControllerDelegate?
  @objc open var cellConfigurationClosure: ((ImglyKit.VideoClipCollectionViewCell, ImglyKit.VideoClip) -> Swift.Void)?
  @objc public static var collectionViewCellType: ImglyKit.VideoClipCollectionViewCell.Type {
    @objc get
  }
  @objc required dynamic public init()
  @available(*, unavailable)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension VideoClipSelectionController : UIKit.UICollectionViewDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension VideoClipSelectionController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension VideoClipSelectionController : UIKit.UICollectionViewDataSourcePrefetching {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, prefetchItemsAt indexPaths: [Foundation.IndexPath])
}
@objc(PESDKVideoClipSelectionControllerDelegate) public protocol VideoClipSelectionControllerDelegate : AnyObject {
  @objc func videoClipSelectionController(_ videoClipSelectionController: ImglyKit.VideoClipSelectionController, didSelect videoClip: ImglyKit.VideoClip)
}
@objcMembers @objc(PESDKVideoClipToolController) open class VideoClipToolController : ImglyKit.MenuToolController {
  @objc final public let videoClipSelectionController: ImglyKit.VideoClipSelectionController
  @objc weak open var selectionDelegate: ImglyKit.VideoClipToolControllerDelegate?
  required convenience public init?(configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  public init?(videoClipSelectionController: ImglyKit.VideoClipSelectionController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override open func configureToolbarItem()
  @objc override dynamic open func didBecomeActiveTool()
  @objc override dynamic open func willResignActiveTool()
  @objc override open func updateUserInterfaceState()
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, didSelect menuItem: ImglyKit.MenuItem)
  @objc override open func menuViewController(_ menuViewController: ImglyKit.MenuViewController, willShow menuItem: ImglyKit.MenuItem, in cell: UIKit.UICollectionViewCell, at index: Swift.Int)
  override public init?(contentViewController: UIKit.UIViewController, menuViewController: ImglyKit.MenuViewController, configuration: ImglyKit.Configuration, productType: ImglyKit.LicenseProduct)
  @objc deinit
}
extension VideoClipToolController : ImglyKit.TransitionProviding {
  public var transitionAnimator: ImglyKit.TransitionAnimator? {
    get
  }
}
extension VideoClipToolController : ImglyKit.VideoClipSelectionControllerDelegate {
  @objc dynamic public func videoClipSelectionController(_ videoClipSelectionController: ImglyKit.VideoClipSelectionController, didSelect videoClip: ImglyKit.VideoClip)
}
extension VideoClipToolController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@available(iOS 14, *)
extension VideoClipToolController : PhotosUI.PHPickerViewControllerDelegate {
  public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
@objc(PESDKVideoClipToolControllerDelegate) public protocol VideoClipToolControllerDelegate : AnyObject {
  @objc func videoClipToolController(_ videoClipToolController: ImglyKit.VideoClipToolController, didSelect videos: [ImglyKit.VideoClip])
}
@objcMembers @objc(PESDKVideoClipToolControllerOptions) open class VideoClipToolControllerOptions : ImglyKit.ToolControllerOptions {
  @objc final public let videoClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.VideoClipCategory) -> Swift.Void)?
  @objc final public let videoClipButtonConfigurationClosure: ((ImglyKit.VideoClipCollectionViewCell, ImglyKit.VideoClip) -> Swift.Void)?
  @objc final public let defaultVideoClipCategoryIndex: Swift.Int
  @objc final public let personalVideoClipsEnabled: Swift.Bool
  @objc convenience dynamic public init()
  @objc public init(builder: ImglyKit.VideoClipToolControllerOptionsBuilder)
  @objc override public init(editorBuilder: ImglyKit.ToolControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKVideoClipToolControllerOptionsBuilder) open class VideoClipToolControllerOptionsBuilder : ImglyKit.ToolControllerOptionsBuilder {
  @objc open var videoClipCategoryButtonConfigurationClosure: ((ImglyKit.MenuCollectionViewCell, ImglyKit.VideoClipCategory) -> Swift.Void)?
  @objc open var videoClipButtonConfigurationClosure: ((ImglyKit.VideoClipCollectionViewCell, ImglyKit.VideoClip) -> Swift.Void)?
  @objc open var defaultVideoClipCategoryIndex: Swift.Int
  @objc open var personalVideoClipsEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc public init(options: ImglyKit.VideoClipToolControllerOptions)
  @objc override public init(editorOptions: ImglyKit.ToolControllerOptions)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoClipViewModel) open class VideoClipViewModel : ObjectiveC.NSObject {
  @objc final public let videoClip: ImglyKit.VideoClip
  @objc convenience public init(videoClip: ImglyKit.VideoClip)
  @objc override dynamic public init()
  @objc deinit
}
@objc(PESDKVideoCodecProfileH264) public enum VideoCodecProfileH264 : Swift.Int {
  case BaselineAutoLevel
  case BaselineLevel30
  case BaselineLevel31
  case BaselineLevel41
  case MainAutoLevel
  case MainLevel30
  case MainLevel31
  case MainLevel32
  case MainLevel41
  case HighAutoLevel
  case HighLevel40
  case HighLevel41
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoCodec) open class VideoCodec : ObjectiveC.NSObject {
  @objc public static func h264(withBitRate bitRate: Foundation.NSNumber?) -> ImglyKit.VideoCodec
  public static func h264(withBitRate bitRate: Foundation.NSNumber?, profile: ImglyKit.VideoCodecProfileH264?) -> ImglyKit.VideoCodec
  @objc @available(iOS 11.0, *)
  public static func hevc(withQuality quality: Foundation.NSNumber) -> ImglyKit.VideoCodec
  @objc deinit
  @objc override dynamic public init()
}
extension VideoCodec {
  @objc(h264WithBitRate:profile:) public static func _objCH264(withBitRate bitRate: Foundation.NSNumber?, profile: Foundation.NSNumber?) -> ImglyKit.VideoCodec
}
@objc(PESDKVideoContainerFormat) public enum VideoContainerFormat : Swift.Int {
  case mp4
  case mov
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoEditPreviewController) open class VideoEditPreviewController : ImglyKit.MediaEditPreviewController {
  @objc final public let video: ImglyKit.Video
  override open var photoEditModel: ImglyKit.PhotoEditModel {
    get
    set
  }
  required convenience public init(videoAsset: ImglyKit.Video, photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @objc deinit
  @objc override dynamic open func viewDidLoad()
  @objc override open var baseWorkUIImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc override open func loadBaseImage(_ completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc override open func updateLayout()
  @objc override open func updateRenderer()
  override open var imageVendor: ImglyKit.ImageVendor? {
    get
  }
  override public init(renderer: ImglyKit.PhotoEditRenderer, photoEditModel: ImglyKit.PhotoEditModel)
}
extension VideoEditPreviewController {
  @objc convenience dynamic public init(videoAsset: ImglyKit.Video, photoEditModel: ImglyKit._ObjCPhotoEditModel)
}
@objcMembers @objc(PESDKVideoEditViewController) open class VideoEditViewController : ImglyKit.MediaEditViewController, ImglyKit.BrandedView {
  @objc public var isPlaying: Swift.Bool {
    @objc get
  }
  final public let branding: ImglyKit.Branding?
  @objc weak open var delegate: ImglyKit.VideoEditViewControllerDelegate?
  @objc override public var options: ImglyKit.MediaEditViewControllerOptions {
    @objc get
  }
  required public init(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel())
  @objc override dynamic open func viewDidLoad()
  public static func makeVideoEditViewController(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration = Configuration(), photoEditModel: ImglyKit.PhotoEditModel = PhotoEditModel()) -> ImglyKit.VideoEditViewController
  @objc open func play()
  @objc open func pause()
  @objc override open func renderHighResolutionVariant()
  @objc open var serializedSettings: Foundation.Data? {
    @objc get
  }
  @objc override open func didCancel()
  @objc override open func willPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc override open func didPresent(_ toolController: ImglyKit.PhotoEditToolController)
  @objc override open func willDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc override open func didDismiss(_ toolController: ImglyKit.PhotoEditToolController)
  @objc override dynamic open func mediaEditPreviewControllerPlaybackEnabled(_ mediaEditPreviewController: ImglyKit.MediaEditPreviewController) -> Swift.Bool
  @objc deinit
  override public init(mediaEditPreviewController: ImglyKit.MediaEditPreviewController, configuration: ImglyKit.Configuration = super, menuItems: [ImglyKit.PhotoEditMenuItem] = super, photoEditModel: ImglyKit.PhotoEditModel = super)
}
@objc(PESDKVideoEditViewControllerDelegate) public protocol VideoEditViewControllerDelegate : ImglyKit.MediaEditViewControllerDelegate {
  @objc(videoEditViewController:didFinishWithVideoAtURL:) func videoEditViewController(_ videoEditViewController: ImglyKit.VideoEditViewController, didFinishWithVideoAt url: Foundation.URL?)
  @objc func videoEditViewControllerDidFailToGenerateVideo(_ videoEditViewController: ImglyKit.VideoEditViewController)
  @objc func videoEditViewControllerDidCancel(_ videoEditViewController: ImglyKit.VideoEditViewController)
}
extension VideoEditViewController {
  @objc convenience dynamic public init(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration)
  @objc convenience dynamic public init(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel)
  @objc public static func videoEditViewController(videoAsset: ImglyKit.Video, configuration: ImglyKit.Configuration, photoEditModel: ImglyKit._ObjCPhotoEditModel) -> ImglyKit.VideoEditViewController
}
@objc(PESDKForceTrimMode) public enum ForceTrimMode : Swift.Int {
  case always
  case ifNeeded
  case silent
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers @objc(PESDKVideoEditViewControllerOptions) open class VideoEditViewControllerOptions : ImglyKit.MediaEditViewControllerOptions {
  @objc final public let videoContainerFormat: ImglyKit.VideoContainerFormat
  @objc public var videoContainerFormatUTI: CoreFoundation.CFString {
    @objc get
  }
  @objc final public let videoCodec: ImglyKit.VideoCodec
  @objc final public let exportURL: Foundation.URL?
  @objc final public let forceTrimMode: ImglyKit.ForceTrimMode
  @objc convenience dynamic public init()
  @objc public init(videoEditBuilder: ImglyKit.VideoEditViewControllerOptionsBuilder)
  @objc override public init(builder: ImglyKit.MediaEditViewControllerOptionsBuilder)
  @objc deinit
}
@objcMembers @objc(PESDKVideoEditViewControllerOptionsBuilder) open class VideoEditViewControllerOptionsBuilder : ImglyKit.MediaEditViewControllerOptionsBuilder {
  @objc open var videoContainerFormat: ImglyKit.VideoContainerFormat
  @objc open var videoCodec: ImglyKit.VideoCodec
  @objc open var exportURL: Foundation.URL?
  @objc open var forceTrimMode: ImglyKit.ForceTrimMode
  @objc override dynamic public init()
  @objc public init(videoEditOptions: ImglyKit.VideoEditViewControllerOptions)
  @objc override public init(options: ImglyKit.MediaEditViewControllerOptions)
  @objc deinit
}
public protocol VideoPreviewControlling {
  var wantsVideoPlayback: Swift.Bool { get }
  var videoPreviewControllingTarget: ImglyKit.VideoPreviewControlling? { get }
}
extension VideoPreviewControlling {
  public var wantsVideoPlayback: Swift.Bool {
    get
  }
  public var videoPreviewControllingTarget: ImglyKit.VideoPreviewControlling? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(PESDKVideoRecordButton) final public class VideoRecordButton : UIKit.UIControl {
  @objc final public var isRecording: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic final public var outlineColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func layoutSubviews()
  @objc override final public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override final public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc override final public func cancelTracking(with event: UIKit.UIEvent?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoScrubberView) open class VideoScrubberView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
@objc(PESDKVideoTrimSelectionViewDelegate) public protocol VideoTrimSelectionViewDelegate : AnyObject {
  @objc func videoTrimSelectionViewDidStartDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc func videoTrimSelectionViewDidChangeStartTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc func videoTrimSelectionViewDidChangeEndTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc func videoTrimSelectionViewDidStopDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoTrimSelectionView) open class VideoTrimSelectionView : UIKit.UIView {
  @objc weak public var delegate: ImglyKit.VideoTrimSelectionViewDelegate?
  @objc public var asset: AVFoundation.AVAsset? {
    @objc get
    @objc set
  }
  @objc public var minimumDuration: CoreMedia.CMTime
  public var maximumDuration: CoreMedia.CMTime?
  public var startTime: CoreMedia.CMTime? {
    get
    set
  }
  public var endTime: CoreMedia.CMTime? {
    get
    set
  }
  @objc public var handleWidth: CoreGraphics.CGFloat
  @objc public var inactiveColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var leftHandle: UIKit.UIView {
    @objc get
  }
  @objc public var rightHandle: UIKit.UIView {
    @objc get
  }
  @objc final public let topBorder: UIKit.UIView
  @objc final public let bottomBorder: UIKit.UIView
  @objc final public let durationOverlayLabel: ImglyKit.OverlayLabel
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
@objc(PESDKVideoTrimViewDelegate) public protocol VideoTrimViewDelegate : AnyObject {
  @objc func videoTrimViewDidStartDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimView(_ videoTrimView: ImglyKit.VideoTrimView, didDragScrubberTo time: CoreMedia.CMTime)
  @objc func videoTrimViewDidStopDraggingScrubber(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidStartDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidChangeStartTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidChangeEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
  @objc func videoTrimViewDidStopDraggingStartOrEndTime(_ videoTrimView: ImglyKit.VideoTrimView)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKVideoTrimView) open class VideoTrimView : UIKit.UIView {
  @objc weak public var delegate: ImglyKit.VideoTrimViewDelegate?
  @objc @available(*, deprecated, message: "Use `video` or `video.asset` instead.")
  public var asset: AVFoundation.AVAsset? {
    @objc get
    @objc set
  }
  @objc public var video: ImglyKit.Video? {
    @objc get
    @objc set
  }
  @objc dynamic public var thumbnailWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc public var minimumDuration: CoreMedia.CMTime {
    @objc get
    @objc set
  }
  public var maximumDuration: CoreMedia.CMTime? {
    get
    set
  }
  public var startTime: CoreMedia.CMTime? {
    get
    set
  }
  public var endTime: CoreMedia.CMTime? {
    get
    set
  }
  public var currentTime: CoreMedia.CMTime? {
    get
    set
  }
  @objc dynamic public var isZoomToSelectionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open func layoutSubviews()
  @objc open func play()
  @objc open func pause()
  @objc deinit
}
extension VideoTrimView : ImglyKit.VideoTrimSelectionViewDelegate {
  @objc dynamic public func videoTrimSelectionViewDidStartDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc dynamic public func videoTrimSelectionViewDidChangeStartTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc dynamic public func videoTrimSelectionViewDidChangeEndTime(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
  @objc dynamic public func videoTrimSelectionViewDidStopDragging(_ videoTrimSelectionView: ImglyKit.VideoTrimSelectionView)
}
extension VideoTrimView : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic public func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
}
@_inheritsConvenienceInitializers @objcMembers @objc(PESDKViewController) open class ViewController : UIKit.UIViewController {
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct VisualEffectCollectionViewTransitionAnimator : ImglyKit.TransitionAnimator {
  public init(view: UIKit.UIView, visualEffectView: UIKit.UIVisualEffectView, visualEffect: UIKit.UIVisualEffect, collectionView: UIKit.UICollectionView)
  public func preparePresentationAnimation()
  public func performPresentationAnimation()
  public func performDismissalAnimation()
  public func finishDismissalAnimation()
}
extension ImglyKit.AdjustTool : Swift.Equatable {}
extension ImglyKit.AdjustTool : Swift.Hashable {}
extension ImglyKit.AdjustTool : Swift.RawRepresentable {}
extension ImglyKit.AdjustOverlayAction : Swift.Equatable {}
extension ImglyKit.AdjustOverlayAction : Swift.Hashable {}
extension ImglyKit.AdjustOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.AudioClipModel : ImglyKit.Identifiable {}
extension ImglyKit.AudioOverlayAction : Swift.Equatable {}
extension ImglyKit.AudioOverlayAction : Swift.Hashable {}
extension ImglyKit.AudioOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.BlendMode : Swift.Equatable {}
extension ImglyKit.BlendMode : Swift.Hashable {}
extension ImglyKit.BlendMode : Swift.RawRepresentable {}
extension ImglyKit.BrushTool : Swift.Equatable {}
extension ImglyKit.BrushTool : Swift.Hashable {}
extension ImglyKit.BrushTool : Swift.RawRepresentable {}
extension ImglyKit.BrushOverlayAction : Swift.Equatable {}
extension ImglyKit.BrushOverlayAction : Swift.Hashable {}
extension ImglyKit.BrushOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.CameraControllerError : Swift.Equatable {}
extension ImglyKit.CameraControllerError : Swift.Hashable {}
extension ImglyKit.CameraControllerError : Swift.RawRepresentable {}
extension ImglyKit.ClipTrimOverlayAction : Swift.Equatable {}
extension ImglyKit.ClipTrimOverlayAction : Swift.Hashable {}
extension ImglyKit.ClipTrimOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.CompositionOverlayAction : Swift.Equatable {}
extension ImglyKit.CompositionOverlayAction : Swift.Hashable {}
extension ImglyKit.CompositionOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.VideoClipLibraryMode : Swift.Equatable {}
extension ImglyKit.VideoClipLibraryMode : Swift.Hashable {}
extension ImglyKit.VideoClipLibraryMode : Swift.RawRepresentable {}
extension ImglyKit.ConfigurationSerializationImageFormat : Swift.Equatable {}
extension ImglyKit.ConfigurationSerializationImageFormat : Swift.Hashable {}
extension ImglyKit.ConfigurationSerializationImageFormat : Swift.RawRepresentable {}
extension ImglyKit.ConfigurationSerializationVideoCodec : Swift.Equatable {}
extension ImglyKit.ConfigurationSerializationVideoCodec : Swift.Hashable {}
extension ImglyKit.ConfigurationSerializationVideoCodec : Swift.RawRepresentable {}
extension ImglyKit.ConfigurationSerializationVideoFormat : Swift.Equatable {}
extension ImglyKit.ConfigurationSerializationVideoFormat : Swift.Hashable {}
extension ImglyKit.ConfigurationSerializationVideoFormat : Swift.RawRepresentable {}
extension ImglyKit.CropHandle : Swift.Equatable {}
extension ImglyKit.CropHandle : Swift.Hashable {}
extension ImglyKit.RecordingOrientation : Swift.Equatable {}
extension ImglyKit.RecordingOrientation : Swift.Hashable {}
extension ImglyKit.RecordingOrientation : Swift.RawRepresentable {}
extension ImglyKit.FocusMode : Swift.Equatable {}
extension ImglyKit.FocusMode : Swift.Hashable {}
extension ImglyKit.FocusMode : Swift.RawRepresentable {}
extension ImglyKit.FrameBuildMode : Swift.Equatable {}
extension ImglyKit.FrameBuildMode : Swift.Hashable {}
extension ImglyKit.FrameBuildMode : Swift.RawRepresentable {}
extension ImglyKit.FrameLayoutMode : Swift.Equatable {}
extension ImglyKit.FrameLayoutMode : Swift.Hashable {}
extension ImglyKit.FrameLayoutMode : Swift.RawRepresentable {}
extension ImglyKit.FrameAction : Swift.Equatable {}
extension ImglyKit.FrameAction : Swift.Hashable {}
extension ImglyKit.FrameAction : Swift.RawRepresentable {}
extension ImglyKit.FrameTileMode : Swift.Equatable {}
extension ImglyKit.FrameTileMode : Swift.Hashable {}
extension ImglyKit.FrameTileMode : Swift.RawRepresentable {}
extension ImglyKit.ImageFileFormat : Swift.Equatable {}
extension ImglyKit.ImageFileFormat : Swift.Hashable {}
extension ImglyKit.ImageFileFormat : Swift.RawRepresentable {}
extension ImglyKit.LicenseFeature : Swift.Equatable {}
extension ImglyKit.LicenseFeature : Swift.Hashable {}
extension ImglyKit.LicenseFeature : Swift.RawRepresentable {}
extension ImglyKit.LicenseProduct : Swift.Equatable {}
extension ImglyKit.LicenseProduct : Swift.Hashable {}
extension ImglyKit.LicenseProduct : Swift.RawRepresentable {}
extension ImglyKit._ObjCLicenseProduct : Swift.Equatable {}
extension ImglyKit._ObjCLicenseProduct : Swift.Hashable {}
extension ImglyKit._ObjCLicenseProduct : Swift.RawRepresentable {}
extension ImglyKit.LogLevel : Swift.Equatable {}
extension ImglyKit.LogLevel : Swift.Hashable {}
extension ImglyKit.LogLevel : Swift.RawRepresentable {}
extension ImglyKit.MediaEditOverlayAction : Swift.Equatable {}
extension ImglyKit.MediaEditOverlayAction : Swift.Hashable {}
extension ImglyKit.MediaEditOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.NavigationControllerMode : Swift.Equatable {}
extension ImglyKit.NavigationControllerMode : Swift.Hashable {}
extension ImglyKit.NavigationControllerMode : Swift.RawRepresentable {}
extension ImglyKit.Orientation : Swift.Equatable {}
extension ImglyKit.Orientation : Swift.Hashable {}
extension ImglyKit.Orientation : Swift.RawRepresentable {}
extension ImglyKit.BlurQuality : Swift.Equatable {}
extension ImglyKit.BlurQuality : Swift.Hashable {}
extension ImglyKit.BlurQuality : Swift.RawRepresentable {}
extension ImglyKit.RecordingMode : Swift.Equatable {}
extension ImglyKit.RecordingMode : Swift.Hashable {}
extension ImglyKit.RecordingMode : Swift.RawRepresentable {}
extension ImglyKit.TemperatureFormat : Swift.Equatable {}
extension ImglyKit.TemperatureFormat : Swift.Hashable {}
extension ImglyKit.TemperatureFormat : Swift.RawRepresentable {}
extension ImglyKit.TemperatureUnit : Swift.Equatable {}
extension ImglyKit.TemperatureUnit : Swift.Hashable {}
extension ImglyKit.TemperatureUnit : Swift.RawRepresentable {}
extension ImglyKit.SnapGuide : Swift.Equatable {}
extension ImglyKit.SnapGuide : Swift.Hashable {}
extension ImglyKit.SnapGuide : Swift.RawRepresentable {}
extension ImglyKit.StickerTintMode : Swift.Equatable {}
extension ImglyKit.StickerTintMode : Swift.Hashable {}
extension ImglyKit.StickerTintMode : Swift.RawRepresentable {}
extension ImglyKit.StickerAdjustmentMode : Swift.Equatable {}
extension ImglyKit.StickerAdjustmentMode : Swift.Hashable {}
extension ImglyKit.StickerAdjustmentMode : Swift.RawRepresentable {}
extension ImglyKit.StickerAction : Swift.Equatable {}
extension ImglyKit.StickerAction : Swift.Hashable {}
extension ImglyKit.StickerAction : Swift.RawRepresentable {}
extension ImglyKit.StickerOverlayAction : Swift.Equatable {}
extension ImglyKit.StickerOverlayAction : Swift.Hashable {}
extension ImglyKit.StickerOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TextColorToolControllerMode : Swift.Equatable {}
extension ImglyKit.TextColorToolControllerMode : Swift.Hashable {}
extension ImglyKit.TextColorToolControllerMode : Swift.RawRepresentable {}
extension ImglyKit.TextDesignOverlayAction : Swift.Equatable {}
extension ImglyKit.TextDesignOverlayAction : Swift.Hashable {}
extension ImglyKit.TextDesignOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TextAction : Swift.Equatable {}
extension ImglyKit.TextAction : Swift.Hashable {}
extension ImglyKit.TextAction : Swift.RawRepresentable {}
extension ImglyKit.TextOverlayAction : Swift.Equatable {}
extension ImglyKit.TextOverlayAction : Swift.Hashable {}
extension ImglyKit.TextOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.TransformAction : Swift.Equatable {}
extension ImglyKit.TransformAction : Swift.Hashable {}
extension ImglyKit.TransformAction : Swift.RawRepresentable {}
extension ImglyKit.TrimOverlayAction : Swift.Equatable {}
extension ImglyKit.TrimOverlayAction : Swift.Hashable {}
extension ImglyKit.TrimOverlayAction : Swift.RawRepresentable {}
extension ImglyKit.VideoClipModel : ImglyKit.Identifiable {}
extension ImglyKit.VideoCodecProfileH264 : Swift.Equatable {}
extension ImglyKit.VideoCodecProfileH264 : Swift.Hashable {}
extension ImglyKit.VideoCodecProfileH264 : Swift.RawRepresentable {}
extension ImglyKit.VideoContainerFormat : Swift.Equatable {}
extension ImglyKit.VideoContainerFormat : Swift.Hashable {}
extension ImglyKit.VideoContainerFormat : Swift.RawRepresentable {}
extension ImglyKit.ForceTrimMode : Swift.Equatable {}
extension ImglyKit.ForceTrimMode : Swift.Hashable {}
extension ImglyKit.ForceTrimMode : Swift.RawRepresentable {}
